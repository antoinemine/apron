/* -*- mode: c -*- */

/*
 * avo.idl
 *
 * OCaml interface specification for camlidl
 *
 * APRON Library / AV Octagonal Domain
 *
 * Copyright (C) Liqian Chen & Jiangchao Liu' 2014-
 *
 */

/* This file is part of the APRON Library, released under LGPL license
   with an exception allowing the redistribution of statically linked
   executables.

   Please read the COPYING file packaged in the distribution.
*/

quote(C,"/*\n This file is part of the APRON Library, released under LGPL license.\n Please read the COPYING file packaged in the distribution.\n*/")
quote(MLMLI,"(*\n This file is part of the APRON Library, released under LGPL license.\n Please read the COPYING file packaged in the distribution.\n*)")

quote(MLI,"\n \n(** AV Octagon abstract domain. *)\n \n")

quote(C,"#include \"avo.h\"")
quote(C,"#include \"apron_caml.h\"")

quote(C,"#define I0_CHECK_EXC(man) if (man->result.exn!=AP_EXC_NONE){ value v = camlidl_c2ml_manager_struct_ap_exclog_t(man->result.exclog,_ctx); caml_raise_with_arg(*caml_named_value(\"apron exception\"),v); } ")


quote(C,"typedef struct avo_internal_t* internal_ptr;")

import "generator0.idl";
import "abstract0.idl";
import "scalar.idl";
import "manager.idl";

typedef [abstract] struct avo_internal_t* internal_ptr;

quote(MLMLI,"\n \n\
type t\n\
  (** Type of AV octagons.\n\n\
      AV Octagons are defined by conjunctions of inequalities of the form\n\
      [+/-x_i +/- x_j >= 0].\n\n\
    Abstract values which are AV octagons have the type [t Apron.AbstractX.t].\n\n\
    Managers allocated for AV octagons have the type [t Apron.manager.t].\n\
  *)\n\n \
")

quote(MLI,"(** Allocate a new manager to manipulate AV octagons. *)")
ap_manager_ptr avo_manager_alloc(void);

quote(MLI,"(** No internal parameters for now... *)")
internal_ptr manager_get_internal(ap_manager_ptr man)
  quote(call,"_res = (internal_ptr)man->internal;");

quote(MLI,"(** Approximate a set of generators to an abstract value, with best precision. *)")
ap_abstract0_ptr ap_abstract0_avo_of_generator_array(ap_manager_ptr man, int v1, int v2, [ref]struct ap_generator0_array_t* v3)
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Widening with scalar thresholds. *)")
ap_abstract0_ptr ap_abstract0_avo_widening_thresholds(ap_manager_ptr man,ap_abstract0_ptr a1,ap_abstract0_ptr a2,struct ap_scalar_array_t array)
     quote(call,"_res = ap_abstract0_avo_widening_thresholds(man,a1,a2,(ap_scalar_t**)array.p,array.size);")
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Standard narrowing. *)")
ap_abstract0_ptr ap_abstract0_avo_narrowing(ap_manager_ptr man, ap_abstract0_ptr a1,ap_abstract0_ptr a2)
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Perturbation. *)")
ap_abstract0_ptr ap_abstract0_avo_add_epsilon(ap_manager_ptr man,ap_abstract0_ptr a,ap_scalar_ptr epsilon)
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Perturbation. *)")
ap_abstract0_ptr ap_abstract0_avo_add_epsilon_bin(ap_manager_ptr man,ap_abstract0_ptr a1,ap_abstract0_ptr a2,ap_scalar_ptr epsilon)
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Algorithms. *)")
const int pre_widening = 99;

quote(MLI,"\n(** {2 Type conversions} *)

val manager_is_avo : 'a Apron.Manager.t -> bool
  (** Return [true] iff the argument manager is an AV octagon manager *)
val manager_of_avo : t Apron.Manager.t -> 'a Apron.Manager.t
  (** Make an AV octagon manager generic *)
val manager_to_avo : 'a Apron.Manager.t -> t Apron.Manager.t
  (** Instanciate the type of an AV octagon manager.
      Raises [Failure] if the argument manager is not an AV octagon manager *)
module Abstract0 : sig
  val is_avo : 'a Apron.Abstract0.t -> bool
    (** Return [true] iff the argument value is an avo value *)
  val of_avo : t Apron.Abstract0.t -> 'a Apron.Abstract0.t
    (** Make an avo value generic *)
  val to_avo : 'a Apron.Abstract0.t -> t Apron.Abstract0.t
    (** Instanciate the type of an avo value.
	Raises [Failure] if the argument value is not an avo value *)
end
module Abstract1 : sig
  val is_avo : 'a Apron.Abstract1.t -> bool
    (** Return [true] iff the argument value is an avo value *)
  val of_avo : t Apron.Abstract1.t -> 'a Apron.Abstract1.t
    (** Make an avo value generic *)
  val to_avo : 'a Apron.Abstract1.t -> t Apron.Abstract1.t
    (** Instanciate the type of an avo value.
	Raises [Failure] if the argument value is not an avo value *)
end
")

quote(ML,"
let manager_is_avo man =
  let str = Apron.Manager.get_library man in
  (String.compare str \"avo\")==0
let manager_of_avo (man:t Apron.Manager.t) : 'a Apron.Manager.t = Obj.magic man
let manager_to_avo (man:'a Apron.Manager.t) : t Apron.Manager.t =
  if manager_is_avo man then
    Obj.magic man
  else
    failwith \"Avo.manager_to_avo: the argument manager is not an Avo manager\"
module Abstract0 = struct
  let is_avo abs =
    manager_is_avo (Apron.Abstract0.manager abs)
  let of_avo (abs: t Apron.Abstract0.t) : 'a Apron.Abstract0.t = Obj.magic abs
  let to_avo (abs:'a Apron.Abstract0.t) : t Apron.Abstract0.t =
  if is_avo abs then
    Obj.magic abs
  else
    failwith \"Avo.Abstract0.to_avo: the argument value is not an avo value\"
end
module Abstract1 = struct
  let is_avo abs =
    manager_is_avo (Apron.Abstract1.manager abs)
  let of_avo (abs: t Apron.Abstract1.t) : 'a Apron.Abstract1.t = Obj.magic abs
  let to_avo (abs:'a Apron.Abstract1.t) : t Apron.Abstract1.t =
  if is_avo abs then
    Obj.magic abs
  else
    failwith \"Avo.Abstract1.to_avo: the argument value is not an avo value\"
end
")

quote(MLI,"\n(**
{2 Compilation information}

See {!Introduction.compilation} for complete explanations.
We just show examples with the file [mlexample.ml].

{3 Bytecode compilation}

{[ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -o mlexample.byte \\
  bigarray.cma gmp.cma apron.cma avoD.cma mlexample.ml]}

{[ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -make-runtime -o myrun \\
  bigarray.cma gmp.cma apron.cma avoD.cma

ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -use-runtime myrun -o mlexample.byte \\
  bigarray.cma gmp.cma apron.cma avoD.cma mlexample.ml ]}

{3 Native-code compilation}

{[ocamlopt -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -o mlexample.opt \\
  bigarray.cmxa gmp.cmxa apron.cmxa avoD.cmxa mlexample.ml ]}

{3 Without auto-linking feature}

{[ocamlopt -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -noautolink -o mlexample.opt \\
  bigarray.cmxa gmp.cmxa apron.cmxa avoD.cmxa mlexample.ml \\
  -cclib \"-L$MLGMPIDL_PREFIX/lib -L$APRON_PREFIX/lib \\
	  -lavoD_caml_debug -lavoD_debug \\
	  -lapron_caml_debug -lapron_debug \\
	  -lgmp_caml -L$MPFR_PREFIX/lib -lmpfr -L$GMP_PREFIX/lib -lgmp \\
	  -L$CAMLIDL_PREFIX/lib/ocaml -lcamlidl \\
	  -lbigarray\" ]}

*)")
