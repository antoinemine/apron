/* -*- mode: c -*- */

/* This file is part of the APRON Library, released under LGPL license
   with an exception allowing the redistribution of statically linked
   executables.

   Please read the COPYING file packaged in the distribution  */

quote(MLI,"(** APRON Linear constraints of level 0 *)")

quote(C, "\n\
#include <limits.h>\n\
#include \"ap_lincons0.h\"\n\
#include \"apron_caml.h\"\n\
\n\
")

import "scalar.idl";
import "interval.idl";
import "coeff.idl";
import "dim.idl";
import "linexpr0.idl";

/* For ap_lincons0_t,

- the conversion from ML to C may use allocation, but it is automatically freed
  by Camlidl mechanisms
- the conversion from C to ML free after conversion the scalar field in the C structure.
  the C type should NOT be deallocated
*/

typedef [mltype("{\n  mutable linexpr0 : Linexpr0.t;\n  mutable typ : typ;\n}"),
	 abstract,
	 ml2c(camlidl_apron_lincons0_ml2c),
	 c2ml(camlidl_apron_lincons0_c2ml)]
struct ap_lincons0_t ap_lincons0_t;
quote(MLMLI,"and typ =\n  | EQ\n  | SUPEQ\n  | SUP\n  | DISEQ\n  | EQMOD of Scalar.t\n")

struct ap_lincons0_array_t {
  [size_is(size)] ap_lincons0_t* p;
  int size;
};

quote(MLI,"\n\
(** Make a linear constraint. Modifying later the linear expression\n\
  modifies correspondingly the linear constraint and conversely *)\n\
val make : Linexpr0.t -> typ -> t\n\
\n\
(** Copy a linear constraint (deep copy) *)\n\
val copy : t -> t\n\
\n\
(** Convert a constraint type to a string ([=],[>=], or [>]) *)\n\
val string_of_typ : typ -> string\n\
\n\
(** Print a constraint *)\n\
val print : (Dim.t -> string) -> Format.formatter -> t -> unit\n\
")

quote(ML,"\n\
let string_of_typ = function\n\
| EQ | EQMOD _ -> \"=\"\n\
| SUPEQ -> \">=\"\n\
| SUP -> \">\"\n\
| DISEQ -> \"<>\"\n\
\n\
let print assoc fmt cons = \n\
  Linexpr0.print assoc fmt cons.linexpr0;\n\
  Format.fprintf fmt \"%s0\" (string_of_typ cons.typ);\n\
  begin match cons.typ with\n\
  | EQMOD x -> Format.fprintf fmt \" mod %a\" Scalar.print x;\n\
  | _ -> ()\n\
  end;\n\
  ()\n\
let make expr typ = {\n\
linexpr0 = expr; typ = typ \n\
}\n\
let copy cons = {\n\
linexpr0 = Linexpr0.copy cons.linexpr0; typ = cons.typ\n\
}\n\
")
