/* -*- mode: c -*- */

/* ************************************************************************* */
/* ap_lincons0.c: linear constraints and arrays */
/* ************************************************************************* */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

#include "ap_lincons0.h"
#include "ap_linexprconsD_conv.h"
#include "ap_linexprconsMPQ_conv.h"
#include "ap_linexprconsMPFR_conv.h"

/* ====================================================================== */
/* I. Memory management and printing */
/* ====================================================================== */

void ap_lincons0_init(ap_lincons0_t res, ap_scalar_discr_t discr, size_t size)
{
  res->ref = false;
  res->discr = discr;
  SWITCH(discr)
    res->lincons.XXX = ap_linconsXXX_alloc(size);
  ENDSWITCH
}
void ap_lincons0_init_set(ap_lincons0_t res,ap_lincons0_t e)
{
  res->ref = false;
  res->discr = e->discr;
  SWITCH(e->discr)
    res->lincons.XXX = ap_linconsXXX_alloc_set(e->lincons.XXX);
  ENDSWITCH
}
MACRO_MAINZ
void ap_lincons0_init_set_ZZZ(ap_lincons0_t res, ap_linconsZZZ_t e)
{
  ap_lincons0_init(res,AP_SCALAR_ZZZ,e->linexpr->size);
  ap_linconsZZZ_set(res->lincons.ZZZ,e);
}
ENDMACRO
void ap_lincons0_clear(ap_lincons0_t e)
{
  if (e->ref==false){
    SWITCH(e->discr)
      ap_linconsXXX_clear(e->lincons.XXX);
    ENDSWITCH
  }
}
void ap_lincons0_fprint(FILE* stream, ap_lincons0_t e, char** name_of_dim)
{
  SWITCH(e->discr)
    ap_linconsXXX_fprint(stream,e->lincons.XXX,name_of_dim);
  ENDSWITCH
}
void ap_lincons0_minimize(ap_lincons0_t e)
{
  SWITCH(e->discr)
    ap_linexprXXX_minimize(e->lincons.XXX->linexpr);
  ENDSWITCH
}

/* ====================================================================== */
/* Conversions */
/* ====================================================================== */

MACRO_MAINZ
bool ap_lincons0_set_ap_linconsZZZ(ap_lincons0_t a, ap_linconsZZZ_t b, numinternal_t intern)
{
  switch (a->discr){
  case AP_SCALAR_D:
    return ap_linconsD_set_ap_linconsZZZ(a->lincons.D,b,intern);
  case AP_SCALAR_MPQ:
    return ap_linconsMPQ_set_ap_linconsZZZ(a->lincons.MPQ,b,intern);
  case AP_SCALAR_MPFR:
    return ap_linconsMPFR_set_ap_linconsZZZ(a->lincons.MPFR,b,intern);
  default:
    abort();
  }
}
bool ap_linconsZZZ_set_ap_lincons0(ap_linconsZZZ_t a, ap_lincons0_t b, numinternal_t intern)
{
  switch(b->discr){
  case AP_SCALAR_D:
    return ap_linconsZZZ_set_ap_linconsD(a,b->lincons.D,intern);
  case AP_SCALAR_MPQ:
    return ap_linconsZZZ_set_ap_linconsMPQ(a,b->lincons.MPQ,intern);
  case AP_SCALAR_MPFR:
    return ap_linconsZZZ_set_ap_linconsMPFR(a,b->lincons.MPFR,intern);
  default:
    abort();
  }
}
ENDMACRO

/* ====================================================================== */
/* III Access */
/* ====================================================================== */

void ap_lincons0_linexpr0ref(ap_linexpr0_t e, ap_lincons0_t c)
{
  e->ref = true;
  e->discr = c->discr;
  SWITCH (e->discr)
    e->linexpr.XXX = c->lincons.XXX->linexpr;
  ENDSWITCH
}
ap_constyp_t* ap_lincons0_constypref(ap_lincons0_t c)
{
  ap_constyp_t* p;
  SWITCH (c->discr)
    p = &c->lincons.XXX->constyp;
  ENDSWITCH
  return p;
}
mpq_ptr ap_lincons0_mpqref(ap_lincons0_t c)
{
  mpq_ptr p;
  SWITCH (c->discr)
    p = c->lincons.XXX->mpq;
  ENDSWITCH
  return p;
}

/* ====================================================================== */
/* IV. Change of dimensions and permutations */
/* ====================================================================== */

void ap_lincons0_add_dimensions(ap_lincons0_t res,
				ap_lincons0_t expr,
				ap_dimchange_t* dimchange)
{
  if (res->discr!=expr->discr || (res==expr && expr->ref))
    abort();
  SWITCH(expr->discr)
    ap_linconsXXX_add_dimensions(res->lincons.XXX,expr->lincons.XXX,dimchange);
  ENDSWITCH
}
void ap_lincons0_permute_dimensions(ap_lincons0_t res,
				    ap_lincons0_t expr,
				    ap_dimperm_t* dimperm)
{
  if (res->discr!=expr->discr || (res==expr && expr->ref))
    abort();
  SWITCH(expr->discr)
    ap_linconsXXX_permute_dimensions(res->lincons.XXX,expr->lincons.XXX,dimperm);
  ENDSWITCH
}

/* ====================================================================== */
/* V. Hashing, comparison */
/* ====================================================================== */

/* Induces reduction of the coefficients */

int ap_lincons0_hash(ap_lincons0_t expr)
{
  int res;
  SWITCH(expr->discr)
    res = ap_linconsXXX_hash(expr->lincons.XXX);
  ENDSWITCH
  return res;
}
bool ap_lincons0_equal(ap_lincons0_t expr1,
		       ap_lincons0_t expr2)
{
  bool res;
  if (expr1->discr != expr2->discr)
    res = false;
  else {
    SWITCH(expr1->discr)
      res = ap_linconsXXX_equal(expr1->lincons.XXX,expr2->lincons.XXX);
    ENDSWITCH
  }
  return res;
}
/* Lexicographic ordering, terminating by constant coefficients */
int ap_lincons0_compare(ap_lincons0_t expr1,
			ap_lincons0_t expr2)
{
  int res;
  if (expr1->discr != expr2->discr){
    res = (expr1->discr - expr2->discr);
    res = res>0 ? 3 : -3;
  }
  else {
    SWITCH(expr1->discr)
      res = ap_linconsXXX_compare(expr1->lincons.XXX,expr2->lincons.XXX);
    ENDSWITCH
  }
  return res;
}
