# 1 "pk_extract.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "pk_extract.c"







# 1 "pk_config.h" 1







# 1 "/usr/include/assert.h" 1 3 4
# 37 "/usr/include/assert.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 313 "/usr/include/features.h" 3 4
# 1 "/usr/include/bits/predefs.h" 1 3 4
# 314 "/usr/include/features.h" 2 3 4
# 346 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 353 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 354 "/usr/include/sys/cdefs.h" 2 3 4
# 347 "/usr/include/features.h" 2 3 4
# 378 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4


# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 379 "/usr/include/features.h" 2 3 4
# 38 "/usr/include/assert.h" 2 3 4
# 9 "pk_config.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 3 4
typedef unsigned int size_t;
# 323 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 3 4
typedef int wchar_t;
# 34 "/usr/include/stdlib.h" 2 3 4


# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

# 277 "/usr/include/stdlib.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__)) atof (__const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__)) atoi (__const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__)) atol (__const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__)) atoll (__const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}

# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__)) ;


extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 29 "/usr/include/sys/types.h" 3 4


# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 32 "/usr/include/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 62 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 100 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4
# 147 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 217 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 218 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4

# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);



# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) unsigned int
__attribute__ ((__nothrow__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) unsigned int
__attribute__ ((__nothrow__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) unsigned long long int
__attribute__ ((__nothrow__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}
# 224 "/usr/include/sys/types.h" 2 3 4
# 235 "/usr/include/sys/types.h" 3 4
typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;
# 67 "/usr/include/bits/pthreadtypes.h" 3 4
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;





typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;





    int __kind;





    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };

  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
# 170 "/usr/include/bits/pthreadtypes.h" 3 4
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;

  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4



# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));







extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__));



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__));






# 498 "/usr/include/stdlib.h" 2 3 4




extern void *valloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 530 "/usr/include/stdlib.h" 3 4





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
# 553 "/usr/include/stdlib.h" 3 4






extern void _Exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__));






extern int clearenv (void) __attribute__ ((__nothrow__));
# 604 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 615 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 635 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 661 "/usr/include/stdlib.h" 3 4





extern int system (__const char *__command) ;

# 683 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__)) ;






typedef int (*__compar_fn_t) (__const void *, __const void *);
# 701 "/usr/include/stdlib.h" 3 4



extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 720 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;

# 756 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));








extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 861 "/usr/include/stdlib.h" 3 4
extern int posix_openpt (int __oflag) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 912 "/usr/include/stdlib.h" 3 4

# 10 "pk_config.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 416 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 458 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
# 488 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));
# 76 "/usr/include/stdio.h" 2 3 4
# 89 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;




# 141 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 142 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) __attribute__ ((__nothrow__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) __attribute__ ((__nothrow__));








extern FILE *tmpfile (void) ;
# 186 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__)) ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 229 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 243 "/usr/include/stdio.h" 3 4






extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 272 "/usr/include/stdio.h" 3 4

# 283 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__)) ;
# 296 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  __attribute__ ((__nothrow__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__));








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 394 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (__const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (__const char *__restrict __s, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__));
# 445 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 476 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 504 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 532 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 543 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 576 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 638 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 710 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 746 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 765 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 788 "/usr/include/stdio.h" 3 4

# 797 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];
# 827 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
# 846 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__));
# 886 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));
# 907 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio.h" 1 3 4
# 36 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (__const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}
# 125 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 908 "/usr/include/stdio.h" 2 3 4
# 916 "/usr/include/stdio.h" 3 4

# 11 "pk_config.h" 2

# 1 "/home/donquijote/dev/apron/include/num.h" 1
# 10 "/home/donquijote/dev/apron/include/num.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 11 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 122 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/bits/local_lim.h" 2 3 4
# 158 "/usr/include/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/syslimits.h" 2 3 4
# 12 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 2 3 4
# 11 "/home/donquijote/dev/apron/include/num.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 94 "/usr/include/string.h" 3 4
extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 125 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 162 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 208 "/usr/include/string.h" 3 4

# 233 "/usr/include/string.h" 3 4
extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 279 "/usr/include/string.h" 3 4



extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
# 395 "/usr/include/string.h" 3 4


extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__));

# 425 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 443 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 487 "/usr/include/string.h" 3 4
extern char *index (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
extern char *rindex (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 534 "/usr/include/string.h" 3 4
extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 557 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__));


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 632 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/string.h" 1 3 4
# 633 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/bits/string2.h" 1 3 4
# 394 "/usr/include/bits/string2.h" 3 4
extern void *__rawmemchr (const void *__s, int __c);
# 969 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c1 (__const char *__s, int __reject);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c1 (__const char *__s, int __reject)
{
  register size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c2 (__const char *__s, int __reject1,
         int __reject2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c2 (__const char *__s, int __reject1, int __reject2)
{
  register size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c3 (__const char *__s, int __reject1,
         int __reject2, int __reject3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c3 (__const char *__s, int __reject1, int __reject2,
       int __reject3)
{
  register size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2 && __s[__result] != __reject3)
    ++__result;
  return __result;
}
# 1045 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c1 (__const char *__s, int __accept);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c1 (__const char *__s, int __accept)
{
  register size_t __result = 0;

  while (__s[__result] == __accept)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c2 (__const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c2 (__const char *__s, int __accept1, int __accept2)
{
  register size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c3 (__const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c3 (__const char *__s, int __accept1, int __accept2, int __accept3)
{
  register size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2
  || __s[__result] == __accept3)
    ++__result;
  return __result;
}
# 1121 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c2 (__const char *__s, int __accept1,
         int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c2 (__const char *__s, int __accept1, int __accept2)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c3 (__const char *__s, int __accept1,
         int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c3 (__const char *__s, int __accept1, int __accept2,
       int __accept3)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2
  && *__s != __accept3)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}
# 1172 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strtok_r_1c (char *__s, char __sep, char **__nextp);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strtok_r_1c (char *__s, char __sep, char **__nextp)
{
  char *__result;
  if (__s == ((void *)0))
    __s = *__nextp;
  while (*__s == __sep)
    ++__s;
  __result = ((void *)0);
  if (*__s != '\0')
    {
      __result = __s++;
      while (*__s != '\0')
 if (*__s++ == __sep)
   {
     __s[-1] = '\0';
     break;
   }
    }
  *__nextp = __s;
  return __result;
}
# 1204 "/usr/include/bits/string2.h" 3 4
extern char *__strsep_g (char **__stringp, __const char *__delim);
# 1222 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_1c (char **__s, char __reject);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_1c (char **__s, char __reject)
{
  register char *__retval = *__s;
  if (__retval != ((void *)0) && (*__s = (__extension__ (__builtin_constant_p (__reject) && !__builtin_constant_p (__retval) && (__reject) == '\0' ? (char *) __rawmemchr (__retval, __reject) : __builtin_strchr (__retval, __reject)))) != ((void *)0))
    *(*__s)++ = '\0';
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_2c (char **__s, char __reject1, char __reject2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_2c (char **__s, char __reject1, char __reject2)
{
  register char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      register char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_3c (char **__s, char __reject1, char __reject2,
       char __reject3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3)
{
  register char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      register char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}
# 1303 "/usr/include/bits/string2.h" 3 4
extern char *__strdup (__const char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__));
# 1322 "/usr/include/bits/string2.h" 3 4
extern char *__strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__));
# 636 "/usr/include/string.h" 2 3 4
# 644 "/usr/include/string.h" 3 4

# 12 "/home/donquijote/dev/apron/include/num.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 13 "/home/donquijote/dev/apron/include/num.h" 2
# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4




# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 26 "/usr/include/bits/mathdef.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/mathdef.h" 2 3 4
# 38 "/usr/include/bits/mathdef.h" 3 4
typedef long double float_t;

typedef long double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern double acos (double __x) __attribute__ ((__nothrow__)); extern double __acos (double __x) __attribute__ ((__nothrow__));

extern double asin (double __x) __attribute__ ((__nothrow__)); extern double __asin (double __x) __attribute__ ((__nothrow__));

extern double atan (double __x) __attribute__ ((__nothrow__)); extern double __atan (double __x) __attribute__ ((__nothrow__));

extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__));


extern double cos (double __x) __attribute__ ((__nothrow__)); extern double __cos (double __x) __attribute__ ((__nothrow__));

extern double sin (double __x) __attribute__ ((__nothrow__)); extern double __sin (double __x) __attribute__ ((__nothrow__));

extern double tan (double __x) __attribute__ ((__nothrow__)); extern double __tan (double __x) __attribute__ ((__nothrow__));




extern double cosh (double __x) __attribute__ ((__nothrow__)); extern double __cosh (double __x) __attribute__ ((__nothrow__));

extern double sinh (double __x) __attribute__ ((__nothrow__)); extern double __sinh (double __x) __attribute__ ((__nothrow__));

extern double tanh (double __x) __attribute__ ((__nothrow__)); extern double __tanh (double __x) __attribute__ ((__nothrow__));

# 87 "/usr/include/bits/mathcalls.h" 3 4


extern double acosh (double __x) __attribute__ ((__nothrow__)); extern double __acosh (double __x) __attribute__ ((__nothrow__));

extern double asinh (double __x) __attribute__ ((__nothrow__)); extern double __asinh (double __x) __attribute__ ((__nothrow__));

extern double atanh (double __x) __attribute__ ((__nothrow__)); extern double __atanh (double __x) __attribute__ ((__nothrow__));







extern double exp (double __x) __attribute__ ((__nothrow__)); extern double __exp (double __x) __attribute__ ((__nothrow__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__));


extern double log (double __x) __attribute__ ((__nothrow__)); extern double __log (double __x) __attribute__ ((__nothrow__));


extern double log10 (double __x) __attribute__ ((__nothrow__)); extern double __log10 (double __x) __attribute__ ((__nothrow__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__));

# 127 "/usr/include/bits/mathcalls.h" 3 4


extern double expm1 (double __x) __attribute__ ((__nothrow__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__));


extern double log1p (double __x) __attribute__ ((__nothrow__)); extern double __log1p (double __x) __attribute__ ((__nothrow__));


extern double logb (double __x) __attribute__ ((__nothrow__)); extern double __logb (double __x) __attribute__ ((__nothrow__));






extern double exp2 (double __x) __attribute__ ((__nothrow__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__));


extern double log2 (double __x) __attribute__ ((__nothrow__)); extern double __log2 (double __x) __attribute__ ((__nothrow__));








extern double pow (double __x, double __y) __attribute__ ((__nothrow__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__));


extern double sqrt (double __x) __attribute__ ((__nothrow__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__));





extern double hypot (double __x, double __y) __attribute__ ((__nothrow__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__));






extern double cbrt (double __x) __attribute__ ((__nothrow__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__));








extern double ceil (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__));




extern int __isinf (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));





extern int isinf (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int finite (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__));



extern double significand (double __x) __attribute__ ((__nothrow__)); extern double __significand (double __x) __attribute__ ((__nothrow__));





extern double copysign (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));






extern double nan (__const char *__tagb) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __nan (__const char *__tagb) __attribute__ ((__nothrow__)) __attribute__ ((__const__));





extern int __isnan (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern int isnan (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern double j0 (double) __attribute__ ((__nothrow__)); extern double __j0 (double) __attribute__ ((__nothrow__));
extern double j1 (double) __attribute__ ((__nothrow__)); extern double __j1 (double) __attribute__ ((__nothrow__));
extern double jn (int, double) __attribute__ ((__nothrow__)); extern double __jn (int, double) __attribute__ ((__nothrow__));
extern double y0 (double) __attribute__ ((__nothrow__)); extern double __y0 (double) __attribute__ ((__nothrow__));
extern double y1 (double) __attribute__ ((__nothrow__)); extern double __y1 (double) __attribute__ ((__nothrow__));
extern double yn (int, double) __attribute__ ((__nothrow__)); extern double __yn (int, double) __attribute__ ((__nothrow__));






extern double erf (double) __attribute__ ((__nothrow__)); extern double __erf (double) __attribute__ ((__nothrow__));
extern double erfc (double) __attribute__ ((__nothrow__)); extern double __erfc (double) __attribute__ ((__nothrow__));
extern double lgamma (double) __attribute__ ((__nothrow__)); extern double __lgamma (double) __attribute__ ((__nothrow__));






extern double tgamma (double) __attribute__ ((__nothrow__)); extern double __tgamma (double) __attribute__ ((__nothrow__));





extern double gamma (double) __attribute__ ((__nothrow__)); extern double __gamma (double) __attribute__ ((__nothrow__));






extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__));







extern double rint (double __x) __attribute__ ((__nothrow__)); extern double __rint (double __x) __attribute__ ((__nothrow__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__));



extern int ilogb (double __x) __attribute__ ((__nothrow__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__));



extern double round (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__));






extern long int lrint (double __x) __attribute__ ((__nothrow__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__));
extern long long int llrint (double __x) __attribute__ ((__nothrow__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__));



extern long int lround (double __x) __attribute__ ((__nothrow__)); extern long int __lround (double __x) __attribute__ ((__nothrow__));
extern long long int llround (double __x) __attribute__ ((__nothrow__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__));


extern double fmax (double __x, double __y) __attribute__ ((__nothrow__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__));



extern int __fpclassify (double __value) __attribute__ ((__nothrow__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__))
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__));








extern double scalb (double __x, double __n) __attribute__ ((__nothrow__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__));
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern float acosf (float __x) __attribute__ ((__nothrow__)); extern float __acosf (float __x) __attribute__ ((__nothrow__));

extern float asinf (float __x) __attribute__ ((__nothrow__)); extern float __asinf (float __x) __attribute__ ((__nothrow__));

extern float atanf (float __x) __attribute__ ((__nothrow__)); extern float __atanf (float __x) __attribute__ ((__nothrow__));

extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__));


extern float cosf (float __x) __attribute__ ((__nothrow__)); extern float __cosf (float __x) __attribute__ ((__nothrow__));

extern float sinf (float __x) __attribute__ ((__nothrow__)); extern float __sinf (float __x) __attribute__ ((__nothrow__));

extern float tanf (float __x) __attribute__ ((__nothrow__)); extern float __tanf (float __x) __attribute__ ((__nothrow__));




extern float coshf (float __x) __attribute__ ((__nothrow__)); extern float __coshf (float __x) __attribute__ ((__nothrow__));

extern float sinhf (float __x) __attribute__ ((__nothrow__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__));

extern float tanhf (float __x) __attribute__ ((__nothrow__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__));

# 87 "/usr/include/bits/mathcalls.h" 3 4


extern float acoshf (float __x) __attribute__ ((__nothrow__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__));

extern float asinhf (float __x) __attribute__ ((__nothrow__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__));

extern float atanhf (float __x) __attribute__ ((__nothrow__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__));







extern float expf (float __x) __attribute__ ((__nothrow__)); extern float __expf (float __x) __attribute__ ((__nothrow__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__));


extern float logf (float __x) __attribute__ ((__nothrow__)); extern float __logf (float __x) __attribute__ ((__nothrow__));


extern float log10f (float __x) __attribute__ ((__nothrow__)); extern float __log10f (float __x) __attribute__ ((__nothrow__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__));

# 127 "/usr/include/bits/mathcalls.h" 3 4


extern float expm1f (float __x) __attribute__ ((__nothrow__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__));


extern float log1pf (float __x) __attribute__ ((__nothrow__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__));


extern float logbf (float __x) __attribute__ ((__nothrow__)); extern float __logbf (float __x) __attribute__ ((__nothrow__));






extern float exp2f (float __x) __attribute__ ((__nothrow__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__));


extern float log2f (float __x) __attribute__ ((__nothrow__)); extern float __log2f (float __x) __attribute__ ((__nothrow__));








extern float powf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__));





extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__));






extern float cbrtf (float __x) __attribute__ ((__nothrow__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__));








extern float ceilf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__));




extern int __isinff (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));





extern int isinff (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int finitef (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__));



extern float significandf (float __x) __attribute__ ((__nothrow__)); extern float __significandf (float __x) __attribute__ ((__nothrow__));





extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));






extern float nanf (__const char *__tagb) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) __attribute__ ((__nothrow__)) __attribute__ ((__const__));





extern int __isnanf (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern int isnanf (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern float j0f (float) __attribute__ ((__nothrow__)); extern float __j0f (float) __attribute__ ((__nothrow__));
extern float j1f (float) __attribute__ ((__nothrow__)); extern float __j1f (float) __attribute__ ((__nothrow__));
extern float jnf (int, float) __attribute__ ((__nothrow__)); extern float __jnf (int, float) __attribute__ ((__nothrow__));
extern float y0f (float) __attribute__ ((__nothrow__)); extern float __y0f (float) __attribute__ ((__nothrow__));
extern float y1f (float) __attribute__ ((__nothrow__)); extern float __y1f (float) __attribute__ ((__nothrow__));
extern float ynf (int, float) __attribute__ ((__nothrow__)); extern float __ynf (int, float) __attribute__ ((__nothrow__));






extern float erff (float) __attribute__ ((__nothrow__)); extern float __erff (float) __attribute__ ((__nothrow__));
extern float erfcf (float) __attribute__ ((__nothrow__)); extern float __erfcf (float) __attribute__ ((__nothrow__));
extern float lgammaf (float) __attribute__ ((__nothrow__)); extern float __lgammaf (float) __attribute__ ((__nothrow__));






extern float tgammaf (float) __attribute__ ((__nothrow__)); extern float __tgammaf (float) __attribute__ ((__nothrow__));





extern float gammaf (float) __attribute__ ((__nothrow__)); extern float __gammaf (float) __attribute__ ((__nothrow__));






extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__));







extern float rintf (float __x) __attribute__ ((__nothrow__)); extern float __rintf (float __x) __attribute__ ((__nothrow__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__));



extern float roundf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__));
extern long long int llrintf (float __x) __attribute__ ((__nothrow__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__));
extern long long int llroundf (float __x) __attribute__ ((__nothrow__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__));


extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__));



extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__))
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__));








extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__));
# 95 "/usr/include/math.h" 2 3 4
# 141 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) __attribute__ ((__nothrow__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__));

extern long double asinl (long double __x) __attribute__ ((__nothrow__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__));

extern long double atanl (long double __x) __attribute__ ((__nothrow__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__));

extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__));


extern long double cosl (long double __x) __attribute__ ((__nothrow__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__));

extern long double sinl (long double __x) __attribute__ ((__nothrow__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__));

extern long double tanl (long double __x) __attribute__ ((__nothrow__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__));




extern long double coshl (long double __x) __attribute__ ((__nothrow__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__));

extern long double sinhl (long double __x) __attribute__ ((__nothrow__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__));

extern long double tanhl (long double __x) __attribute__ ((__nothrow__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__));

# 87 "/usr/include/bits/mathcalls.h" 3 4


extern long double acoshl (long double __x) __attribute__ ((__nothrow__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__));

extern long double asinhl (long double __x) __attribute__ ((__nothrow__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__));

extern long double atanhl (long double __x) __attribute__ ((__nothrow__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__));







extern long double expl (long double __x) __attribute__ ((__nothrow__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__));


extern long double logl (long double __x) __attribute__ ((__nothrow__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__));


extern long double log10l (long double __x) __attribute__ ((__nothrow__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__));

# 127 "/usr/include/bits/mathcalls.h" 3 4


extern long double expm1l (long double __x) __attribute__ ((__nothrow__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__));


extern long double log1pl (long double __x) __attribute__ ((__nothrow__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__));






extern long double exp2l (long double __x) __attribute__ ((__nothrow__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__));


extern long double log2l (long double __x) __attribute__ ((__nothrow__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__));








extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__));





extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__));






extern long double cbrtl (long double __x) __attribute__ ((__nothrow__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__));








extern long double ceill (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__));




extern int __isinfl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));





extern int isinfl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int finitel (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__));





extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) __attribute__ ((__nothrow__)) __attribute__ ((__const__));





extern int __isnanl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern int isnanl (long double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern long double j0l (long double) __attribute__ ((__nothrow__)); extern long double __j0l (long double) __attribute__ ((__nothrow__));
extern long double j1l (long double) __attribute__ ((__nothrow__)); extern long double __j1l (long double) __attribute__ ((__nothrow__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__));
extern long double y0l (long double) __attribute__ ((__nothrow__)); extern long double __y0l (long double) __attribute__ ((__nothrow__));
extern long double y1l (long double) __attribute__ ((__nothrow__)); extern long double __y1l (long double) __attribute__ ((__nothrow__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__));






extern long double erfl (long double) __attribute__ ((__nothrow__)); extern long double __erfl (long double) __attribute__ ((__nothrow__));
extern long double erfcl (long double) __attribute__ ((__nothrow__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__));
extern long double lgammal (long double) __attribute__ ((__nothrow__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__));






extern long double tgammal (long double) __attribute__ ((__nothrow__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__));





extern long double gammal (long double) __attribute__ ((__nothrow__)); extern long double __gammal (long double) __attribute__ ((__nothrow__));






extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__));







extern long double rintl (long double __x) __attribute__ ((__nothrow__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__));
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__));
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__));


extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__));



extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__))
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__));








extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__));
# 142 "/usr/include/math.h" 2 3 4
# 157 "/usr/include/math.h" 3 4
extern int signgam;
# 198 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 284 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 309 "/usr/include/math.h" 3 4
struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);
# 409 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathinline.h" 1 3 4
# 35 "/usr/include/bits/mathinline.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__)) __signbitf (float __x)
{
  __extension__ union { float __f; int __i; } __u = { __f: __x };
  return __u.__i < 0;
}
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__)) __signbit (double __x)
{
  __extension__ union { double __d; int __i[2]; } __u = { __d: __x };
  return __u.__i[1] < 0;
}
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__)) __signbitl (long double __x)
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}
# 410 "/usr/include/math.h" 2 3 4
# 465 "/usr/include/math.h" 3 4

# 14 "/home/donquijote/dev/apron/include/num.h" 2
# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 126 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 138 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 15 "/home/donquijote/dev/apron/include/num.h" 2
# 1 "/usr/include/gmp.h" 1 3 4
# 43 "/usr/include/gmp.h" 3 4
# 1 "/usr/include/gmp-i386.h" 1 3 4
# 53 "/usr/include/gmp-i386.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 54 "/usr/include/gmp-i386.h" 2 3 4
# 194 "/usr/include/gmp-i386.h" 3 4
typedef unsigned long int mp_limb_t;
typedef long int mp_limb_signed_t;






typedef struct
{
  int _mp_alloc;

  int _mp_size;


  mp_limb_t *_mp_d;
} __mpz_struct;




typedef __mpz_struct MP_INT;
typedef __mpz_struct mpz_t[1];

typedef mp_limb_t * mp_ptr;
typedef const mp_limb_t * mp_srcptr;







typedef long int mp_size_t;
typedef long int mp_exp_t;


typedef struct
{
  __mpz_struct _mp_num;
  __mpz_struct _mp_den;
} __mpq_struct;

typedef __mpq_struct MP_RAT;
typedef __mpq_struct mpq_t[1];

typedef struct
{
  int _mp_prec;



  int _mp_size;


  mp_exp_t _mp_exp;
  mp_limb_t *_mp_d;
} __mpf_struct;


typedef __mpf_struct mpf_t[1];


typedef enum
{
  GMP_RAND_ALG_DEFAULT = 0,
  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT
} gmp_randalg_t;


typedef struct
{
  mpz_t _mp_seed;
  gmp_randalg_t _mp_alg;
  union {
    void *_mp_lc;
  } _mp_algdata;
} __gmp_randstate_struct;
typedef __gmp_randstate_struct gmp_randstate_t[1];



typedef const __mpz_struct *mpz_srcptr;
typedef __mpz_struct *mpz_ptr;
typedef const __mpf_struct *mpf_srcptr;
typedef __mpf_struct *mpf_ptr;
typedef const __mpq_struct *mpq_srcptr;
typedef __mpq_struct *mpq_ptr;
# 542 "/usr/include/gmp-i386.h" 3 4
 void __gmp_set_memory_functions (void *(*) (size_t), void *(*) (void *, size_t, size_t), void (*) (void *, size_t)) ;




 void __gmp_get_memory_functions (void *(**) (size_t), void *(**) (void *, size_t, size_t), void (**) (void *, size_t)) ;




 extern const int __gmp_bits_per_limb;


 extern int __gmp_errno;


 extern const char * const __gmp_version;






 void __gmp_randinit (gmp_randstate_t, gmp_randalg_t, ...);


 void __gmp_randinit_default (gmp_randstate_t);


 void __gmp_randinit_lc_2exp (gmp_randstate_t, mpz_srcptr, unsigned long int, unsigned long int);




 int __gmp_randinit_lc_2exp_size (gmp_randstate_t, unsigned long);


 void __gmp_randinit_mt (gmp_randstate_t);


 void __gmp_randinit_set (gmp_randstate_t, const __gmp_randstate_struct *);


 void __gmp_randseed (gmp_randstate_t, mpz_srcptr);


 void __gmp_randseed_ui (gmp_randstate_t, unsigned long int);


 void __gmp_randclear (gmp_randstate_t);


 unsigned long __gmp_urandomb_ui (gmp_randstate_t, unsigned long);


 unsigned long __gmp_urandomm_ui (gmp_randstate_t, unsigned long);





 int __gmp_asprintf (char **, const char *, ...);



 int __gmp_fprintf (FILE *, const char *, ...);
# 621 "/usr/include/gmp-i386.h" 3 4
 int __gmp_printf (const char *, ...);


 int __gmp_snprintf (char *, size_t, const char *, ...);


 int __gmp_sprintf (char *, const char *, ...);
# 659 "/usr/include/gmp-i386.h" 3 4
 int __gmp_fscanf (FILE *, const char *, ...);



 int __gmp_scanf (const char *, ...);


 int __gmp_sscanf (const char *, const char *, ...);
# 688 "/usr/include/gmp-i386.h" 3 4
 void *__gmpz_realloc (mpz_ptr, mp_size_t);



 void __gmpz_abs (mpz_ptr, mpz_srcptr);



 void __gmpz_add (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_add_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_addmul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_addmul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_and (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_array_init (mpz_ptr, mp_size_t, mp_size_t);


 void __gmpz_bin_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_bin_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_cdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_q_2exp (mpz_ptr, mpz_srcptr, unsigned long);


 unsigned long int __gmpz_cdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_cdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_r_2exp (mpz_ptr, mpz_srcptr, unsigned long);


 unsigned long int __gmpz_cdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_cdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_clear (mpz_ptr);


 void __gmpz_clrbit (mpz_ptr, unsigned long int);


 int __gmpz_cmp (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_cmp_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmp_si (mpz_srcptr, signed long int) __attribute__ ((__pure__));


 int __gmpz_cmp_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 int __gmpz_cmpabs (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_cmpabs_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmpabs_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_com (mpz_ptr, mpz_srcptr);


 void __gmpz_combit (mpz_ptr, unsigned long int);


 int __gmpz_congruent_p (mpz_srcptr, mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_congruent_ui_p (mpz_srcptr, unsigned long, unsigned long) __attribute__ ((__pure__));


 void __gmpz_divexact (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_divexact_ui (mpz_ptr, mpz_srcptr, unsigned long);


 int __gmpz_divisible_p (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_divisible_ui_p (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_divisible_2exp_p (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 void __gmpz_dump (mpz_srcptr);


 void *__gmpz_export (void *, size_t *, int, size_t, int, size_t, mpz_srcptr);


 void __gmpz_fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_fdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_q_2exp (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_fdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_r_2exp (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_fib_ui (mpz_ptr, unsigned long int);


 void __gmpz_fib2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_fits_sint_p (mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_fits_slong_p (mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_fits_sshort_p (mpz_srcptr) __attribute__ ((__pure__));



 int __gmpz_fits_uint_p (mpz_srcptr) __attribute__ ((__pure__));




 int __gmpz_fits_ulong_p (mpz_srcptr) __attribute__ ((__pure__));




 int __gmpz_fits_ushort_p (mpz_srcptr) __attribute__ ((__pure__));



 void __gmpz_gcd (mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_gcd_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_gcdext (mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 double __gmpz_get_d (mpz_srcptr) __attribute__ ((__pure__));


 double __gmpz_get_d_2exp (signed long int *, mpz_srcptr);


 long int __gmpz_get_si (mpz_srcptr) __attribute__ ((__pure__));


 char *__gmpz_get_str (char *, int, mpz_srcptr);



 unsigned long int __gmpz_get_ui (mpz_srcptr) __attribute__ ((__pure__));




 mp_limb_t __gmpz_getlimbn (mpz_srcptr, mp_size_t) __attribute__ ((__pure__));



 unsigned long int __gmpz_hamdist (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpz_import (mpz_ptr, size_t, int, size_t, int, size_t, const void *);


 void __gmpz_init (mpz_ptr);


 void __gmpz_init2 (mpz_ptr, unsigned long);


 void __gmpz_init_set (mpz_ptr, mpz_srcptr);


 void __gmpz_init_set_d (mpz_ptr, double);


 void __gmpz_init_set_si (mpz_ptr, signed long int);


 int __gmpz_init_set_str (mpz_ptr, const char *, int);


 void __gmpz_init_set_ui (mpz_ptr, unsigned long int);



 size_t __gmpz_inp_raw (mpz_ptr, FILE *);




 size_t __gmpz_inp_str (mpz_ptr, FILE *, int);



 int __gmpz_invert (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_ior (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_jacobi (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));




 int __gmpz_kronecker_si (mpz_srcptr, long) __attribute__ ((__pure__));


 int __gmpz_kronecker_ui (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_si_kronecker (long, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_ui_kronecker (unsigned long, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpz_lcm (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_lcm_ui (mpz_ptr, mpz_srcptr, unsigned long);




 void __gmpz_lucnum_ui (mpz_ptr, unsigned long int);


 void __gmpz_lucnum2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_millerrabin (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_mod (mpz_ptr, mpz_srcptr, mpz_srcptr);




 void __gmpz_mul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_mul_2exp (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_mul_si (mpz_ptr, mpz_srcptr, long int);


 void __gmpz_mul_ui (mpz_ptr, mpz_srcptr, unsigned long int);



 void __gmpz_neg (mpz_ptr, mpz_srcptr);



 void __gmpz_nextprime (mpz_ptr, mpz_srcptr);



 size_t __gmpz_out_raw (FILE *, mpz_srcptr);




 size_t __gmpz_out_str (FILE *, int, mpz_srcptr);



 int __gmpz_perfect_power_p (mpz_srcptr) __attribute__ ((__pure__));



 int __gmpz_perfect_square_p (mpz_srcptr) __attribute__ ((__pure__));




 unsigned long int __gmpz_popcount (mpz_srcptr) __attribute__ ((__pure__));



 void __gmpz_pow_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_powm (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_ui (mpz_ptr, mpz_srcptr, unsigned long int, mpz_srcptr);


 int __gmpz_probab_prime_p (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_random (mpz_ptr, mp_size_t);


 void __gmpz_random2 (mpz_ptr, mp_size_t);


 void __gmpz_realloc2 (mpz_ptr, unsigned long);


 unsigned long int __gmpz_remove (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_root (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rootrem (mpz_ptr,mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rrandomb (mpz_ptr, gmp_randstate_t, unsigned long int);


 unsigned long int __gmpz_scan0 (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 unsigned long int __gmpz_scan1 (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_set (mpz_ptr, mpz_srcptr);


 void __gmpz_set_d (mpz_ptr, double);


 void __gmpz_set_f (mpz_ptr, mpf_srcptr);



 void __gmpz_set_q (mpz_ptr, mpq_srcptr);



 void __gmpz_set_si (mpz_ptr, signed long int);


 int __gmpz_set_str (mpz_ptr, const char *, int);


 void __gmpz_set_ui (mpz_ptr, unsigned long int);


 void __gmpz_setbit (mpz_ptr, unsigned long int);



 size_t __gmpz_size (mpz_srcptr) __attribute__ ((__pure__));



 size_t __gmpz_sizeinbase (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_sqrt (mpz_ptr, mpz_srcptr);


 void __gmpz_sqrtrem (mpz_ptr, mpz_ptr, mpz_srcptr);


 void __gmpz_sub (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_sub_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_ui_sub (mpz_ptr, unsigned long int, mpz_srcptr);


 void __gmpz_submul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_submul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_swap (mpz_ptr, mpz_ptr) ;


 unsigned long int __gmpz_tdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_tdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_q_2exp (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_tdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_tdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_r_2exp (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_tdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 int __gmpz_tstbit (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_ui_pow_ui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_urandomb (mpz_ptr, gmp_randstate_t, unsigned long int);


 void __gmpz_urandomm (mpz_ptr, gmp_randstate_t, mpz_srcptr);



 void __gmpz_xor (mpz_ptr, mpz_srcptr, mpz_srcptr);






 void __gmpq_abs (mpq_ptr, mpq_srcptr);



 void __gmpq_add (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_canonicalize (mpq_ptr);


 void __gmpq_clear (mpq_ptr);


 int __gmpq_cmp (mpq_srcptr, mpq_srcptr) __attribute__ ((__pure__));


 int __gmpq_cmp_si (mpq_srcptr, long, unsigned long) __attribute__ ((__pure__));


 int __gmpq_cmp_ui (mpq_srcptr, unsigned long int, unsigned long int) __attribute__ ((__pure__));


 void __gmpq_div (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_div_2exp (mpq_ptr, mpq_srcptr, unsigned long);


 int __gmpq_equal (mpq_srcptr, mpq_srcptr) __attribute__ ((__pure__));


 void __gmpq_get_num (mpz_ptr, mpq_srcptr);


 void __gmpq_get_den (mpz_ptr, mpq_srcptr);


 double __gmpq_get_d (mpq_srcptr) __attribute__ ((__pure__));


 char *__gmpq_get_str (char *, int, mpq_srcptr);


 void __gmpq_init (mpq_ptr);



 size_t __gmpq_inp_str (mpq_ptr, FILE *, int);



 void __gmpq_inv (mpq_ptr, mpq_srcptr);


 void __gmpq_mul (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_mul_2exp (mpq_ptr, mpq_srcptr, unsigned long);



 void __gmpq_neg (mpq_ptr, mpq_srcptr);




 size_t __gmpq_out_str (FILE *, int, mpq_srcptr);



 void __gmpq_set (mpq_ptr, mpq_srcptr);


 void __gmpq_set_d (mpq_ptr, double);


 void __gmpq_set_den (mpq_ptr, mpz_srcptr);


 void __gmpq_set_f (mpq_ptr, mpf_srcptr);


 void __gmpq_set_num (mpq_ptr, mpz_srcptr);


 void __gmpq_set_si (mpq_ptr, signed long int, unsigned long int);


 int __gmpq_set_str (mpq_ptr, const char *, int);


 void __gmpq_set_ui (mpq_ptr, unsigned long int, unsigned long int);


 void __gmpq_set_z (mpq_ptr, mpz_srcptr);


 void __gmpq_sub (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_swap (mpq_ptr, mpq_ptr) ;





 void __gmpf_abs (mpf_ptr, mpf_srcptr);


 void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_add_ui (mpf_ptr, mpf_srcptr, unsigned long int);

 void __gmpf_ceil (mpf_ptr, mpf_srcptr);


 void __gmpf_clear (mpf_ptr);


 int __gmpf_cmp (mpf_srcptr, mpf_srcptr) __attribute__ ((__pure__));


 int __gmpf_cmp_d (mpf_srcptr, double) __attribute__ ((__pure__));


 int __gmpf_cmp_si (mpf_srcptr, signed long int) __attribute__ ((__pure__));


 int __gmpf_cmp_ui (mpf_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpf_div (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_div_2exp (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_div_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_dump (mpf_srcptr);


 int __gmpf_eq (mpf_srcptr, mpf_srcptr, unsigned long int) __attribute__ ((__pure__));


 int __gmpf_fits_sint_p (mpf_srcptr) __attribute__ ((__pure__));


 int __gmpf_fits_slong_p (mpf_srcptr) __attribute__ ((__pure__));


 int __gmpf_fits_sshort_p (mpf_srcptr) __attribute__ ((__pure__));


 int __gmpf_fits_uint_p (mpf_srcptr) __attribute__ ((__pure__));


 int __gmpf_fits_ulong_p (mpf_srcptr) __attribute__ ((__pure__));


 int __gmpf_fits_ushort_p (mpf_srcptr) __attribute__ ((__pure__));


 void __gmpf_floor (mpf_ptr, mpf_srcptr);


 double __gmpf_get_d (mpf_srcptr) __attribute__ ((__pure__));


 double __gmpf_get_d_2exp (signed long int *, mpf_srcptr);


 unsigned long int __gmpf_get_default_prec (void) __attribute__ ((__pure__));


 unsigned long int __gmpf_get_prec (mpf_srcptr) __attribute__ ((__pure__));


 long __gmpf_get_si (mpf_srcptr) __attribute__ ((__pure__));


 char *__gmpf_get_str (char *, mp_exp_t *, int, size_t, mpf_srcptr);


 unsigned long __gmpf_get_ui (mpf_srcptr) __attribute__ ((__pure__));


 void __gmpf_init (mpf_ptr);


 void __gmpf_init2 (mpf_ptr, unsigned long int);


 void __gmpf_init_set (mpf_ptr, mpf_srcptr);


 void __gmpf_init_set_d (mpf_ptr, double);


 void __gmpf_init_set_si (mpf_ptr, signed long int);


 int __gmpf_init_set_str (mpf_ptr, const char *, int);


 void __gmpf_init_set_ui (mpf_ptr, unsigned long int);



 size_t __gmpf_inp_str (mpf_ptr, FILE *, int);



 int __gmpf_integer_p (mpf_srcptr) __attribute__ ((__pure__));


 void __gmpf_mul (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_mul_2exp (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_mul_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_neg (mpf_ptr, mpf_srcptr);



 size_t __gmpf_out_str (FILE *, int, size_t, mpf_srcptr);



 void __gmpf_pow_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_random2 (mpf_ptr, mp_size_t, mp_exp_t);


 void __gmpf_reldiff (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_set (mpf_ptr, mpf_srcptr);


 void __gmpf_set_d (mpf_ptr, double);


 void __gmpf_set_default_prec (unsigned long int) ;


 void __gmpf_set_prec (mpf_ptr, unsigned long int);


 void __gmpf_set_prec_raw (mpf_ptr, unsigned long int) ;


 void __gmpf_set_q (mpf_ptr, mpq_srcptr);


 void __gmpf_set_si (mpf_ptr, signed long int);


 int __gmpf_set_str (mpf_ptr, const char *, int);


 void __gmpf_set_ui (mpf_ptr, unsigned long int);


 void __gmpf_set_z (mpf_ptr, mpz_srcptr);


 size_t __gmpf_size (mpf_srcptr) __attribute__ ((__pure__));


 void __gmpf_sqrt (mpf_ptr, mpf_srcptr);


 void __gmpf_sqrt_ui (mpf_ptr, unsigned long int);


 void __gmpf_sub (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_sub_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_swap (mpf_ptr, mpf_ptr) ;


 void __gmpf_trunc (mpf_ptr, mpf_srcptr);


 void __gmpf_ui_div (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_ui_sub (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_urandomb (mpf_t, gmp_randstate_t, unsigned long int);
# 1480 "/usr/include/gmp-i386.h" 3 4
 mp_limb_t __gmpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,mp_size_t);




 mp_limb_t __gmpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) ;



 mp_limb_t __gmpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_bdivmod (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, unsigned long int);



 int __gmpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) __attribute__ ((__pure__));






 mp_limb_t __gmpn_divexact_by3c (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divrem (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_divrem_1 (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_divrem_2 (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr);


 mp_size_t __gmpn_gcd (mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 mp_limb_t __gmpn_gcd_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_gcdext_1 (mp_limb_signed_t *, mp_limb_signed_t *, mp_limb_t, mp_limb_t);


 mp_size_t __gmpn_gcdext (mp_ptr, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 size_t __gmpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);


 unsigned long int __gmpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_limb_t __gmpn_mod_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_sqr (mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_neg_n (mp_ptr, mp_srcptr, mp_size_t);



 int __gmpn_perfect_square_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 unsigned long int __gmpn_popcount (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 mp_size_t __gmpn_pow_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);



 mp_limb_t __gmpn_preinv_mod_1 (mp_srcptr, mp_size_t, mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


 void __gmpn_random (mp_ptr, mp_size_t);


 void __gmpn_random2 (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 unsigned long int __gmpn_scan0 (mp_srcptr, unsigned long int) __attribute__ ((__pure__));


 unsigned long int __gmpn_scan1 (mp_srcptr, unsigned long int) __attribute__ ((__pure__));


 mp_size_t __gmpn_set_str (mp_ptr, const unsigned char *, size_t, int);


 mp_size_t __gmpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,mp_size_t);




 mp_limb_t __gmpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) ;



 mp_limb_t __gmpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_tdiv_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
# 1632 "/usr/include/gmp-i386.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = ((__gmp_w->_mp_size) >= 0 ? (__gmp_w->_mp_size) : -(__gmp_w->_mp_size));
}
# 1656 "/usr/include/gmp-i386.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_uint_p (mpz_srcptr __gmp_z)
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (~ (unsigned) 0)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ulong_p (mpz_srcptr __gmp_z)
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (~ (unsigned long) 0)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ushort_p (mpz_srcptr __gmp_z)
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= ((unsigned short) ~0)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

unsigned long
__gmpz_get_ui (mpz_srcptr __gmp_z)
{
  mp_ptr __gmp_p = __gmp_z->_mp_d;
  mp_size_t __gmp_n = __gmp_z->_mp_size;
  mp_limb_t __gmp_l = __gmp_p[0];






  return (__gmp_n != 0 ? __gmp_l : 0);
# 1712 "/usr/include/gmp-i386.h" 3 4
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpz_getlimbn (mpz_srcptr __gmp_z, mp_size_t __gmp_n)
{
  mp_limb_t __gmp_result = 0;
  if (__builtin_expect ((__gmp_n >= 0 && __gmp_n < ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size))) != 0, 1))
    __gmp_result = __gmp_z->_mp_d[__gmp_n];
  return __gmp_result;
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = - __gmp_w->_mp_size;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_perfect_square_p (mpz_srcptr __gmp_a)
{
  mp_size_t __gmp_asize;
  int __gmp_result;

  __gmp_asize = __gmp_a->_mp_size;
  __gmp_result = (__gmp_asize >= 0);
  if (__builtin_expect ((__gmp_asize > 0) != 0, 1))
    __gmp_result = __gmpn_perfect_square_p (__gmp_a->_mp_d, __gmp_asize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

unsigned long
__gmpz_popcount (mpz_srcptr __gmp_u)
{
  mp_size_t __gmp_usize;
  unsigned long __gmp_result;

  __gmp_usize = __gmp_u->_mp_size;
  __gmp_result = (__gmp_usize < 0 ? (~ (unsigned long) 0) : 0);
  if (__builtin_expect ((__gmp_usize > 0) != 0, 1))
    __gmp_result = __gmpn_popcount (__gmp_u->_mp_d, __gmp_usize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

void
__gmpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  __gmpz_tdiv_q (__gmp_w, (&((__gmp_u)->_mp_num)), (&((__gmp_u)->_mp_den)));
}




extern __inline__ __attribute__ ((__gnu_inline__))

size_t
__gmpz_size (mpz_srcptr __gmp_z)
{
  return ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size));
}






extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = ((__gmp_w->_mp_num._mp_size) >= 0 ? (__gmp_w->_mp_num._mp_size) : -(__gmp_w->_mp_num._mp_size));
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = - __gmp_w->_mp_num._mp_size;
}
# 2054 "/usr/include/gmp-i386.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_add_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x + 1) & ((~ ((mp_limb_t) (0))) >> 0)) == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x + (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_r) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x + 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_r) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_cmp (mp_srcptr __gmp_xp, mp_srcptr __gmp_yp, mp_size_t __gmp_size)
{
  int __gmp_result;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_y; (__gmp_result) = 0; __gmp_i = (__gmp_size); while (--__gmp_i >= 0) { __gmp_x = (__gmp_xp)[__gmp_i]; __gmp_y = (__gmp_yp)[__gmp_i]; if (__gmp_x != __gmp_y) { (__gmp_result) = (__gmp_x > __gmp_y ? 1 : -1); break; } } } while (0);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_sub_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x - 1) & ((~ ((mp_limb_t) (0))) >> 0)), __gmp_x == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x - (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_x) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x - 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_x) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_neg_n (mp_ptr __gmp_rp, mp_srcptr __gmp_up, mp_size_t __gmp_n)
{
  mp_limb_t __gmp_ul, __gmp_cy;
  __gmp_cy = 0;
  do {
      __gmp_ul = *__gmp_up++;
      *__gmp_rp++ = -__gmp_ul - __gmp_cy;
      __gmp_cy |= __gmp_ul != 0;
  } while (--__gmp_n != 0);
  return __gmp_cy;
}
# 2211 "/usr/include/gmp-i386.h" 3 4
enum
{
  GMP_ERROR_NONE = 0,
  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,
  GMP_ERROR_DIVISION_BY_ZERO = 2,
  GMP_ERROR_SQRT_OF_NEGATIVE = 4,
  GMP_ERROR_INVALID_ARGUMENT = 8
};
# 44 "/usr/include/gmp.h" 2 3 4
# 16 "/home/donquijote/dev/apron/include/num.h" 2
# 1 "/usr/include/mpfr.h" 1 3 4
# 72 "/usr/include/mpfr.h" 3 4
typedef enum {
  GMP_RNDN=0,
  GMP_RNDZ,
  GMP_RNDU,
  GMP_RNDD,
  GMP_RND_MAX,

  GMP_RNDNA=-1
} mpfr_rnd_t;
# 96 "/usr/include/mpfr.h" 3 4
typedef unsigned long mpfr_prec_t;
# 106 "/usr/include/mpfr.h" 3 4
typedef int mpfr_sign_t;






typedef struct {
  mpfr_prec_t _mpfr_prec;
  mpfr_sign_t _mpfr_sign;
  mp_exp_t _mpfr_exp;
  mp_limb_t *_mpfr_d;
} __mpfr_struct;
# 139 "/usr/include/mpfr.h" 3 4
typedef __mpfr_struct mpfr_t[1];
typedef __mpfr_struct *mpfr_ptr;
typedef const __mpfr_struct *mpfr_srcptr;
# 152 "/usr/include/mpfr.h" 3 4
typedef enum {
  MPFR_NAN_KIND = 0,
  MPFR_INF_KIND = 1, MPFR_ZERO_KIND = 2, MPFR_REGULAR_KIND = 3
} mpfr_kind_t;
# 204 "/usr/include/mpfr.h" 3 4
 const char * mpfr_get_version (void);
 const char * mpfr_get_patches (void);

 mp_exp_t mpfr_get_emin (void);
 int mpfr_set_emin (mp_exp_t);
 mp_exp_t mpfr_get_emin_min (void);
 mp_exp_t mpfr_get_emin_max (void);
 mp_exp_t mpfr_get_emax (void);
 int mpfr_set_emax (mp_exp_t);
 mp_exp_t mpfr_get_emax_min (void);
 mp_exp_t mpfr_get_emax_max (void);

 void mpfr_set_default_rounding_mode (mpfr_rnd_t);
 mpfr_rnd_t mpfr_get_default_rounding_mode (void);
 const char *
   mpfr_print_rnd_mode (mpfr_rnd_t);

 void mpfr_clear_flags (void);
 void mpfr_clear_underflow (void);
 void mpfr_clear_overflow (void);
 void mpfr_clear_nanflag (void);
 void mpfr_clear_inexflag (void);
 void mpfr_clear_erangeflag (void);

 void mpfr_set_underflow (void);
 void mpfr_set_overflow (void);
 void mpfr_set_nanflag (void);
 void mpfr_set_inexflag (void);
 void mpfr_set_erangeflag (void);

 int mpfr_underflow_p (void);
 int mpfr_overflow_p (void);
 int mpfr_nanflag_p (void);
 int mpfr_inexflag_p (void);
 int mpfr_erangeflag_p (void);

 int
  mpfr_check_range (mpfr_ptr, int, mpfr_rnd_t);

 void mpfr_init2 (mpfr_ptr, mpfr_prec_t);
 void mpfr_init (mpfr_ptr);
 void mpfr_clear (mpfr_ptr);

 void
  mpfr_inits2 (mpfr_prec_t, mpfr_ptr, ...) __attribute__ ((sentinel));
 void
  mpfr_inits (mpfr_ptr, ...) __attribute__ ((sentinel));
 void
  mpfr_clears (mpfr_ptr, ...) __attribute__ ((sentinel));

 int
  mpfr_prec_round (mpfr_ptr, mpfr_prec_t, mpfr_rnd_t);
 int
  mpfr_can_round (mpfr_srcptr, mp_exp_t, mpfr_rnd_t, mpfr_rnd_t, mpfr_prec_t);


 mp_exp_t mpfr_get_exp (mpfr_srcptr);
 int mpfr_set_exp (mpfr_ptr, mp_exp_t);
 mpfr_prec_t mpfr_get_prec (mpfr_srcptr);
 void mpfr_set_prec (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_prec_raw (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_default_prec (mpfr_prec_t);
 mpfr_prec_t mpfr_get_default_prec (void);

 int mpfr_set_d (mpfr_ptr, double, mpfr_rnd_t);




 int
  mpfr_set_ld (mpfr_ptr, long double, mpfr_rnd_t);
 int
  mpfr_set_z (mpfr_ptr, mpz_srcptr, mpfr_rnd_t);
 void mpfr_set_nan (mpfr_ptr);
 void mpfr_set_inf (mpfr_ptr, int);
 int
  mpfr_set_f (mpfr_ptr, mpf_srcptr, mpfr_rnd_t);
 int
  mpfr_get_f (mpf_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_set_si (mpfr_ptr, long, mpfr_rnd_t);
 int
  mpfr_set_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int
  mpfr_set_si_2exp (mpfr_ptr, long, mp_exp_t, mpfr_rnd_t);
 int
  mpfr_set_ui_2exp (mpfr_ptr,unsigned long,mp_exp_t,mpfr_rnd_t);
 int
  mpfr_set_q (mpfr_ptr, mpq_srcptr, mpfr_rnd_t);
 int
  mpfr_set_str (mpfr_ptr, const char *, int, mpfr_rnd_t);
 int
  mpfr_init_set_str (mpfr_ptr, const char *, int, mpfr_rnd_t);

 int
  mpfr_set4 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int);
 int
  mpfr_abs (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int
  mpfr_set (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_neg (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_signbit (mpfr_srcptr);
 int
  mpfr_setsign (mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t);
 int
  mpfr_copysign (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
# 317 "/usr/include/mpfr.h" 3 4
 int __gmpfr_set_sj (mpfr_t, intmax_t, mpfr_rnd_t);
 int
  __gmpfr_set_sj_2exp (mpfr_t, intmax_t, intmax_t, mpfr_rnd_t);
 int __gmpfr_set_uj (mpfr_t, uintmax_t, mpfr_rnd_t);
 int
  __gmpfr_set_uj_2exp (mpfr_t, uintmax_t, intmax_t, mpfr_rnd_t);
 intmax_t __gmpfr_mpfr_get_sj (mpfr_srcptr, mpfr_rnd_t);
 uintmax_t __gmpfr_mpfr_get_uj (mpfr_srcptr, mpfr_rnd_t);


 mp_exp_t mpfr_get_z_exp (mpz_ptr, mpfr_srcptr);
 double mpfr_get_d (mpfr_srcptr, mpfr_rnd_t);




 long double mpfr_get_ld (mpfr_srcptr, mpfr_rnd_t);

 double mpfr_get_d1 (mpfr_srcptr);
 double mpfr_get_d_2exp (long*, mpfr_srcptr, mpfr_rnd_t);

 long double mpfr_get_ld_2exp (long*, mpfr_srcptr, mpfr_rnd_t);

 long mpfr_get_si (mpfr_srcptr, mpfr_rnd_t);
 unsigned long mpfr_get_ui (mpfr_srcptr, mpfr_rnd_t);

 char*mpfr_get_str (char*, mp_exp_t*, int, size_t, mpfr_srcptr, mpfr_rnd_t);

 void mpfr_get_z (mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t);


 void mpfr_free_str (char *);


 void mpfr_random (mpfr_ptr);
 void mpfr_random2 (mpfr_ptr,mp_size_t,mp_exp_t);
 int mpfr_urandomb (mpfr_ptr, gmp_randstate_t);

 void mpfr_nextabove (mpfr_ptr);
 void mpfr_nextbelow (mpfr_ptr);
 void mpfr_nexttoward (mpfr_ptr, mpfr_srcptr);




 size_t __gmpfr_inp_str (mpfr_ptr, FILE*, int, mpfr_rnd_t);

 size_t __gmpfr_out_str (FILE*, int, size_t, mpfr_srcptr, mpfr_rnd_t);


 int __gmpfr_fprintf (FILE*, const char*, ...);


 int mpfr_printf (const char*, ...);
 int mpfr_asprintf (char**, const char*, ...);

 int mpfr_sprintf (char*, const char*, ...);

 int mpfr_snprintf (char*, size_t, const char*, ...);
# 397 "/usr/include/mpfr.h" 3 4
 int mpfr_pow (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_pow_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

 int mpfr_pow_ui (mpfr_ptr, mpfr_srcptr, unsigned long int, mpfr_rnd_t);

 int mpfr_ui_pow_ui (mpfr_ptr, unsigned long int, unsigned long int, mpfr_rnd_t);

 int mpfr_ui_pow (mpfr_ptr, unsigned long int, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_pow_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);


 int mpfr_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_sqrt_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);

 int mpfr_rec_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_add (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_sub (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_mul (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_div (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_add_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_sub_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_ui_sub (mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_mul_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_div_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_ui_div (mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_add_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

 int mpfr_sub_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

 int mpfr_si_sub (mpfr_ptr, long int, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_mul_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

 int mpfr_div_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

 int mpfr_si_div (mpfr_ptr, long int, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_add_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

 int mpfr_sub_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

 int mpfr_d_sub (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_mul_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

 int mpfr_div_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

 int mpfr_d_div (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_sqr (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);

 int mpfr_const_pi (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_log2 (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_euler (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_catalan (mpfr_ptr, mpfr_rnd_t);

 int mpfr_agm (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_log (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_log2 (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_log10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_log1p (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_exp (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_exp2 (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_exp10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_expm1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_eint (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_li2 (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);

 int mpfr_cmp (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmp3 (mpfr_srcptr, mpfr_srcptr, int);
 int mpfr_cmp_d (mpfr_srcptr, double);
 int mpfr_cmp_ld (mpfr_srcptr, long double);
 int mpfr_cmpabs (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmp_ui (mpfr_srcptr, unsigned long);
 int mpfr_cmp_si (mpfr_srcptr, long);
 int mpfr_cmp_ui_2exp (mpfr_srcptr, unsigned long, mp_exp_t);

 int mpfr_cmp_si_2exp (mpfr_srcptr, long, mp_exp_t);

 void mpfr_reldiff (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_eq (mpfr_srcptr, mpfr_srcptr, unsigned long);

 int mpfr_sgn (mpfr_srcptr);

 int mpfr_mul_2exp (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_div_2exp (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_mul_2ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_div_2ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

 int mpfr_mul_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);

 int mpfr_div_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);


 int mpfr_rint (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
 int mpfr_round (mpfr_ptr, mpfr_srcptr);
 int mpfr_trunc (mpfr_ptr, mpfr_srcptr);
 int mpfr_ceil (mpfr_ptr, mpfr_srcptr);
 int mpfr_floor (mpfr_ptr, mpfr_srcptr);
 int mpfr_rint_round (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_rint_trunc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_rint_ceil (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_rint_floor (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_frac (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_modf (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_remquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_remainder (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_fmod (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_fits_ulong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_slong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_ushort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sshort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uintmax_p (mpfr_srcptr,mpfr_rnd_t);
 int mpfr_fits_intmax_p (mpfr_srcptr, mpfr_rnd_t);

 void mpfr_extract (mpz_ptr, mpfr_srcptr, unsigned int);

 void mpfr_swap (mpfr_ptr, mpfr_ptr);
 void mpfr_dump (mpfr_srcptr);

 int mpfr_nan_p (mpfr_srcptr);
 int mpfr_inf_p (mpfr_srcptr);
 int mpfr_number_p (mpfr_srcptr);
 int mpfr_integer_p (mpfr_srcptr);
 int mpfr_zero_p (mpfr_srcptr);

 int mpfr_greater_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_greaterequal_p (mpfr_srcptr, mpfr_srcptr);

 int mpfr_less_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessequal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessgreater_p (mpfr_srcptr,mpfr_srcptr);
 int mpfr_equal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_unordered_p (mpfr_srcptr, mpfr_srcptr);

 int mpfr_atanh (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_acosh (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_asinh (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_cosh (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
 int mpfr_tanh (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh_cosh (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_sech (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_csch (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_coth (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);

 int mpfr_acos (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_asin (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_atan (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_sin (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_sin_cos (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_cos (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_tan (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_atan2 (mpfr_ptr,mpfr_srcptr,mpfr_srcptr, mpfr_rnd_t);

 int mpfr_sec (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_csc (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_cot (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);

 int mpfr_hypot (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_erf (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_erfc (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
 int mpfr_cbrt (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_root (mpfr_ptr,mpfr_srcptr,unsigned long,mpfr_rnd_t);
 int mpfr_gamma (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_lngamma (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_lgamma (mpfr_ptr,int*,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_zeta (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
 int mpfr_zeta_ui (mpfr_ptr,unsigned long,mpfr_rnd_t);
 int mpfr_fac_ui (mpfr_ptr, unsigned long int, mpfr_rnd_t);

 int mpfr_j0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_j1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_jn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_y0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_y1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_yn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_min (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_max (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_dim (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


 int mpfr_mul_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

 int mpfr_div_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

 int mpfr_add_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

 int mpfr_sub_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

 int mpfr_cmp_z (mpfr_srcptr, mpz_srcptr);

 int mpfr_mul_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

 int mpfr_div_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

 int mpfr_add_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

 int mpfr_sub_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

 int mpfr_cmp_q (mpfr_srcptr, mpq_srcptr);

 int mpfr_cmp_f (mpfr_srcptr, mpf_srcptr);

 int mpfr_fma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_fms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_sum (mpfr_ptr, mpfr_ptr *const, unsigned long, mpfr_rnd_t);


 void mpfr_free_cache (void);

 int mpfr_subnormalize (mpfr_ptr, int, mpfr_rnd_t);


 int mpfr_strtofr (mpfr_ptr, const char *, char **, int, mpfr_rnd_t);


 size_t mpfr_custom_get_size (mpfr_prec_t);
 void mpfr_custom_init (void *, mpfr_prec_t);
 void * mpfr_custom_get_mantissa (mpfr_srcptr);
 mp_exp_t mpfr_custom_get_exp (mpfr_srcptr);
 void mpfr_custom_move (mpfr_ptr, void *);
 void mpfr_custom_init_set (mpfr_ptr, int, mp_exp_t, mpfr_prec_t, void *);

 int mpfr_custom_get_kind (mpfr_srcptr);
# 17 "/home/donquijote/dev/apron/include/num.h" 2





# 1 "/home/donquijote/dev/apron/include/num_config.h" 1




# 1 "/home/donquijote/dev/apron/include/ap_config.h" 1
# 21 "/home/donquijote/dev/apron/include/ap_config.h"
typedef char bool;
static const bool false = 0;
static const bool true = 1;
# 6 "/home/donquijote/dev/apron/include/num_config.h" 2
# 26 "/home/donquijote/dev/apron/include/num_config.h"
static inline void num_store_words8(void* dst, const void* src, size_t t)
{





  memcpy(dst,src,t);

}

static inline void num_dump_word32(void* dst, unsigned src)
{
  *((unsigned char*)dst+0) = (src>>24) & 0xff;
  *((unsigned char*)dst+1) = (src>>16) & 0xff;
  *((unsigned char*)dst+2) = (src>>8) & 0xff;
  *((unsigned char*)dst+3) = src & 0xff;
}

static inline unsigned num_undump_word32(const void* src)
{
  return
    ((unsigned)(((const unsigned char*)src)[0])<<24)+
    ((unsigned)(((const unsigned char*)src)[1])<<16)+
    ((unsigned)(((const unsigned char*)src)[2])<<8)+
    ((unsigned)(((const unsigned char*)src)[3]));
}
# 23 "/home/donquijote/dev/apron/include/num.h" 2




# 1 "/home/donquijote/dev/apron/include/num_numrat.h" 1
# 27 "/home/donquijote/dev/apron/include/num_numrat.h"
# 1 "/home/donquijote/dev/apron/include/numrat.h" 1
# 9 "/home/donquijote/dev/apron/include/numrat.h"
# 1 "/usr/include/gmp.h" 1 3 4
# 10 "/home/donquijote/dev/apron/include/numrat.h" 2

# 1 "/home/donquijote/dev/apron/include/ap_scalar.h" 1
# 11 "/home/donquijote/dev/apron/include/ap_scalar.h"
# 1 "/usr/include/assert.h" 1 3 4
# 12 "/home/donquijote/dev/apron/include/ap_scalar.h" 2




# 1 "/usr/include/gmp.h" 1 3 4
# 17 "/home/donquijote/dev/apron/include/ap_scalar.h" 2
# 30 "/home/donquijote/dev/apron/include/ap_scalar.h"
typedef enum ap_scalar_discr_t {
  AP_SCALAR_DOUBLE,
  AP_SCALAR_MPQ,
  AP_SCALAR_MPFR,
} ap_scalar_discr_t;

typedef struct ap_scalar_t {
  ap_scalar_discr_t discr;
  union {
    double dbl;
    mpq_ptr mpq;
    mpfr_ptr mpfr;
  } val;
} ap_scalar_t;
# 53 "/home/donquijote/dev/apron/include/ap_scalar.h"
ap_scalar_t* ap_scalar_alloc(void);

void ap_scalar_free(ap_scalar_t* scalar);

void ap_scalar_reinit(ap_scalar_t* scalar, ap_scalar_discr_t d);


static inline
void ap_scalar_print(ap_scalar_t* a);
void ap_scalar_fprint(FILE* stream, ap_scalar_t* a);


extern int ap_scalar_print_prec;




static inline
void ap_scalar_swap(ap_scalar_t* a, ap_scalar_t* b);






void ap_scalar_set(ap_scalar_t* scalar, ap_scalar_t* scalar2);

void ap_scalar_set_mpq(ap_scalar_t* scalar, mpq_t mpq);
void ap_scalar_set_int(ap_scalar_t* scalar, long int i);
void ap_scalar_set_frac(ap_scalar_t* scalar, long int i, unsigned long int j);





void ap_scalar_set_double(ap_scalar_t* scalar, double k);

void ap_scalar_set_mpfr(ap_scalar_t* scalar, mpfr_t mpfr);


void ap_scalar_set_infty(ap_scalar_t* scalar, int sgn);







ap_scalar_t* ap_scalar_alloc_set(ap_scalar_t* scalar2);
ap_scalar_t* ap_scalar_alloc_set_mpq(mpq_t mpq);

ap_scalar_t* ap_scalar_alloc_set_double(double k);

ap_scalar_t* ap_scalar_alloc_set_mpfr(mpfr_t mpfr);
# 117 "/home/donquijote/dev/apron/include/ap_scalar.h"
int ap_mpq_set_scalar(mpq_t mpq, ap_scalar_t* scalar, mpfr_rnd_t round);



int ap_double_set_scalar(double* k, ap_scalar_t* scalar, mpfr_rnd_t round);


int ap_mpfr_set_scalar(mpfr_t mpfr, ap_scalar_t* scalar, mpfr_rnd_t round);
# 134 "/home/donquijote/dev/apron/include/ap_scalar.h"
int ap_scalar_infty(ap_scalar_t* scalar);

int ap_scalar_cmp(ap_scalar_t* a, ap_scalar_t* b);
int ap_scalar_cmp_int(ap_scalar_t* a, int b);





bool ap_scalar_equal(ap_scalar_t* a, ap_scalar_t* b);
bool ap_scalar_equal_int(ap_scalar_t* a, int b);

int ap_scalar_sgn(ap_scalar_t* a);






void ap_scalar_neg(ap_scalar_t* a, ap_scalar_t* b);

void ap_scalar_inv(ap_scalar_t* a, ap_scalar_t* b);


long ap_scalar_hash(ap_scalar_t* a);






static inline
void ap_scalar_init(ap_scalar_t* scalar, ap_scalar_discr_t d)
{
  scalar->discr = d;
  switch(d){
  case AP_SCALAR_MPQ:
    scalar->val.mpq = (mpq_ptr)malloc(sizeof(mpq_t));
    __gmpq_init(scalar->val.mpq);
    break;
  case AP_SCALAR_MPFR:
    scalar->val.mpfr = (mpfr_ptr)malloc(sizeof(mpfr_t));
    mpfr_init(scalar->val.mpfr);
    break;
  case AP_SCALAR_DOUBLE:
    scalar->val.dbl = 0.0;
    break;
  }
}
static inline
void ap_scalar_clear(ap_scalar_t* scalar)
{
  switch(scalar->discr){
  case AP_SCALAR_MPQ:
    __gmpq_clear(scalar->val.mpq);
    free(scalar->val.mpq);
    break;
  case AP_SCALAR_MPFR:
    mpfr_clear(scalar->val.mpfr);
    free(scalar->val.mpfr);
    break;
  case AP_SCALAR_DOUBLE:
    break;
  }
}
static inline void ap_scalar_print(ap_scalar_t* a)
{ ap_scalar_fprint(stdout,a); }
static inline
void ap_scalar_swap(ap_scalar_t* a, ap_scalar_t* b){ ap_scalar_t t = *a; *a = *b; *b = t; }
# 12 "/home/donquijote/dev/apron/include/numrat.h" 2




# 1 "/home/donquijote/dev/apron/include/numint.h" 1
# 9 "/home/donquijote/dev/apron/include/numint.h"
# 1 "/usr/include/gmp.h" 1 3 4
# 10 "/home/donquijote/dev/apron/include/numint.h" 2






# 1 "/home/donquijote/dev/apron/include/numint_native.h" 1
# 10 "/home/donquijote/dev/apron/include/numint_native.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 11 "/home/donquijote/dev/apron/include/numint_native.h" 2


# 1 "/usr/include/assert.h" 1 3 4
# 14 "/home/donquijote/dev/apron/include/numint_native.h" 2

# 1 "/usr/include/gmp.h" 1 3 4
# 16 "/home/donquijote/dev/apron/include/numint_native.h" 2
# 34 "/home/donquijote/dev/apron/include/numint_native.h"
typedef long long int numint_native;
# 44 "/home/donquijote/dev/apron/include/numint_native.h"
typedef numint_native numint_t[1];







static inline void numint_set(numint_t a, numint_t b)
{ *a = *b; }
static inline void numint_set_array(numint_t* a, numint_t* b, size_t size)
{ memcpy(a,b,size*sizeof(numint_t)); }
static inline void numint_set_int(numint_t a, long int i)
{ *a = (numint_native)i; }





static inline void numint_init(numint_t a)
{ *a = 0LL; }
static inline void numint_init_array(numint_t* a, size_t size)
{
  size_t i;
  for (i=0; i<size; i++) *(a[i]) = 0LL;
}
static inline void numint_init_set(numint_t a, numint_t b)
{ numint_set(a,b); }
static inline void numint_init_set_int(numint_t a, long int i)
{ numint_set_int(a,i); }

static inline void numint_clear(numint_t a)
{}
static inline void numint_clear_array(numint_t* a, size_t size)
{}





static inline void numint_neg(numint_t a, numint_t b)
{ *a = -(*b); }
static inline void numint_abs(numint_t a, numint_t b)



{ *a = llabs(*b); }

static inline void numint_add(numint_t a, numint_t b, numint_t c)
{ *a = *b + *c; }
static inline void numint_add_uint(numint_t a, numint_t b, unsigned long int c)
{ *a = *b + c; }
static inline void numint_sub(numint_t a, numint_t b, numint_t c)
{ *a = *b - *c; }
static inline void numint_sub_uint(numint_t a, numint_t b, unsigned long int c)
{ *a = *b - c; }
static inline void numint_mul(numint_t a, numint_t b, numint_t c)
{ *a = *b * *c; }
static inline void numint_mul_2(numint_t a, numint_t b)
{ *a = *b << 1; }

static inline void numint_tdiv_q(numint_t q, numint_t a, numint_t b)
{ *q = *a / *b; }

static inline int numint_sgn(numint_t a)
{ return (*a==0LL ? 0 : (*a>0LL ? 1 : -1)); }

static inline void numint_fdiv_q(numint_t q, numint_t a, numint_t b)
{
  if (numint_sgn(a)*numint_sgn(b)<0 && *a % *b) *q = *a / *b - 1;
  else *q = *a / *b;
}
static inline void numint_cdiv_q(numint_t q, numint_t a, numint_t b)
{
  if (numint_sgn(a)*numint_sgn(b)>0 && *a % *b) *q = *a / *b + 1;
  else *q = *a / *b;
}
static inline void numint_cdiv_qr(numint_t q, numint_t r, numint_t a, numint_t b)
{
  numint_t qq,rr;
  *qq = *a / *b;
  *rr = *a % *b;
  if (numint_sgn(a)*numint_sgn(b)>0 && *rr) {
    *q = *qq + 1;
    *r = *rr - *b;
  }
  else {
    *q = *qq;
    *r = *rr;
  }
}

static inline void numint_cdiv_2(numint_t a, numint_t b)
{ *a = (*b>=0LL) ? (*b+1)/2 : *b/2; }
static inline void numint_cdiv_q_2exp(numint_t a, numint_t b, unsigned long int c)
{ *a = (*b >> c)+(*b & ((1LL<<c)-1LL) ? 1 : 0); }
static inline void numint_fdiv_q_2exp(numint_t a, numint_t b, unsigned long int c)
{ *a = (*b >> c); }
static inline void numint_min(numint_t a, numint_t b, numint_t c)
{ *a = (*b<=*c) ? *b : *c; }
static inline void numint_max(numint_t a, numint_t b, numint_t c)
{ *a = (*b>=*c) ? *b : *c; }

static const long long numint_max_exact_double = 1LL << 52;

static inline void numint_sqrt(numint_t up, numint_t down, numint_t b)
{
  double f = sqrt(*b);
  ((void) (0));
  if (*b<numint_max_exact_double) {

    *up = ceil(f);
    *down = floor(f);
  }
  else {

    *up = ceil(nextafter(f,+1/0.));
    *down = floor(nextafter(f,0.));
  }
}

static inline void numint_mul_2exp(numint_t a, numint_t b, int c)
{
  if (c>=0) *a = *b << c;
  else numint_cdiv_q_2exp(a,b,-c);
}






static inline void numint_divexact(numint_t a, numint_t b, numint_t c)
{ *a = *b / *c; }
static inline void numint_mod(numint_t a, numint_t b, numint_t c)
{ *a = *b % *c; }
static inline numint_native _gcd_aux2(numint_native a, numint_native b)
{
  numint_native t;
  while (b!=0LL && a!=b) {
    t = b;
    b = a % b;
    a = t;
  }
  return a;
}
static inline numint_native _gcd_aux(numint_native a, numint_native b)
{
  numint_abs(&a,&a);
  numint_abs(&b,&b);
  return (a>=b) ? _gcd_aux2(a,b) : _gcd_aux2(b,a);
}
static inline void numint_gcd(numint_t a, numint_t b, numint_t c)
{ *a = _gcd_aux(*b,*c); }

static inline numint_native _lcm_aux(numint_native a, numint_native b)
{
  numint_abs(&a,&a);
  numint_abs(&b,&b);
  return a / _gcd_aux(a,b) * b;
}
static inline void numint_lcm(numint_t a, numint_t b, numint_t c)
{ *a = _lcm_aux(*b,*c); }





static inline int numint_cmp(numint_t a, numint_t b)
{ return (*a==*b ? 0 : (*a>*b ? 1 : -1)); }
static inline int numint_cmp_int(numint_t a, long int b)
{ return (*a==b ? 0 : (*a>b ? 1 : -1)); }
static inline bool numint_equal(numint_t a, numint_t b)
{ return *a==*b; }
static inline bool numint_integer(numint_t a)
{ return true; }
# 233 "/home/donquijote/dev/apron/include/numint_native.h"
static inline void numint_print(numint_t a)
{ printf("%lli",*a); }
static inline void numint_fprint(FILE* stream, numint_t a)
{ fprintf(stream,"%lli",*a); }
static inline int numint_snprint(char* s, size_t size, numint_t a)
{ return snprintf(s,size,"%lli",*a); }







static inline bool numint_set_int2(numint_t a, long int i, long int j)
{
  ((void) (0));
  if (i>=0) *a = (i+j-1)/j;
  else *a = i/j;
  return (i%j) ? false : true;
}


static inline bool numint_set_mpz(numint_t a, mpz_t b)
{
  if (sizeof(numint_t)==sizeof(long int)) {
    *a = __gmpz_get_si(b);
  }
  else if (sizeof(numint_t)==2*sizeof(long int)) {
    int sgn;
    size_t count;
    unsigned long int tab[2];

    sgn = ((b)->_mp_size < 0 ? -1 : (b)->_mp_size > 0);
    __gmpz_export(&tab,&count,1,sizeof(long int),0,0,b);
    if (count==0){
      *a = 0;
    }
    else {
      *a = tab[0];
      if (count==2){
 *a = *a << (sizeof(long int)*8);
 *a = *a + (long long int)(tab[1]);
 if (*a<0){
   ((void) (0));
 }
      }
      if (sgn<0) *a = -(*a);
    }
  }
  else ((void) (0));
  return true;
}


static inline bool numint_set_mpq_tmp(numint_t a, mpq_t b,
          mpz_t q, mpz_t r)
{
  __gmpz_cdiv_qr(q,r, (&((b)->_mp_num)),(&((b)->_mp_den)));
  numint_set_mpz(a,q);
  bool res = (((r)->_mp_size < 0 ? -1 : (r)->_mp_size > 0)==0);
  return res;
}
static inline bool numint_set_mpq(numint_t a, mpq_t b)
{
  mpz_t q,r;
  __gmpz_init(q);__gmpz_init(r);
  bool res = numint_set_mpq_tmp(a,b,q,r);
  __gmpz_clear(q); __gmpz_clear(r);
  return res;
}

static inline bool numint_set_double(numint_t a, double b)
{
  double c = ceil(b);
  if (!(sizeof (c) == sizeof (float) ? __finitef (c) : sizeof (c) == sizeof (double) ? __finite (c) : __finitel (c))) { fprintf(stderr,"invalid floating-point in %s\n",__func__); *a = 0; return false; }
  *a = c;
  return (b==c);
}

static inline bool numint_set_mpfr(numint_t a, mpfr_t b)
{
  if (!mpfr_number_p(b)) { fprintf(stderr,"invalid floating-point in %s\n",__func__); numint_set_int(a,0); return false; }



  *a = __gmpfr_mpfr_get_sj(b,GMP_RNDU);

  return mpfr_integer_p(b);
}

static inline bool int_set_numint(long int* a, numint_t b)
{ *a = (long int)(*b); return true; }


static inline bool mpz_set_numint(mpz_t a, numint_t b)
{
  if (sizeof(numint_t)==sizeof(long int)) {
    __gmpz_set_si(a,*b);
  }
  else if (sizeof(numint_t)==2*sizeof(long int)) {
    unsigned long long int n;
    unsigned long int rep[2];

    n = llabs(*b);
    rep[1] = n & (2147483647L * 2UL + 1UL);
    rep[0] = n >> (sizeof(long int)*8);
    __gmpz_import(a,2,1,sizeof(unsigned long int),0,0,rep);
    if (*b<0)
      __gmpz_neg(a,a);
  }
  else ((void) (0));
  return true;
}


static inline bool mpq_set_numint(mpq_t a, numint_t b)
{
  if (sizeof(numint_t)==sizeof(long int)) {
    __gmpq_set_si(a,*b,1);
    return true;
  }
  else {
    __gmpz_set_ui((&((a)->_mp_den)),1);
    return mpz_set_numint((&((a)->_mp_num)),b);
  }
}


static inline bool double_set_numint(double* a, numint_t b)
{
  *a = (double)(*b);
  double aa = -((double)(-(*b)));
  return (*a==aa);
}


static inline bool mpfr_set_numint(mpfr_t a, numint_t b)
{



  return !__gmpfr_set_sj(a,*b,GMP_RNDU);

}

static inline bool mpz_fits_numint(mpz_t a)
{
  if (sizeof(numint_t)==sizeof(long int)) {
    return __gmpz_fits_slong_p(a);
  }
  else {
    size_t size = __gmpz_sizeinbase(a,2);
    return (size <= sizeof(numint_t)*8-1);
  }
}

static inline bool mpq_fits_numint_tmp(mpq_t a, mpz_t mpz)
{
  __gmpz_cdiv_q(mpz,(&((a)->_mp_num)),(&((a)->_mp_den)));
  bool res = mpz_fits_numint(mpz);
  return res;
}
static inline bool mpq_fits_numint(mpq_t a)
{
  mpz_t mpz;
  __gmpz_init(mpz);
  bool res = mpq_fits_numint_tmp(a,mpz);
  __gmpz_clear(mpz);
  return res;
}
static inline bool double_fits_numint(double a)
{
  return (sizeof (a) == sizeof (float) ? __finitef (a) : sizeof (a) == sizeof (double) ? __finite (a) : __finitel (a)) && a>=(double)(-9223372036854775807LL) && a<=(double)9223372036854775807LL;
}
static inline bool mpfr_fits_numint(mpfr_t a)
{



  return mpfr_number_p(a) && mpfr_fits_intmax_p(a,GMP_RNDU);

}
static inline bool numint_fits_int(numint_t a)



{ return (*a>=-2147483647L && *a<=2147483647L); }

static inline bool numint_fits_float(numint_t a)
{ return true; }
static inline bool numint_fits_double(numint_t a)
{ return true; }
static inline bool numint_fits_mpfr(numint_t a)
{ return true; }






static inline unsigned char numint_serialize_id(void)
{ return sizeof(numint_t)/4; }

static inline size_t numint_serialize(void* dst, numint_t src)
{
  num_store_words8(dst,src,sizeof(numint_t));
  return sizeof(numint_t);
}

static inline size_t numint_deserialize(numint_t dst, const void* src)
{
  num_store_words8(dst,src,sizeof(numint_t));
  return sizeof(numint_t);
}

static inline size_t numint_serialized_size(numint_t a)
{ return sizeof(numint_t); }
# 17 "/home/donquijote/dev/apron/include/numint.h" 2
# 41 "/home/donquijote/dev/apron/include/numint.h"
static inline void numint_set(numint_t a, numint_t b);
static inline void numint_set_array(numint_t* a, numint_t* b, size_t size);
static inline void numint_set_int(numint_t a, long int i);





static inline void numint_init(numint_t a);
static inline void numint_init_array(numint_t* a, size_t size);
static inline void numint_init_set(numint_t a, numint_t b);
static inline void numint_init_set_int(numint_t a, long int i);

static inline void numint_clear(numint_t a);
static inline void numint_clear_array(numint_t* a, size_t size);

static inline void numint_swap(numint_t a, numint_t b)
{ numint_t t; *t=*a;*a=*b;*b=*t; }





static inline void numint_neg(numint_t a, numint_t b);
static inline void numint_abs(numint_t a, numint_t b);
static inline void numint_add(numint_t a, numint_t b, numint_t c);
static inline void numint_add_uint(numint_t a, numint_t b, unsigned long int c);
static inline void numint_sub(numint_t a, numint_t b, numint_t c);
static inline void numint_sub_uint(numint_t a, numint_t b, unsigned long int c);
static inline void numint_mul(numint_t a, numint_t b, numint_t c);
static inline void numint_mul_2(numint_t a, numint_t b);
static inline void numint_fdiv_q(numint_t a, numint_t b, numint_t c);
static inline void numint_cdiv_q(numint_t q, numint_t a, numint_t b);
static inline void numint_cdiv_t(numint_t q, numint_t a, numint_t b);
static inline void numint_cdiv_qr(numint_t q, numint_t r, numint_t a, numint_t b);
static inline void numint_cdiv_2(numint_t a, numint_t b);
static inline void numint_cdiv_q_2exp(numint_t a, numint_t b, unsigned long int c);
static inline void numint_fdiv_q_2exp(numint_t a, numint_t b, unsigned long int c);
static inline void numint_min(numint_t a, numint_t b, numint_t c);
static inline void numint_max(numint_t a, numint_t b, numint_t c);
static inline void numint_floor(numint_t a, numint_t b);
static inline void numint_ceil(numint_t a, numint_t b);
static inline void numint_sqrt(numint_t up, numint_t down, numint_t b);
static inline void numint_mul_2exp(numint_t a, numint_t b, int c);





static inline void numint_divexact(numint_t a, numint_t b, numint_t c);
static inline void numint_mod(numint_t a, numint_t b, numint_t c);
static inline void numint_gcd(numint_t a, numint_t b, numint_t c);
static inline void numint_lcm(numint_t a, numint_t b, numint_t c);





static inline int numint_sgn(numint_t a);
static inline int numint_cmp(numint_t a, numint_t b);
static inline int numint_cmp_int(numint_t a, long int b);
static inline bool numint_equal(numint_t a, numint_t b);





static inline void numint_print(numint_t a);
static inline void numint_fprint(FILE* stream, numint_t a);
static inline int numint_snprint(char* s, size_t size, numint_t a);





static inline bool numint_set_int2(numint_t a, long int i, long int j);


static inline bool numint_set_mpz(numint_t a, mpz_t b);

static inline bool numint_set_mpq(numint_t a, mpq_t b);

static inline bool numint_set_double(numint_t a, double b);

static inline bool numint_set_mpfr(numint_t a, mpfr_t b);

static inline bool numint_set_ap_scalar(numint_t a, ap_scalar_t* b);


static inline bool int_set_numint(long int* a, numint_t b);

static inline bool mpz_set_numint(mpz_t a, numint_t b);

static inline bool mpq_set_numint(mpq_t a, numint_t b);

static inline bool double_set_numint(double* a, numint_t b);

static inline bool mpfr_set_numint(mpfr_t a, numint_t b);

static inline bool ap_scalar_set_numint(ap_scalar_t* a, numint_t b);


static inline bool mpz_fits_numint(mpz_t a);
static inline bool mpq_fits_numint(mpq_t a);
static inline bool double_fits_numint(double a);
static inline bool mpfr_fits_numint(mpfr_t a);
static inline bool numint_fits_int(numint_t a);
static inline bool numint_fits_float(numint_t a);
static inline bool numint_fits_double(numint_t a);
static inline bool numint_fits_mpfr(numint_t a);


static inline bool mpq_fits_numint_tmp(mpq_t a, mpz_t mpz);
static inline bool numint_set_mpq_tmp(numint_t a, mpq_t b,
          mpz_t q, mpz_t r);





static inline unsigned char numint_serialize_id(void);
static inline size_t numint_serialize(void* dst, numint_t src);
static inline size_t numint_deserialize(numint_t dst, const void* src);
static inline size_t numint_serialized_size(numint_t a);



static inline bool numint_set_ap_scalar(numint_t a, ap_scalar_t* b)
{
  ((void) (0));
  switch (b->discr){
  case AP_SCALAR_MPQ:
    return numint_set_mpq(a,b->val.mpq);
  case AP_SCALAR_DOUBLE:
    return numint_set_double(a,b->val.dbl);
  case AP_SCALAR_MPFR:
    return numint_set_mpfr(a,b->val.mpfr);
  default: abort();
  }
}
static inline bool ap_scalar_set_numint(ap_scalar_t* a, numint_t b)
{
  ap_scalar_reinit(a,AP_SCALAR_MPQ);
  return mpq_set_numint(a->val.mpq,b);
}
# 17 "/home/donquijote/dev/apron/include/numrat.h" 2





# 1 "/home/donquijote/dev/apron/include/numrat_native.h" 1
# 10 "/home/donquijote/dev/apron/include/numrat_native.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 11 "/home/donquijote/dev/apron/include/numrat_native.h" 2

# 1 "/usr/include/assert.h" 1 3 4
# 13 "/home/donquijote/dev/apron/include/numrat_native.h" 2


# 1 "/usr/include/gmp.h" 1 3 4
# 16 "/home/donquijote/dev/apron/include/numrat_native.h" 2
# 33 "/home/donquijote/dev/apron/include/numrat_native.h"
typedef struct _rat_t {
  numint_t n;
  numint_t d;
} numrat_t[1];





static inline void numrat_canonicalize(numrat_t r)
{
  if (r->d){
    numint_t pgcd;
    numint_gcd(pgcd,r->n,r->d);
    if (*pgcd==0 || (*pgcd==-1 && (*r->d==(-9223372036854775807LL - 1LL) || *r->n==(-9223372036854775807LL - 1LL)))) {
      fprintf(stderr,"overflow in numrat_canonicalize\n");
      return;
    }
    *r->n /= *pgcd;
    *r->d /= *pgcd;
  }
  else {
    numint_set_int(r->n,1);
  }
}



static inline bool numrat_set_numint2(numrat_t a, numint_t b, numint_t c)
{
  numint_set(a->n,b);
  numint_set(a->d,c);
  numrat_canonicalize(a);
  return true;
}





static inline void numrat_set(numrat_t a, numrat_t b)
{ *a = *b; }
static inline void numrat_set_array(numrat_t* a, numrat_t* b, size_t size)
{ memcpy(a,b,size*sizeof(numrat_t)); }
static inline void numrat_set_int(numrat_t a, long int i)
{
  numint_set_int(a->n,i);
  numint_set_int(a->d,1);
}





static inline void numrat_init(numrat_t a)
{
  numint_init(a->n);
  numint_init_set_int(a->d,1);
}
static inline void numrat_init_array(numrat_t* a, size_t size)
{
  size_t i;
  for (i=0; i<size; i++) numrat_init(a[i]);
}
static inline void numrat_init_set(numrat_t a, numrat_t b)
{ *a = *b; }
static inline void numrat_init_set_int(numrat_t a, long int i)
{ numint_set_int(a->n,i); numint_set_int(a->d,1); }

static inline void numrat_clear(numrat_t a)
{}
static inline void numrat_clear_array(numrat_t* a, size_t size)
{}






static inline void numrat_neg(numrat_t a, numrat_t b)
{ numint_neg(a->n,b->n); numint_set(a->d,b->d); }
static inline void numrat_inv(numrat_t a, numrat_t b)
{
  if (a!=b)
    *a = *b;
  numint_swap(a->n,a->d);
  if (*a->d<0){
    numint_neg(a->n,a->n);
    numint_neg(a->d,a->d);
  }
}
static inline void numrat_abs(numrat_t a, numrat_t b)
{ numint_abs(a->n,b->n); numint_set(a->d,b->d); }
static inline void numrat_add(numrat_t a, numrat_t b, numrat_t c)
{
  numint_t d;





  numint_lcm(d,b->d,c->d);
  *a->n = *b->n * (*d / *b->d) + (*d / *c->d) * *c->n;
  *a->d = *d;

  numrat_canonicalize(a);
}
static inline void numrat_add_uint(numrat_t a, numrat_t b, unsigned long int c)
{
  *a->n = *b->n + (numint_native)c * (*b->d);
  *a->d = *b->d;
  numrat_canonicalize(a);
}
static inline void numrat_sub(numrat_t a, numrat_t b, numrat_t c)
{
  numint_t d;





  numint_lcm(d,b->d,c->d);
  *a->n = *b->n * (*d / *b->d) - (*d / *c->d) * *c->n;
  *a->d = *d;

  numrat_canonicalize(a);
}
static inline void numrat_sub_uint(numrat_t a, numrat_t b, unsigned long int c)
{
  *a->n = *b->n - (numint_native)c * (*b->d);
  *a->d = *b->d;
  numrat_canonicalize(a);
}
static inline void numrat_mul(numrat_t a, numrat_t b, numrat_t c)
{
  *a->n = *b->n * *c->n;
  *a->d = *b->d * *c->d;
  numrat_canonicalize(a);
}
static inline void numrat_mul_2(numrat_t a, numrat_t b)
{
  if (*b->d % 2 == 0){
    *a->n = *b->n;
    *a->d = *b->d / 2;
  }
  else {
    *a->n = *b->n * 2;
    *a->d = *b->d;
  }
}
static inline void numrat_div(numrat_t a, numrat_t b, numrat_t c)
{
  numint_t d;
  *d = *b->d * *c->n;
  if (*d<0) {
    *a->n = - *b->n * *c->d;
    *a->d = - *d;
  }
  else {
    *a->n = *b->n * *c->d;
    *a->d = *d;
  }
  numrat_canonicalize(a);
}
static inline void numrat_div_2(numrat_t a, numrat_t b)
{
  if (*b->n % 2 == 0){
    *a->n = *b->n / 2;
    *a->d = *b->d;
  }
  else {
    *a->n = *b->n;
    *a->d = *b->d * 2;
  }
}
static inline void numrat_floor(numrat_t a, numrat_t b)
{
  numint_fdiv_q(a->n, b->n, b->d);
  numint_set_int(a->d,1);
}
static inline void numrat_ceil(numrat_t a, numrat_t b)
{
  numint_cdiv_q(a->n, b->n, b->d);
  numint_set_int(a->d,1);
}
static inline void numrat_trunc(numrat_t a, numrat_t b)
{
  numint_tdiv_q(a->n, b->n, b->d);
  numint_set_int(a->d,1);
}
static inline void numrat_sqrt(numrat_t up, numrat_t down, numrat_t b)
{

  numint_t pq;
  ((void) (0));
  numint_mul(pq, b->n, b->d);
  numint_sqrt(up->n, down->n, pq);
  numint_set(up->d,b->d);
  numint_set(down->d,b->d);
  numrat_canonicalize(up);
  numrat_canonicalize(down);
}

static inline void numrat_mul_2exp(numrat_t a, numrat_t b, int c)
{
  if (c>=0) {
    *a->n = *b->n << c;
    *a->d = *b->d;
  }
  else {
    *a->n = *b->n;
    *a->d = *b->d << (-c);
  }
  numrat_canonicalize(a);
}





static inline int numrat_sgn(numrat_t a)
{ return numint_sgn(a->n); }
static inline int numrat_cmp(numrat_t a, numrat_t b)
{
  numint_t aa,bb;




  numint_t d;
  numint_lcm(d,a->d,b->d);
  *aa = *a->n * (*d / *a->d);
  *bb = (*d / *b->d) * *b->n;

  return numint_cmp(aa,bb);
}
static inline int numrat_cmp_int(numrat_t a, long int b)
{
  numint_t aa,bb;
  *aa = *a->n;
  *bb = *a->d * b;
  return numint_cmp(aa,bb);
}
static inline bool numrat_equal(numrat_t a, numrat_t b)
{ return numint_equal(a->n,b->n) && numint_equal(a->d,b->d); }

static inline void numrat_min(numrat_t a, numrat_t b, numrat_t c)
{ numrat_set(a, numrat_cmp(b,c)<=0 ? b : c); }
static inline void numrat_max(numrat_t a, numrat_t b, numrat_t c)
{ numrat_set(a, numrat_cmp(b,c)>=0 ? b : c); }

static inline bool numrat_integer(numrat_t a)
{ return (*a->d==1); }





static inline void numrat_fprint(FILE* stream, numrat_t a)
{
  if (*a->n==0)
    fprintf(stream,"0");
  else if (*a->d==1)
    numint_fprint(stream,a->n);
  else {
    numint_fprint(stream,a->n);
    fprintf(stream,"/");
    numint_fprint(stream,a->d);
  }
}
static inline void numrat_print(numrat_t a)
{
  numrat_fprint(stdout,a);
}
static inline int numrat_snprint(char* s, size_t size, numrat_t a)
{
  int res;
  if (*a->n==0)
    res = snprintf(s,size, "0");
  else if (*a->d==1)
    res = numint_snprint(s,size,a->n);
  else {
    res = numint_snprint(s,size,a->n);
    res += snprintf(s+res,size-res,"/");
    res += numint_snprint(s+res,size-res,a->n);
  }
  return res;
}






static inline bool numrat_set_int2(numrat_t a, long int i, long int j)
{
  ((void) (0));
  numint_set_int(a->n,i);
  numint_set_int(a->d,j);
  numrat_canonicalize(a);
  return true;
}


static inline bool numrat_set_mpz(numrat_t a, mpz_t b)
{
  numint_set_mpz(a->n,b);
  numint_set_int(a->d,1);
  return true;
}


static inline bool numrat_set_mpq(numrat_t a, mpq_t b)
{
  numint_set_mpz(a->n,(&((b)->_mp_num)));
  numint_set_mpz(a->d,(&((b)->_mp_den)));
  return true;
}


static inline bool numrat_set_double_tmp(numrat_t a, double k, mpq_t mpq)
{
  if (!(sizeof (k) == sizeof (float) ? __finitef (k) : sizeof (k) == sizeof (double) ? __finite (k) : __finitel (k))) { fprintf(stderr,"invalid floating-point in %s\n",__func__); numrat_set_int(a,0); return false; }
  __gmpq_set_d(mpq,k);
  numrat_set_mpq(a,mpq);
  return true;
}
static inline bool numrat_set_double(numrat_t a, double k)
{
  mpq_t mpq;
  __gmpq_init(mpq);
  numrat_set_double_tmp(a,k,mpq);
  __gmpq_clear(mpq);
  return true;
}

static inline bool numrat_set_mpfr(numrat_t a, mpfr_t b)
{
  mpq_t q;
  mp_exp_t e;
  if (!mpfr_number_p(b)) { fprintf(stderr,"invalid floating-point in %s\n",__func__); numrat_set_int(a,0); return false; }
  __gmpq_init(q);

  e = mpfr_get_z_exp((&((q)->_mp_num)),b);
  __gmpz_set_si((&((q)->_mp_den)),1);
  if (e>0) __gmpq_mul_2exp(q,q,e);
  if (e<0) __gmpq_div_2exp(q,q,-e);
  numrat_set_mpq(a,q);
  __gmpq_clear(q);
  return true;
}

static inline bool int_set_numrat(long int* a, numrat_t b)
{
  numint_t q,r;
  numint_cdiv_qr(q,r,b->n,b->d);
  *a = *q;
  return (*r==0);
}
static inline bool int_set_numrat_tmp(long int* a, numrat_t b,
          mpz_t q, mpz_t r)
{ return int_set_numrat(a,b); }


static inline bool mpz_set_numrat(mpz_t a, numrat_t b)
{
  numint_t q,r;
  numint_cdiv_qr(q,r,b->n,b->d);
  mpz_set_numint(a,q);
  return (numint_sgn(r)==0);
}
static inline bool mpz_set_numrat_tmp(mpz_t a, numrat_t b, mpz_t mpz)
{ return mpz_set_numrat(a,b); }


static inline bool mpq_set_numrat(mpq_t a, numrat_t b)
{
  mpz_set_numint((&((a)->_mp_num)), b->n);
  mpz_set_numint((&((a)->_mp_den)), b->d);
  return true;
}


static inline bool double_set_numrat_tmp(double* a, numrat_t b,
      mpq_t mpq, mpfr_t mpfr)
{
  mpq_set_numrat(mpq,b);
  int res = mpfr_set_q(mpfr,mpq,GMP_RNDU);
  *a = mpfr_get_d(mpfr,GMP_RNDU);
  return (res==0);
}
static inline bool double_set_numrat(double* a, numrat_t b)
{
  mpq_t mpq;
  mpfr_t mpfr;
  __gmpq_init(mpq);
  mpfr_init2(mpfr,53);
  bool res = double_set_numrat_tmp(a,b,mpq,mpfr);
  __gmpq_clear(mpq);
  mpfr_clear(mpfr);
  return res;
}

static inline bool mpfr_set_numrat(mpfr_t a, numrat_t b)
{
  int r = (__builtin_constant_p (*b->n) && (*b->n) >= 0 ? (__builtin_constant_p ((*b->n)) && ((*b->n)) == 0 ? __extension__ ({ mpfr_ptr _p = ((a)); _p->_mpfr_sign = 1; _p->_mpfr_exp = ((mp_exp_t)((~((~(unsigned long)0)>>1))+1)); (void) ((GMP_RNDU)); 0; }) : mpfr_set_ui_2exp (((a)), ((*b->n)), 0, ((GMP_RNDU)))) : mpfr_set_si_2exp ((a), (*b->n), 0, (GMP_RNDU)));
  return !mpfr_div_si(a,a,*b->d,GMP_RNDU) && !r;
}

static inline bool mpz_fits_numrat(mpz_t a)
{ return mpz_fits_numint(a); }
static inline bool mpq_fits_numrat(mpq_t a)
{ return mpz_fits_numint((&((a)->_mp_num))) && mpz_fits_numint((&((a)->_mp_den))); }
static inline bool double_fits_numrat_tmp(double k, mpq_t mpq)
{
  if (!(sizeof (k) == sizeof (float) ? __finitef (k) : sizeof (k) == sizeof (double) ? __finite (k) : __finitel (k))) return false;
  __gmpq_set_d(mpq,k);
  bool res = mpq_fits_numrat(mpq);
  return res;
}
static inline bool double_fits_numrat(double k)
{
  mpq_t mpq;
  __gmpq_init(mpq);
  bool res = double_fits_numrat_tmp(k,mpq);
  __gmpq_clear(mpq);
  return res;
}
static inline bool mpfr_fits_numrat(mpfr_t a)
{
  mpz_t z;
  mp_exp_t e;
  if (!mpfr_number_p(a)) return false;
  __gmpz_init(z);
  e = mpfr_get_z_exp(z,a);
  if (!mpz_fits_numrat(z)) {
    __gmpz_clear(z);
    return false;
  }
  __gmpz_clear(z);
  return e<(mp_exp_t)sizeof(numint_t)*8-1;
}
static inline bool numrat_fits_int(numrat_t a)
{
  numint_t b;
  numint_cdiv_q(b,a->n,a->d);
  return *b<=2147483647L && *b>=-2147483647L;
}
static inline bool numrat_fits_float(numrat_t a)
{ return true; }
static inline bool numrat_fits_double(numrat_t a)
{ return true; }
static inline bool numrat_fits_mpfr(numrat_t a)
{ return true; }







static inline unsigned char numrat_serialize_id(void)
{ return 0x10 + sizeof(numint_t)/4; }

static inline size_t numrat_serialize(void* dst, numrat_t src)
{
  size_t x = numint_serialize(dst,src->n);
  return x + numint_serialize((char*)dst+x,src->d);
}

static inline size_t numrat_deserialize(numrat_t dst, const void* src)
{
  size_t x = numint_deserialize(dst->n,src);
  return x + numint_deserialize(dst->d,(const char*)src+x);
}

static inline size_t numrat_serialized_size(numrat_t a)
{
  return numint_serialized_size(a->n) +
         numint_serialized_size(a->d);
}
# 23 "/home/donquijote/dev/apron/include/numrat.h" 2
# 35 "/home/donquijote/dev/apron/include/numrat.h"
static inline void numrat_set(numrat_t a, numrat_t b);
static inline void numrat_set_array(numrat_t* a, numrat_t* b, size_t size);
static inline void numrat_set_int(numrat_t a, long int i);





static inline void numrat_init(numrat_t a);
static inline void numrat_init_array(numrat_t* a, size_t size);
static inline void numrat_init_set(numrat_t a, numrat_t b);
static inline void numrat_init_set_int(numrat_t a, long int i);

static inline void numrat_clear(numrat_t a);
static inline void numrat_clear_array(numrat_t* a, size_t size);

static inline void numrat_swap(numrat_t a, numrat_t b)
{ numrat_t t; *t=*a;*a=*b;*b=*t; }





static inline void numrat_neg(numrat_t a, numrat_t b);
static inline void numrat_inv(numrat_t a, numrat_t b);
static inline void numrat_abs(numrat_t a, numrat_t b);
static inline void numrat_add(numrat_t a, numrat_t b, numrat_t c);
static inline void numrat_add_uint(numrat_t a, numrat_t b, unsigned long int c);
static inline void numrat_sub(numrat_t a, numrat_t b, numrat_t c);
static inline void numrat_sub_uint(numrat_t a, numrat_t b, unsigned long int c);
static inline void numrat_mul(numrat_t a, numrat_t b, numrat_t c);
static inline void numrat_mul_2(numrat_t a, numrat_t b);
static inline void numrat_div(numrat_t a, numrat_t b, numrat_t c);
static inline void numrat_div_2(numrat_t a, numrat_t b);
static inline void numrat_min(numrat_t a, numrat_t b, numrat_t c);
static inline void numrat_max(numrat_t a, numrat_t b, numrat_t c);
static inline void numrat_floor(numrat_t a, numrat_t b);
static inline void numrat_ceil(numrat_t a, numrat_t b);
static inline void numrat_trunc(numrat_t a, numrat_t b);
static inline void numrat_sqrt(numrat_t up, numrat_t down, numrat_t b);
static inline void numrat_mul_2exp(numrat_t a, numrat_t b, int c);





static inline int numrat_sgn(numrat_t a);
static inline int numrat_cmp(numrat_t a, numrat_t b);
static inline int numrat_cmp_int(numrat_t a, long int b);
static inline bool numrat_equal(numrat_t a, numrat_t b);





static inline void numrat_print(numrat_t a);
static inline void numrat_fprint(FILE* stream, numrat_t a);
static inline int numrat_snprint(char* s, size_t size, numrat_t a);





static inline bool numrat_set_int2(numrat_t a, long int i, long int j);

static inline bool numrat_set_mpz(numrat_t a, mpz_t b);

static inline bool numrat_set_mpq(numrat_t a, mpq_t b);

static inline bool numrat_set_double(numrat_t a, double b);

static inline bool numrat_set_mpfr(numrat_t a, mpfr_t b);

static inline bool numrat_set_ap_scalar(numrat_t a, ap_scalar_t* b);

static inline bool int_set_numrat(long int* a, numrat_t b);

static inline bool mpz_set_numrat(mpz_t a, numrat_t b);

static inline bool mpq_set_numrat(mpq_t a, numrat_t b);

static inline bool double_set_numrat(double* a, numrat_t b);

static inline bool mpfr_set_numrat(mpfr_t a, numrat_t b);

static inline bool ap_scalar_set_numrat(ap_scalar_t* a, numrat_t b);


static inline bool mpz_fits_numrat(mpz_t a);
static inline bool mpq_fits_numrat(mpq_t a);
static inline bool double_fits_numrat(double a);
static inline bool mpfr_fits_numrat(mpfr_t a);
static inline bool numrat_fits_int(numrat_t a);
static inline bool numrat_fits_float(numrat_t a);
static inline bool numrat_fits_double(numrat_t a);
static inline bool numrat_fits_mpfr(numrat_t a);


static inline bool int_set_numrat_tmp(long int* a, numrat_t b,
          mpz_t q, mpz_t r);
static inline bool mpz_set_numrat_tmp(mpz_t a, numrat_t b, mpz_t mpz);

static inline bool double_set_numrat_tmp(double* a, numrat_t b,
      mpq_t mpq, mpfr_t mpfr);
static inline bool numrat_set_double_tmp(numrat_t a, double k, mpq_t mpq);
static inline bool double_fits_numrat_tmp(double k, mpq_t mpq);






static inline void numrat_canonicalize(numrat_t a);
static inline bool numrat_set_numint2(numrat_t a, numint_t b, numint_t c);
# 160 "/home/donquijote/dev/apron/include/numrat.h"
static inline unsigned char numrat_serialize_id(void);
static inline size_t numrat_serialize(void* dst, numrat_t src);
static inline size_t numrat_deserialize(numrat_t dst, const void* src);
static inline size_t numrat_serialized_size(numrat_t a);



static inline bool numrat_set_ap_scalar(numrat_t a, ap_scalar_t* b)
{
  ((void) (0));
  switch (b->discr){
  case AP_SCALAR_MPQ:
    return numrat_set_mpq(a,b->val.mpq);
  case AP_SCALAR_DOUBLE:
    return numrat_set_double(a,b->val.dbl);
  case AP_SCALAR_MPFR:
    return numrat_set_mpfr(a,b->val.mpfr);
  default: abort();
  }
}
static inline bool ap_scalar_set_numrat(ap_scalar_t* a, numrat_t b)
{
  ap_scalar_reinit(a,AP_SCALAR_MPQ);
  return mpq_set_numrat(a->val.mpq,b);
}
# 28 "/home/donquijote/dev/apron/include/num_numrat.h" 2





typedef numrat_t num_t;
# 45 "/home/donquijote/dev/apron/include/num_numrat.h"
static inline void num_set(num_t a, num_t b)
              { numrat_set(a,b); }
static inline void num_set_array(num_t* a, num_t* b, size_t size)
              { numrat_set_array(a,b,size); }
static inline void num_set_int(num_t a, long int i)
              { numrat_set_int(a,i); }





static inline void num_init(num_t a)
              { numrat_init(a); }
static inline void num_init_array(num_t* a, size_t size)
              { numrat_init_array(a,size); }
static inline void num_init_set(num_t a, num_t b)
              { numrat_init_set(a,b); }
static inline void num_init_set_int(num_t a, long int i)
              { numrat_init_set_int(a,i); }

static inline void num_clear(num_t a)
              { numrat_clear(a); }
static inline void num_clear_array(num_t* a, size_t size)
              { numrat_clear_array(a,size); }

static inline void num_swap(num_t a, num_t b)
              { numrat_swap(a,b); }





static inline void num_neg(num_t a, num_t b)
              { numrat_neg(a,b); }
static inline void num_abs(num_t a, num_t b)
              { numrat_abs(a,b); }
static inline void num_add(num_t a, num_t b, num_t c)
              { numrat_add(a,b,c); }
static inline void num_add_uint(num_t a, num_t b, unsigned long int c)
              { numrat_add_uint(a,b,c); }
static inline void num_sub(num_t a, num_t b, num_t c)
              { numrat_sub(a,b,c); }
static inline void num_sub_uint(num_t a, num_t b, unsigned long int c)
              { numrat_sub_uint(a,b,c); }
static inline void num_mul(num_t a, num_t b, num_t c)
              { numrat_mul(a,b,c); }
static inline void num_mul_2(num_t a, num_t b)
              { numrat_mul_2(a,b); }
static inline void num_div(num_t a, num_t b, num_t c)
              { numrat_div(a,b,c); }
static inline void num_div_2(num_t a, num_t b)
              { numrat_div_2(a,b); }
static inline void num_min(num_t a, num_t b, num_t c)
              { numrat_min(a,b,c); }
static inline void num_max(num_t a, num_t b, num_t c)
              { numrat_max(a,b,c); }
static inline void num_floor(num_t a, num_t b)
              { numrat_floor(a,b); }
static inline void num_ceil(num_t a, num_t b)
              { numrat_ceil(a,b); }
static inline void num_trunc(num_t a, num_t b)
              { numrat_trunc(a,b); }
static inline void num_sqrt(num_t up, num_t down, num_t b)
              { numrat_sqrt(up,down,b); }
static inline void num_mul_2exp(num_t a, num_t b, int c)
              { numrat_mul_2exp(a,b,c); }





static inline int num_sgn(num_t a)
         { return numrat_sgn(a); }
static inline int num_cmp(num_t a, num_t b)
      { return numrat_cmp(a,b); }
static inline int num_cmp_int(num_t a, long int b)
      { return numrat_cmp_int(a,b); }
static inline bool num_equal(num_t a, num_t b)
      { return numrat_equal(a,b); }
static inline bool num_integer(num_t a)
      { return numrat_integer(a); }





static inline void num_print(num_t a)
              { numrat_print(a); }
static inline void num_fprint(FILE* stream, num_t a)
              { numrat_fprint(stream, a); }
static inline int num_snprint(char* s, size_t size, num_t a)
      { return numrat_snprint(s,size,a); }





static inline bool num_set_int2(num_t a, long int i, long int j)
              { return numrat_set_int2(a,i,j); }


static inline bool num_set_mpz(num_t a, mpz_t b)
          { return numrat_set_mpz(a,b); }


static inline bool num_set_mpq(num_t a, mpq_t b)
          { return numrat_set_mpq(a,b); }


static inline bool num_set_double(num_t a, double k)
          { return numrat_set_double(a,k); }

static inline bool num_set_mpfr(num_t a, mpfr_t k)
          { return numrat_set_mpfr(a,k); }

static inline bool num_set_ap_scalar(num_t a, ap_scalar_t* b)
          { return numrat_set_ap_scalar(a,b); }


static inline bool int_set_num(long int*a, num_t b)
          { return int_set_numrat(a,b); }

static inline bool mpz_set_num(mpz_t a, num_t b)
          { return mpz_set_numrat(a,b); }

static inline bool mpq_set_num(mpq_t a, num_t b)
          { return mpq_set_numrat(a,b); }

static inline bool double_set_num(double* a, num_t b)
          { return double_set_numrat(a,b); }

static inline bool mpfr_set_num(mpfr_t a, num_t b)
          { return mpfr_set_numrat(a,b); }

static inline bool ap_scalar_set_num(ap_scalar_t* a, num_t b)
          { return ap_scalar_set_numrat(a,b); }


static inline bool mpz_fits_num(mpz_t a)
          { return mpz_fits_numrat(a); }
static inline bool mpq_fits_num(mpq_t a)
          { return mpq_fits_numrat(a); }
static inline bool double_fits_num(double a)
          { return double_fits_numrat(a); }
static inline bool mpfr_fits_num(mpfr_t a)
          { return mpfr_fits_numrat(a); }
static inline bool num_fits_int(num_t a)
          { return numrat_fits_int(a); }
static inline bool num_fits_float(num_t a)
          { return numrat_fits_float(a); }
static inline bool num_fits_double(num_t a)
          { return numrat_fits_double(a); }
static inline bool num_fits_mpfr(num_t a)
          { return numrat_fits_mpfr(a); }


static inline bool num_set_double_tmp(num_t a, double k, mpq_t mpq)
        { return numrat_set_double_tmp(a,k,mpq); }
static inline bool int_set_num_tmp(long int* a, num_t b,
       mpz_t q, mpz_t r)
        { return int_set_numrat_tmp(a,b,q,r); }
static inline bool mpz_set_num_tmp(mpz_t a, num_t b, mpz_t mpz)
        { return mpz_set_numrat_tmp(a,b,mpz); }
static inline bool double_set_num_tmp(double* a, num_t b,
          mpq_t mpq, mpfr_t mpfr)
        { return double_set_numrat_tmp(a,b,mpq,mpfr); }
static inline bool double_fits_num_tmp(double k, mpq_t mpq)
        { return double_fits_numrat_tmp(k,mpq); }

static inline bool num_set_mpq_tmp(num_t a, mpq_t b,
       mpz_t q, mpz_t r, mpfr_t mpfr)
{ return numrat_set_mpq(a,b); }
static inline bool mpq_fits_num_tmp(mpq_t a, mpz_t mpz)
{ return mpq_fits_numrat(a); }
static inline bool num_set_mpz_tmp(num_t a, mpz_t b, mpfr_t mpfr)
{ return numrat_set_mpz(a,b); }





static inline unsigned char num_serialize_id(void)
{ return numrat_serialize_id(); }

static inline size_t num_serialize(void* dst, num_t src)
{ return numrat_serialize(dst,src); }

static inline size_t num_deserialize(num_t dst, const void* src)
{ return numrat_deserialize(dst,src); }

static inline size_t num_serialized_size(num_t a)
{ return numrat_serialized_size(a); }
# 28 "/home/donquijote/dev/apron/include/num.h" 2






# 1 "/home/donquijote/dev/apron/include/num_name.h" 1
# 35 "/home/donquijote/dev/apron/include/num.h" 2
# 75 "/home/donquijote/dev/apron/include/num.h"
static inline void num_set(num_t a, num_t b);
static inline void num_set_array(num_t* a, num_t* b, size_t size);
static inline void num_set_int(num_t a, long int i);





static inline void num_init(num_t a);
static inline void num_init_array(num_t* a, size_t size);
static inline void num_init_set(num_t a, num_t b);
static inline void num_init_set_int(num_t a, long int i);

static inline void num_clear(num_t a);
static inline void num_clear_array(num_t* a, size_t size);

static inline void num_swap(num_t a, num_t b);





static inline void num_neg(num_t a, num_t b);
static inline void num_abs(num_t a, num_t b);
static inline void num_add(num_t a, num_t b, num_t c);
static inline void num_add_uint(num_t a, num_t b, unsigned long int c);
static inline void num_sub(num_t a, num_t b, num_t c);
static inline void num_sub_uint(num_t a, num_t b, unsigned long int c);
static inline void num_mul(num_t a, num_t b, num_t c);
static inline void num_mul_2(num_t a, num_t b);
static inline void num_div(num_t a, num_t b, num_t c);
static inline void num_div_2(num_t a, num_t b);
static inline void num_min(num_t a, num_t b, num_t c);
static inline void num_max(num_t a, num_t b, num_t c);

static inline void num_mul_2exp(num_t a, num_t b, int c);


static inline void num_floor(num_t a, num_t b);
static inline void num_ceil(num_t a, num_t b);
static inline void num_trunc(num_t a, num_t b);


static inline void num_sqrt(num_t up, num_t down, num_t b);






static inline int num_sgn(num_t a);
static inline int num_cmp(num_t a, num_t b);
static inline int num_cmp_int(num_t a, long int b);
static inline bool num_equal(num_t a, num_t b);
static inline bool num_integer(num_t a);





static inline void num_print(num_t a);
static inline void num_fprint(FILE* stream, num_t a);
static inline int num_snprint(char* s, size_t size, num_t a);





static inline bool num_set_int2(num_t a, long int i, long int j);

static inline bool num_set_mpz(num_t a, mpz_t b);

static inline bool num_set_mpq(num_t a, mpq_t b);

static inline bool num_set_double(num_t a, double b);

static inline bool num_set_mpfr(num_t a, mpfr_t b);

static inline bool num_set_ap_scalar(num_t a, ap_scalar_t* b);


static inline bool int_set_num(long int* a, num_t b);

static inline bool mpz_set_num(mpz_t a, num_t b);

static inline bool mpq_set_num(mpq_t a, num_t b);

static inline bool double_set_num(double* a, num_t b);

static inline bool float_set_num(float* a, num_t b);

static inline bool mpfr_set_num(mpfr_t a, num_t b);

static inline bool ap_scalar_set_num(ap_scalar_t* a, num_t b);


static inline bool mpz_fits_num(mpz_t a);
static inline bool mpq_fits_num(mpq_t a);
static inline bool double_fits_num(double a);
static inline bool mpfr_fits_num(mpfr_t a);
static inline bool num_fits_int(num_t a);
static inline bool num_fits_float(num_t a);
static inline bool num_fits_double(num_t a);
static inline bool num_fits_mpfr(num_t a);



static inline bool num_set_mpz_tmp(num_t a, mpz_t b, mpfr_t mpfr);
static inline bool num_set_mpq_tmp(num_t a, mpq_t b,
       mpz_t q, mpz_t r, mpfr_t mpfr);
static inline bool num_set_double_tmp(num_t a, double k, mpq_t mpq);

static inline bool int_set_num_tmp(long int* a, num_t b,
       mpz_t q, mpz_t r);
static inline bool mpz_set_num_tmp(mpz_t a, num_t b, mpz_t mpz);

static inline bool double_set_num_tmp(double* a, num_t b,
          mpq_t mpq, mpfr_t mpfr);

static inline bool mpq_fits_num_tmp(mpq_t a, mpz_t mpz);
static inline bool double_fits_num_tmp(double k, mpq_t mpq);
# 216 "/home/donquijote/dev/apron/include/num.h"
static inline unsigned char num_serialize_id(void);

static inline size_t num_serialize(void* dst, num_t src);
static inline size_t num_deserialize(num_t dst, const void* src);
static inline size_t num_serialized_size(num_t a);

static inline size_t num_serialize_array(void* dst, num_t* src, size_t size)
{
  size_t i,n=0;
  for (i=0;i<size;i++)
    n += num_serialize((char*)dst+n,src[i]);
  return n;
}

static inline size_t num_deserialize_array(num_t* dst, const void* src, size_t size)
{
  size_t i,n=0;
  for (i=0;i<size;i++)
    n += num_deserialize(dst[i],(const char*)src+n);
  return n;
}

static inline size_t num_serialized_size_array(num_t* src, size_t size)
{
  size_t i,n=0;
  for (i=0;i<size;i++)
    n += num_serialized_size(src[i]);
  return n;
}
# 13 "pk_config.h" 2
# 1 "/home/donquijote/dev/apron/include/numint.h" 1
# 14 "pk_config.h" 2
# 1 "/home/donquijote/dev/apron/include/numrat.h" 1
# 15 "pk_config.h" 2

# 1 "/home/donquijote/dev/apron/include/bound.h" 1
# 14 "/home/donquijote/dev/apron/include/bound.h"
# 1 "/home/donquijote/dev/apron/include/bound_def.h" 1
# 20 "/home/donquijote/dev/apron/include/bound_def.h"
typedef num_t bound_t;
# 40 "/home/donquijote/dev/apron/include/bound_def.h"
static inline bool bound_infty(bound_t a)





{ return numint_sgn(a->d)==0; }





static inline void bound_set_infty(bound_t a, int sgn)





{
  ((void) (0));
  numint_set_int(a->n,sgn>0 ? 1 : -1);
  numint_set_int(a->d,0);
}
# 72 "/home/donquijote/dev/apron/include/bound_def.h"
static inline void bound_init_set_infty(bound_t a, int sgn)
{
  num_init(a);
  bound_set_infty(a,sgn);
}
static inline void bound_swap(bound_t a, bound_t b)
{



  num_swap(a,b);
}

static inline int bound_sgn(bound_t a)
{ return num_sgn(a); }







static inline void bound_set(bound_t a, bound_t b)
{ num_set(a,b); }
static inline void bound_set_array(bound_t* a, bound_t* b, size_t size)
{ num_set_array(a,b,size); }
# 118 "/home/donquijote/dev/apron/include/bound_def.h"
static inline void bound_set_int(bound_t a, long int i)
{ num_set_int(a,i); ; }

static inline void bound_set_num(bound_t a, num_t b)
{ num_set(a,b); ; }





static inline void bound_init(bound_t a)
{ num_init(a); ; }
static inline void bound_init_set_int(bound_t a, long int i)
{ num_init_set_int(a,i); ; }
static inline void bound_clear(bound_t a)
{ num_clear(a); }



static inline void bound_init_array(bound_t* a, size_t size)
{ num_init_array(a,size); }
static inline void bound_init_set(bound_t a, bound_t b)
{ num_init_set(a,b); }
static inline void bound_clear_array(bound_t* a, size_t size)
{ num_clear_array(a,size); }
# 233 "/home/donquijote/dev/apron/include/bound_def.h"
static inline void bound_neg(bound_t a, bound_t b)
{
  if (bound_infty(b)) bound_set_infty(a,-bound_sgn(b));
  else { num_neg(a,b); ; }
}
static inline void bound_abs(bound_t a, bound_t b)
{ num_abs(a,b); }
static inline void bound_add(bound_t a, bound_t b, bound_t c)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else if (bound_infty(c)) bound_set_infty(a,bound_sgn(c));
  else { num_add(a,b,c); ; }
}
static inline void bound_add_uint(bound_t a, bound_t b, unsigned long int c)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_add_uint(a,b,c); ; }
}
static inline void bound_add_num(bound_t a, bound_t b, num_t c)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_add(a,b,c); ; }
}
static inline void bound_sub(bound_t a, bound_t b, bound_t c)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else if (bound_infty(c)) bound_set_infty(a,-bound_sgn(c));
  else { num_sub(a,b,c); ; }
}
static inline void bound_sub_uint(bound_t a, bound_t b, unsigned long int c)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_sub_uint(a,b,c); ; }
}
static inline void bound_sub_num(bound_t a, bound_t b, num_t c)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_sub(a,b,c); ; }
}

static inline void bound_mul(bound_t a, bound_t b, bound_t c)
{
  if (!bound_sgn(b) || !bound_sgn(c)) bound_set_int(a,0);
  else if (bound_infty(b) || bound_infty(c)) bound_set_infty(a,bound_sgn(b)*bound_sgn(c));
  else { num_mul(a,b,c); ; }
}
static inline void bound_mul_num(bound_t a, bound_t b, num_t c)
{
  if (!bound_sgn(b) || !num_sgn(c)) bound_set_int(a,0);
  else if (bound_infty(b)) bound_set_infty(a,bound_sgn(b)*num_sgn(c));
  else { num_mul(a,b,c); ; }
}
static inline void bound_mul_2(bound_t a, bound_t b)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_mul_2(a,b); ; }
}
static inline void bound_div(bound_t a, bound_t b, bound_t c)
{
  if (!bound_sgn(b) || bound_infty(c)) bound_set_int(a,0);
  else if (!bound_sgn(c)) bound_set_infty(a,bound_sgn(b));
  else if (bound_infty(b)) bound_set_infty(a,bound_sgn(b)*bound_sgn(c));
  else { num_div(a,b,c); ; }
}
static inline void bound_div_num(bound_t a, bound_t b, num_t c)
{
  if (!bound_sgn(b)) bound_set_int(a,0);
  else if (!num_sgn(c)) bound_set_infty(a,bound_sgn(b));
  else if (bound_infty(b)) bound_set_infty(a,bound_sgn(b)*num_sgn(c));
  else { num_div(a,b,c); ; }
}
static inline void bound_div_2(bound_t a, bound_t b)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_div_2(a,b); ; }
}
# 321 "/home/donquijote/dev/apron/include/bound_def.h"
static inline void bound_min(bound_t a, bound_t b, bound_t c)
{
  if (bound_infty(b)) if (bound_sgn(b)>0) bound_set(a,c); else bound_set(a,b);
  else if (bound_infty(c)) if (bound_sgn(c)>0) bound_set(a,b); else bound_set(a,c);
  else { num_min(a,b,c); ; }
}
static inline void bound_max(bound_t a, bound_t b, bound_t c)
{
  if (bound_infty(b)) if (bound_sgn(b)>0) bound_set(a,b); else bound_set(a,c);
  else if (bound_infty(c)) if (bound_sgn(c)>0) bound_set(a,c); else bound_set(a,b);
  else { num_max(a,b,c); ; }
}



static inline void bound_floor(bound_t a, bound_t b)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_floor(a,b); ; }
}
static inline void bound_ceil(bound_t a, bound_t b)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_ceil(a,b); ; }
}
static inline void bound_trunc(bound_t a, bound_t b)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_trunc(a,b); ; }
}
static inline void bound_sqrt(bound_t up, bound_t down, bound_t b)
{
  if (bound_infty(b)) {
    bound_set_infty(up,1);
    bound_set_infty(down,1);
  }
  else {
    num_sqrt(up,down,b);
    ;
    ;
  }
}

static inline void bound_to_float(bound_t a, bound_t b)
{
  if (bound_infty(b) || !num_fits_float(b))
    bound_set_infty(a,bound_sgn(b));
  else {
    double d;
    double_set_num(&d,b);
    num_set_double(a,(double)((float)d));
    ;
  }
}
static inline void bound_to_double(bound_t a, bound_t b)
{
  if (bound_infty(b) || !num_fits_double(b))
    bound_set_infty(a,bound_sgn(b));
  else {
    double d;
    double_set_num(&d,b);
    num_set_double(a,d);
    ;
  }
}

static inline void bound_mul_2exp(bound_t a, bound_t b, int c)
{
  if (bound_infty(b)) bound_set_infty(a,bound_sgn(b));
  else { num_mul_2exp(a,b,c); }
}
# 413 "/home/donquijote/dev/apron/include/bound_def.h"
static inline int bound_cmp(bound_t a, bound_t b)
{
  if (bound_infty(a)){
    if (bound_infty(b)) return (bound_sgn(a)-bound_sgn(b))/2;
    else return bound_sgn(a);
  } else {
    if (bound_infty(b)) return -bound_sgn(b);
    else return num_cmp(a,b);
  }
}
static inline int bound_cmp_int(bound_t a, long int b)
{
  if (bound_infty(a)) return bound_sgn(a);
  else return num_cmp_int(a,b);
}
static inline int bound_cmp_num(bound_t a, num_t b)
{
  if (bound_infty(a)) return bound_sgn(a);
  else return num_cmp(a,b);
}
static inline bool bound_equal(bound_t a, bound_t b)
{
  if (bound_infty(a)){
    return bound_infty(b) && bound_sgn(a)==bound_sgn(b);
  } else {
    if (bound_infty(b)) return false;
    else return num_equal(a,b);
  }
}
static inline int bound_hash(bound_t a)
{ if (bound_infty(a))
    return bound_sgn(a)>0 ? 2147483647 : (-2147483647 - 1);
  else {
    long int hash;
    int_set_num(&hash,a);
    return hash;
  }
}







static inline void bound_fprint(FILE* stream, bound_t a)
{
  if (bound_infty(a)) fprintf(stream,"%coo",bound_sgn(a)>0 ? '+' : '-');
  else num_fprint(stream,a);
}
static inline void bound_print(bound_t a)
{
  bound_fprint(stdout,a);
}
static inline int bound_snprint(char* s, size_t size, bound_t a)
{
  if (bound_infty(a)) return snprintf(s,size,"%coo",bound_sgn(a)>0 ? '+' : '-');
  else return num_snprint(s,size,a);
}







static inline
bool bound_set_ap_scalar(bound_t a, ap_scalar_t* b)
{
  switch (b->discr){
  case AP_SCALAR_MPQ:
    if ((((&((b->val.mpq)->_mp_den)))->_mp_size < 0 ? -1 : ((&((b->val.mpq)->_mp_den)))->_mp_size > 0)==0){
      bound_set_infty(a,(((&((b->val.mpq)->_mp_num)))->_mp_size < 0 ? -1 : ((&((b->val.mpq)->_mp_num)))->_mp_size > 0));
      return true;
    }
    else {
      ;
      return num_set_mpq(a,b->val.mpq);
    }
    break;
  case AP_SCALAR_DOUBLE:
    if ((sizeof (b->val.dbl) == sizeof (float) ? __isinff (b->val.dbl) : sizeof (b->val.dbl) == sizeof (double) ? __isinf (b->val.dbl) : __isinfl (b->val.dbl))) {
      if (b->val.dbl>0) bound_set_infty(a,1);
      else bound_set_infty(a,-1);
      return true;
    }
    else {
      ;
      return num_set_double(a,b->val.dbl);
    }
    break;
  case AP_SCALAR_MPFR:
    if (((b->val.mpfr)->_mpfr_exp == ((mp_exp_t)((~((~(unsigned long)0)>>1))+3)))) {
      if (((b->val.mpfr)->_mpfr_exp < ((mp_exp_t)((~((~(unsigned long)0)>>1))+3)) ? (((b->val.mpfr)->_mpfr_exp == ((mp_exp_t)((~((~(unsigned long)0)>>1))+2))) ? mpfr_set_erangeflag () : (void) 0), 0 : ((b->val.mpfr)->_mpfr_sign))>0) bound_set_infty(a,1);
      else bound_set_infty(a,-1);
      return true;
    }
    else {
      ;
      return num_set_mpfr(a,b->val.mpfr);
    }
    break;
  default:
    abort();
    return false;
  }
}

static inline bool ap_scalar_set_bound(ap_scalar_t* a, bound_t b)
{
  ap_scalar_reinit(a,AP_SCALAR_MPQ);
  if (bound_infty(b)) { ap_scalar_set_infty(a,bound_sgn(b)); return true; }
  else {
    switch (AP_SCALAR_MPQ) {
    case AP_SCALAR_DOUBLE: return double_set_num(&a->val.dbl,b);
    case AP_SCALAR_MPQ: return mpq_set_num(a->val.mpq,b);
    case AP_SCALAR_MPFR: return mpfr_set_num(a->val.mpfr,b);
    default: abort(); return false;
    }
  }
}





static inline size_t bound_serialize(void* dst, bound_t src)
{

  return num_serialize(dst,src);




}

static inline size_t bound_deserialize(bound_t dst, const void* src)
{

  return num_deserialize(dst,src);




}

static inline size_t bound_serialized_size(bound_t a)
{

  return num_serialized_size(a);



}

static inline size_t bound_serialize_array(void* dst, bound_t* src, size_t size)
{
  size_t i,n=0;
  for (i=0;i<size;i++)
    n += bound_serialize((char*)dst+n,src[i]);
  return n;
}

static inline size_t bound_deserialize_array(bound_t* dst, const void* src, size_t size)
{
  size_t i,n=0;
  for (i=0;i<size;i++)
    n += bound_deserialize(dst[i],(const char*)src+n);
  return n;
}

static inline size_t bound_serialized_size_array(bound_t* src, size_t size)
{
  size_t i,n=0;
  for (i=0;i<size;i++)
    n += bound_serialized_size(src[i]);
  return n;
}
# 15 "/home/donquijote/dev/apron/include/bound.h" 2





static inline bool bound_infty(bound_t a);
# 29 "/home/donquijote/dev/apron/include/bound.h"
static inline void bound_set(bound_t a, bound_t b);
static inline void bound_set_array(bound_t* a, bound_t* b, size_t size);
static inline void bound_set_int(bound_t a, long int i);
static inline void bound_set_num(bound_t a, num_t b);
static inline void bound_set_infty(bound_t a, int sgn);
static inline void bound_swap(bound_t a, bound_t b);





static inline void bound_init(bound_t a);
static inline void bound_init_array(bound_t* a, size_t size);

static inline void bound_init_set(bound_t a, bound_t b);
static inline void bound_init_set_int(bound_t a, long int i);
static inline void bound_init_set_infty(bound_t a, int sgn);

static inline void bound_clear(bound_t a);
static inline void bound_clear_array(bound_t* a, size_t size);
# 73 "/home/donquijote/dev/apron/include/bound.h"
static inline void bound_neg(bound_t a, bound_t b);
static inline void bound_abs(bound_t a, bound_t b);
static inline void bound_add(bound_t a, bound_t b, bound_t c);
static inline void bound_add_uint(bound_t a, bound_t b, unsigned long int c);
static inline void bound_add_num(bound_t a, bound_t b, num_t c);
static inline void bound_sub(bound_t a, bound_t b, bound_t c);
static inline void bound_sub_uint(bound_t a, bound_t b, unsigned long int c);
static inline void bound_sub_num(bound_t a, bound_t b, num_t c);
static inline void bound_mul(bound_t a, bound_t b, bound_t c);
static inline void bound_mul_num(bound_t a, bound_t b, num_t c);
static inline void bound_mul_2(bound_t a, bound_t b);
static inline void bound_div(bound_t a, bound_t b, bound_t c);
static inline void bound_div_num(bound_t a, bound_t b, num_t c);
static inline void bound_div_2(bound_t a, bound_t b);
static inline void bound_min(bound_t a, bound_t b, bound_t c);
static inline void bound_max(bound_t a, bound_t b, bound_t c);
static inline void bound_mul_2exp(bound_t a, bound_t b, int c);
static inline void bound_floor(bound_t a, bound_t b);
static inline void bound_ceil(bound_t a, bound_t b);
static inline void bound_trunc(bound_t a, bound_t b);
static inline void bound_sqrt(bound_t up, bound_t down, bound_t b);







static inline void bound_to_float(bound_t a, bound_t b);
static inline void bound_to_double(bound_t a, bound_t b);





static inline int bound_sgn(bound_t a);
static inline int bound_cmp(bound_t a, bound_t b);
static inline int bound_cmp_int(bound_t a, long int b);
static inline int bound_cmp_num(bound_t a, num_t b);
static inline bool bound_equal(bound_t a, bound_t b);
static inline int bound_hash(bound_t a);





static inline void bound_print(bound_t a);
static inline void bound_fprint(FILE* stream, bound_t a);
static inline int bound_snprint(char* s, size_t size, bound_t a);





static inline bool bound_set_ap_scalar(bound_t a, ap_scalar_t* b);



static inline bool ap_scalar_set_bound(ap_scalar_t* a, bound_t b);
# 145 "/home/donquijote/dev/apron/include/bound.h"
static inline size_t bound_serialize(void* dst, bound_t src);
static inline size_t bound_deserialize(bound_t dst, const void* src);
static inline size_t bound_serialized_size(bound_t a);

static inline size_t bound_serialize_array(void* dst, bound_t* src, size_t size);
static inline size_t bound_deserialize_array(bound_t* dst, const void* src, size_t size);
static inline size_t bound_serialized_size_array(bound_t* src, size_t size);
# 17 "pk_config.h" 2
# 1 "/home/donquijote/dev/apron/include/itv.h" 1
# 9 "/home/donquijote/dev/apron/include/itv.h"
# 1 "/home/donquijote/dev/apron/include/num.h" 1
# 10 "/home/donquijote/dev/apron/include/itv.h" 2
# 1 "/home/donquijote/dev/apron/include/bound.h" 1
# 11 "/home/donquijote/dev/apron/include/itv.h" 2
# 1 "/home/donquijote/dev/apron/include/itv_config.h" 1
# 12 "/home/donquijote/dev/apron/include/itv.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_coeff.h" 1
# 11 "/home/donquijote/dev/apron/include/ap_coeff.h"
# 1 "/usr/include/assert.h" 1 3 4
# 12 "/home/donquijote/dev/apron/include/ap_coeff.h" 2





# 1 "/home/donquijote/dev/apron/include/ap_interval.h" 1
# 11 "/home/donquijote/dev/apron/include/ap_interval.h"
# 1 "/usr/include/assert.h" 1 3 4
# 12 "/home/donquijote/dev/apron/include/ap_interval.h" 2
# 22 "/home/donquijote/dev/apron/include/ap_interval.h"
typedef struct ap_interval_t {
  ap_scalar_t* inf;
  ap_scalar_t* sup;
} ap_interval_t;




ap_interval_t* ap_interval_alloc(void);

void ap_interval_reinit(ap_interval_t* interval, ap_scalar_discr_t ap_scalar_discr);

void ap_interval_free(ap_interval_t* interval);

void ap_interval_fprint(FILE* stream, ap_interval_t* a);
static inline
void ap_interval_print(ap_interval_t* a)
{ ap_interval_fprint(stdout,a); }

static inline
void ap_interval_swap(ap_interval_t* a, ap_interval_t* b)
{ ap_interval_t t = *a; *a = *b; *b = t; }






void ap_interval_set(ap_interval_t* interval, ap_interval_t* interval2);

void ap_interval_set_scalar(ap_interval_t* interval, ap_scalar_t* inf, ap_scalar_t* sup);
void ap_interval_set_mpq(ap_interval_t* interval, mpq_t inf, mpq_t sup);
void ap_interval_set_int(ap_interval_t* interval, long int inf, long int sup);
void ap_interval_set_frac(ap_interval_t* interval, long int numinf, unsigned long int deninf, long int numsup, unsigned long int densup);
void ap_interval_set_double(ap_interval_t* interval, double inf, double sup);
void ap_interval_set_mpfr(ap_interval_t* interval, mpfr_t inf, mpfr_t sup);
# 66 "/home/donquijote/dev/apron/include/ap_interval.h"
void ap_interval_set_top(ap_interval_t* interval);


void ap_interval_set_bottom(ap_interval_t* interval);







ap_interval_t* ap_interval_alloc_set(ap_interval_t* interval);






bool ap_interval_is_top(ap_interval_t* interval);

bool ap_interval_is_bottom(ap_interval_t* interval);

bool ap_interval_is_leq(ap_interval_t* i1, ap_interval_t* i2);

int ap_interval_cmp(ap_interval_t* i1, ap_interval_t* i2);







bool ap_interval_equal(ap_interval_t* i1, ap_interval_t* i2);






void ap_interval_neg(ap_interval_t* a, ap_interval_t* b);

long ap_interval_hash(ap_interval_t* itv);






ap_interval_t** ap_interval_array_alloc(size_t size);

void ap_interval_array_free(ap_interval_t** array, size_t size);
# 18 "/home/donquijote/dev/apron/include/ap_coeff.h" 2





typedef enum ap_coeff_discr_t {
  AP_COEFF_SCALAR,
  AP_COEFF_INTERVAL
} ap_coeff_discr_t;


typedef struct ap_coeff_t {
  ap_coeff_discr_t discr;
  union {
    ap_scalar_t* scalar;
    ap_interval_t* interval;
  } val;
} ap_coeff_t;





ap_coeff_t* ap_coeff_alloc(ap_coeff_discr_t ap_coeff_discr);

void ap_coeff_reinit(ap_coeff_t* coeff, ap_coeff_discr_t ap_coeff_discr, ap_scalar_discr_t ap_scalar_discr);

void ap_coeff_free(ap_coeff_t* a);

void ap_coeff_fprint(FILE* stream, ap_coeff_t* a);
static inline
void ap_coeff_print(ap_coeff_t* a)
{ ap_coeff_fprint(stdout,a); }


void ap_coeff_reduce(ap_coeff_t* coeff);

static inline
void ap_coeff_swap(ap_coeff_t* a, ap_coeff_t* b)
{ ap_coeff_t t = *a; *a = *b; *b = t; }






void ap_coeff_set(ap_coeff_t* a, ap_coeff_t* b);

void ap_coeff_set_scalar(ap_coeff_t* coeff, ap_scalar_t* scalar);
void ap_coeff_set_scalar_mpq(ap_coeff_t* coeff, mpq_t mpq);
void ap_coeff_set_scalar_int(ap_coeff_t* coeff, long int num);
void ap_coeff_set_scalar_frac(ap_coeff_t* coeff, long int num, unsigned long int den);
void ap_coeff_set_scalar_double(ap_coeff_t* coeff, double num);
void ap_coeff_set_scalar_mpfr(ap_coeff_t* coeff, mpfr_t mpfr);
# 80 "/home/donquijote/dev/apron/include/ap_coeff.h"
void ap_coeff_set_interval(ap_coeff_t* coeff, ap_interval_t* itv);
void ap_coeff_set_interval_scalar(ap_coeff_t* coeff, ap_scalar_t* inf, ap_scalar_t* sup);
void ap_coeff_set_interval_mpq(ap_coeff_t* coeff, mpq_t inf, mpq_t sup);
void ap_coeff_set_interval_int(ap_coeff_t* coeff, long int inf, long int sup);
void ap_coeff_set_interval_frac(ap_coeff_t* coeff,
                                  long int numinf, unsigned long int deninf,
                                  long int numsup, unsigned long int densup);
void ap_coeff_set_interval_double(ap_coeff_t* coeff, double inf, double sup);
void ap_coeff_set_interval_top(ap_coeff_t* coeff);
void ap_coeff_set_interval_mpfr(ap_coeff_t* coeff, mpfr_t inf, mpfr_t sup);
# 103 "/home/donquijote/dev/apron/include/ap_coeff.h"
ap_coeff_t* ap_coeff_alloc_set(ap_coeff_t* coeff);
ap_coeff_t* ap_coeff_alloc_set_scalar(ap_scalar_t* scalar);
ap_coeff_t* ap_coeff_alloc_set_interval(ap_interval_t* interval);





int ap_coeff_cmp(ap_coeff_t* coeff1, ap_coeff_t* coeff2);





bool ap_coeff_equal(ap_coeff_t* coeff1, ap_coeff_t* coeff2);


bool ap_coeff_zero(ap_coeff_t* coeff);





void ap_coeff_neg(ap_coeff_t* a, ap_coeff_t* b);


long ap_coeff_hash(ap_coeff_t* coeff);





void ap_coeff_init(ap_coeff_t* coeff, ap_coeff_discr_t ap_coeff_discr);
void ap_coeff_init_set(ap_coeff_t* coeff, ap_coeff_t* coeff2);
void ap_coeff_clear(ap_coeff_t* coeff);
# 13 "/home/donquijote/dev/apron/include/itv.h" 2

# 1 "/home/donquijote/dev/apron/include/itv_fun.h" 1




# 1 "/home/donquijote/dev/apron/include/num_name.h" 1
# 6 "/home/donquijote/dev/apron/include/itv_fun.h" 2
# 15 "/home/donquijote/dev/apron/include/itv.h" 2
# 23 "/home/donquijote/dev/apron/include/itv.h"
typedef struct __itv_struct {
  bound_t inf;
  bound_t sup;
} __itv_struct;
typedef __itv_struct itv_t[1];
typedef __itv_struct* itv_ptr;






typedef struct {
  itv_t ulp;
  itv_t min;
  itv_t min_normal;
  itv_t max;
  itv_t max_exact;
} float_const;

typedef struct itv_internal_t {
  num_t canonicalize_num;
  bound_t muldiv_bound;
  bound_t mul_bound;
  bound_t sqrt_bound;
  bound_t linear_bound;
  bound_t linear_bound2;
  bound_t linear_bound3;
  itv_t mul_itv;
  itv_t mul_itv2;
  ap_scalar_t* ap_conversion_scalar;
  bound_t ap_conversion_bound;
  itv_t eval_itv;
  itv_t eval_itv2;
  itv_t eval_itv3;
  num_t quasi_num;
  itv_t boxize_lincons_itv;
  itv_t boxize_lincons_eval;
  bound_t boxize_lincons_bound;
  float_const cst_half, cst_single, cst_double, cst_extended, cst_quad;
  itv_t itv_half;
  mpz_t reduce_lincons_gcd;
  mpz_t reduce_lincons_mpz;
} itv_internal_t;


static inline itv_internal_t* itv_internal_alloc(void);

static inline void itv_internal_free(itv_internal_t* intern);


static inline void itv_internal_init(itv_internal_t* intern);
static inline void itv_internal_clear(itv_internal_t* intern);







static inline void itv_init(itv_t a);
static inline void itv_init_array(itv_t* a, size_t size);
static inline void itv_init_set(itv_t a, itv_t b);
static inline void itv_clear(itv_t a);
static inline void itv_clear_array(itv_t* a, size_t size);
static inline itv_t* itv_array_alloc(size_t size);
static inline void itv_array_free(itv_t* a, size_t size);


static inline void itv_set(itv_t a, itv_t b);
static inline void itv_set_num(itv_t a, num_t b);
static inline void itv_set_num2(itv_t a, num_t b, num_t c);
static inline void itv_set_int(itv_t a, long int b);
static inline void itv_set_int2(itv_t a, long int b, long int c);
static inline void itv_set_bottom(itv_t a);
static inline void itv_set_top(itv_t a);
static inline void itv_swap(itv_t a, itv_t b);


static inline void itv_set_unit_num(itv_t a, num_t b);
static inline void itv_set_unit_bound(itv_t a, bound_t b);


static inline void itv_enlarge_bound(itv_t a, itv_t b, bound_t c);


static inline bool itv_canonicalize(itv_internal_t* intern, itv_t a, bool integer);





static inline bool itv_is_top(itv_t a);
static inline bool itv_is_bottom(itv_internal_t* intern, itv_t a);

static inline bool itv_is_point(itv_internal_t* intern, itv_t a);

static inline bool itv_is_zero(itv_t a);

static inline bool itv_is_leq(itv_t a, itv_t b);

static inline bool itv_is_eq(itv_t a, itv_t b);

static inline int itv_hash(itv_t a);

static inline bool itv_is_pos(itv_t a);
static inline bool itv_is_neg(itv_t a);


static inline bool itv_is_int(itv_internal_t* intern, itv_t a);


static inline void itv_range_abs(bound_t a, itv_t b);

static inline void itv_range_rel(itv_internal_t* intern, bound_t a, itv_t b);



static inline bool itv_meet(itv_internal_t* intern, itv_t a, itv_t b, itv_t c);

static inline void itv_join(itv_t a, itv_t b, itv_t c);

static inline void itv_widening(itv_t a, itv_t b, itv_t c);



static inline void itv_add(itv_t a, itv_t b, itv_t c);
static inline void itv_sub(itv_t a, itv_t b, itv_t c);
static inline void itv_neg(itv_t a, itv_t b);
static inline void itv_mul(itv_internal_t* intern, itv_t a, itv_t b, itv_t c);
static inline void itv_div(itv_internal_t* intern, itv_t a, itv_t b, itv_t c);
static inline void itv_add_num(itv_t a, itv_t b, num_t c);
static inline void itv_sub_num(itv_t a, itv_t b, num_t c);
static inline void itv_mul_num(itv_t a, itv_t b, num_t c);
static inline void itv_div_num(itv_t a, itv_t b, num_t c);
static inline void itv_add_bound(itv_t a, itv_t b, bound_t c);
static inline void itv_sub_bound(itv_t a, itv_t b, bound_t c);
static inline void itv_mul_bound(itv_t a, itv_t b, bound_t c);
static inline void itv_div_bound(itv_t a, itv_t b, bound_t c);
static inline bool itv_sqrt(itv_internal_t* intern, itv_t a, itv_t b);
static inline void itv_abs(itv_t a, itv_t b);
static inline void itv_mul_2exp(itv_t a, itv_t b, int c);

static inline void itv_magnitude(bound_t a, itv_t b);


static inline void itv_mod(itv_internal_t* intern, itv_t a, itv_t b, itv_t c, bool is_int);



static inline void itv_ceil(itv_t a, itv_t b);
static inline void itv_floor(itv_t a, itv_t b);
static inline void itv_trunc(itv_t a, itv_t b);
static inline void itv_to_int(itv_t a, itv_t b);


static inline void itv_to_float(itv_t a, itv_t b);
static inline void itv_to_double(itv_t a, itv_t b);


static inline int itv_snprint(char* s, size_t size, itv_t a);
static inline void itv_fprint(FILE* stream, itv_t a);
static inline void itv_print(itv_t a);


static inline bool itv_set_ap_scalar(itv_internal_t* intern, itv_t a, ap_scalar_t* b);



static inline bool itv_set_ap_interval(itv_internal_t* intern, itv_t a, ap_interval_t* b);

static inline bool itv_set_ap_coeff(itv_internal_t* intern, itv_t a, ap_coeff_t* b);


static inline bool ap_interval_set_itv(itv_internal_t* intern, ap_interval_t* a, itv_t b);


static inline bool ap_coeff_set_itv(itv_internal_t* intern, ap_coeff_t* a, itv_t b);


static inline bool itv_array_set_ap_interval_array(itv_internal_t* intern, itv_t** ptitv, ap_interval_t** array, size_t size);
# 212 "/home/donquijote/dev/apron/include/itv.h"
void itv_internal_init_Rll(itv_internal_t* intern);
void itv_internal_clear_Rll(itv_internal_t* intern);
itv_internal_t* itv_internal_alloc_Rll(void);
void itv_internal_free_Rll(itv_internal_t* intern);
bool itv_canonicalize_Rll(itv_internal_t* intern, itv_t a, bool integer);
void itv_mul_num_Rll(itv_t a, itv_t b, num_t c);
void itv_div_num_Rll(itv_t a, itv_t b, num_t c);
void itv_div_num_Rll(itv_t a, itv_t b, num_t c);
void itv_mul_bound_Rll(itv_t a, itv_t b, bound_t c);
void itv_div_bound_Rll(itv_t a, itv_t b, bound_t c);
void itv_sub_Rll(itv_t a, itv_t b, itv_t c);
void itv_neg_Rll(itv_t a, itv_t b);
void itv_mul_Rll(itv_internal_t* intern, itv_t a, itv_t b, itv_t c);
void itv_div_Rll(itv_internal_t* intern, itv_t a, itv_t b, itv_t c);
bool itv_sqrt_Rll(itv_internal_t* intern, itv_t a, itv_t b);
void itv_abs_Rll(itv_t a, itv_t b);
void itv_mod_Rll(itv_internal_t* intern, itv_t a, itv_t b, itv_t c, bool is_int);
void itv_fprint_Rll(FILE* stream, itv_t a);
int itv_snprint_Rll(char* s, size_t size, itv_t a);

bool itv_set_ap_scalar_Rll(itv_internal_t* intern, itv_t a, ap_scalar_t* b);
bool itv_set_ap_interval_Rll(itv_internal_t* intern, itv_t a, ap_interval_t* b);
bool itv_set_ap_coeff_Rll(itv_internal_t* intern, itv_t itv, ap_coeff_t* coeff);
bool ap_interval_set_itv_Rll(itv_internal_t* intern, ap_interval_t* a, itv_t b);
bool ap_coeff_set_itv_Rll(itv_internal_t* intern, ap_coeff_t* a, itv_t b);
bool itv_array_set_ap_interval_array_Rll(itv_internal_t* intern, itv_t** ptitv, ap_interval_t** array, size_t size);

static inline void itv_internal_init(itv_internal_t* intern)
{ itv_internal_init_Rll(intern); }

static inline void itv_internal_clear(itv_internal_t* intern)
{ itv_internal_clear_Rll(intern); }

static inline itv_internal_t* itv_internal_alloc(void)
{ return itv_internal_alloc_Rll(); }

static inline void itv_internal_free(itv_internal_t* intern)
{ itv_internal_free_Rll(intern); }

static inline bool itv_canonicalize(itv_internal_t* intern,
 itv_t a, bool integer)
{ return itv_canonicalize_Rll(intern,a,integer); }

static inline void itv_mul_num(itv_t a, itv_t b, num_t c)
{ itv_mul_num_Rll(a,b,c); }

static inline void itv_div_num(itv_t a, itv_t b, num_t c)
{ itv_div_num_Rll(a,b,c); }

static inline void itv_mul_bound(itv_t a, itv_t b, bound_t c)
{ itv_mul_bound_Rll(a,b,c); }

static inline void itv_div_bound(itv_t a, itv_t b, bound_t c)
{ itv_div_bound_Rll(a,b,c); }

static inline void itv_sub(itv_t a, itv_t b, itv_t c)
{ itv_sub_Rll(a,b,c); }

static inline void itv_neg(itv_t a, itv_t b)
{ itv_neg_Rll(a,b); }

static inline void itv_mul(itv_internal_t* intern, itv_t a, itv_t b, itv_t c)
{ itv_mul_Rll(intern,a,b,c); }

static inline void itv_div(itv_internal_t* intern, itv_t a, itv_t b, itv_t c)
{ itv_div_Rll(intern,a,b,c); }

static inline void itv_fprint(FILE* stream, itv_t a)
{ itv_fprint_Rll(stream,a); }

static inline int itv_snprint(char* s, size_t size, itv_t a)
{ return itv_snprint_Rll(s,size,a); }

static inline bool itv_set_ap_scalar(itv_internal_t* intern, itv_t a, ap_scalar_t* b)
{ return itv_set_ap_scalar_Rll(intern,a,b); }

static inline bool itv_set_ap_interval(itv_internal_t* intern, itv_t a, ap_interval_t* b)
{ return itv_set_ap_interval_Rll(intern,a,b); }

static inline bool itv_set_ap_coeff(itv_internal_t* intern, itv_t itv, ap_coeff_t* coeff)
{ return itv_set_ap_coeff_Rll(intern,itv,coeff); }

static inline bool ap_interval_set_itv(itv_internal_t* intern, ap_interval_t* a, itv_t b)
{ return ap_interval_set_itv_Rll(intern,a,b); }

static inline bool ap_coeff_set_itv(itv_internal_t* intern, ap_coeff_t* a, itv_t b)
{ return ap_coeff_set_itv_Rll(intern,a,b); }

static inline bool itv_array_set_ap_interval_array(itv_internal_t* intern, itv_t** ptitv, ap_interval_t** array, size_t size)
{ return itv_array_set_ap_interval_array_Rll(intern,ptitv,array,size); }

static inline void itv_init(itv_t a)
{
  bound_init(a->inf);
  bound_init(a->sup);
}
static inline void itv_init_array(itv_t* a, size_t size)
{
  size_t i;
  for (i=0; i<size; i++) itv_init(a[i]);
}
static inline void itv_init_set(itv_t a, itv_t b)
{
  bound_init_set(a->inf,b->inf);
  bound_init_set(a->sup,b->sup);
}
static inline void itv_clear(itv_t a)
{
  bound_clear(a->inf);
  bound_clear(a->sup);
}
static inline void itv_clear_array(itv_t* a, size_t size)
{




}
static inline itv_t* itv_array_alloc(size_t size)
{
  itv_t* res = (itv_t*)malloc(size*sizeof(itv_t));
  itv_init_array(res,size);
  return res;
}
static inline void itv_array_free(itv_t* a, size_t size)
{
  itv_clear_array(a,size);
  free(a);
}

static inline void itv_set(itv_t a, itv_t b)
{
  bound_set(a->inf,b->inf);
  bound_set(a->sup,b->sup);
}
static inline void itv_set_num(itv_t a, num_t b)
{
  bound_set_num(a->sup,b);
  bound_neg(a->inf,a->sup);
}
static inline void itv_set_num2(itv_t a, num_t b, num_t c)
{
  bound_set_num(a->sup,b);
  num_neg(c,c);
  bound_set_num(a->inf,c);
  num_neg(c,c);
}
static inline void itv_set_unit_num(itv_t a, num_t b)
{
  bound_set_num(a->inf,b);
  bound_set_num(a->sup,b);
}
static inline void itv_set_unit_bound(itv_t a, bound_t b)
{
  bound_set(a->inf,b);
  bound_set(a->sup,b);
}
static inline void itv_enlarge_bound(itv_t a, itv_t b, bound_t c)
{
  bound_add(a->inf,b->inf,c);
  bound_add(a->sup,b->sup,c);
}
static inline void itv_set_int(itv_t a, long int b)
{
  bound_set_int(a->inf,-b);
  bound_set_int(a->sup,b);
}
static inline void itv_set_int2(itv_t a, long int b, long int c)
{
  bound_set_int(a->inf,-b);
  bound_set_int(a->sup,c);
}
static inline void itv_set_bottom(itv_t a)
{
  bound_set_int(a->inf,-1);
  bound_set_int(a->sup,-1);
}
static inline void itv_set_top(itv_t a)
{
  bound_set_infty(a->inf,1);
  bound_set_infty(a->sup,1);
}
static inline void itv_swap(itv_t a, itv_t b)
{ itv_t t; *t=*a;*a=*b;*b=*t; }

static inline bool itv_is_top(itv_t a)
{
  return bound_infty(a->inf) && bound_infty(a->sup);
}
static inline bool itv_is_bottom(itv_internal_t* intern, itv_t a)
{
  return itv_canonicalize(intern, a, false);
}
static inline bool itv_is_point(itv_internal_t* intern, itv_t a)
{
  if (!bound_infty(a->inf) && !bound_infty(a->sup)){
    num_neg(intern->canonicalize_num,a->inf);
    return num_equal(intern->canonicalize_num,a->sup);
  }
  else
    return false;
}
static inline bool itv_is_zero(itv_t a)
{
  return bound_sgn(a->inf)==0 && bound_sgn(a->sup)==0;
}
static inline bool itv_is_leq(itv_t a, itv_t b)
{
  return bound_cmp(a->sup,b->sup)<=0 && bound_cmp(a->inf,b->inf)<=0;
}
static inline bool itv_is_eq(itv_t a, itv_t b)
{
  return bound_equal(a->sup,b->sup) && bound_equal(a->inf,b->inf);
}
static inline int itv_hash(itv_t a)
{
  return (5*bound_hash(a->inf) + 7*bound_hash(a->sup));
}
static inline bool itv_meet(itv_internal_t* intern, itv_t a, itv_t b, itv_t c)
{
  bound_min(a->sup,b->sup,c->sup);
  bound_min(a->inf,b->inf,c->inf);
  return itv_canonicalize(intern,a,false);
}
static inline void itv_join(itv_t a, itv_t b, itv_t c)
{
  bound_max(a->sup,b->sup,c->sup);
  bound_max(a->inf,b->inf,c->inf);
}
static inline void bound_widening(bound_t a, bound_t b, bound_t c)
{
  if (bound_infty(c) ||
      bound_cmp(b,c)<0){
    bound_set_infty(a,+1);
  } else {
    bound_set(a,b);
  }
}
static inline void itv_widening(itv_t a, itv_t b, itv_t c)
{
  bound_widening(a->sup,b->sup,c->sup);
  bound_widening(a->inf,b->inf,c->inf);
}
static inline void itv_add(itv_t a, itv_t b, itv_t c)
{
  bound_add(a->sup,b->sup,c->sup);
  bound_add(a->inf,b->inf,c->inf);
}
static inline void itv_add_num(itv_t a, itv_t b, num_t c)
{
  bound_add_num(a->sup,b->sup,c);
  bound_sub_num(a->inf,b->inf,c);
}
static inline void itv_sub_num(itv_t a, itv_t b, num_t c)
{
  bound_sub_num(a->sup,b->sup,c);
  bound_add_num(a->inf,b->inf,c);
}
static inline void itv_add_bound(itv_t a, itv_t b, bound_t c)
{
  bound_add(a->sup,b->sup,c);
  bound_sub(a->inf,b->inf,c);
}
static inline void itv_sub_bound(itv_t a, itv_t b, bound_t c)
{
  bound_sub(a->sup,b->sup,c);
  bound_add(a->inf,b->inf,c);
}
static inline bool itv_sqrt(itv_internal_t* intern, itv_t a, itv_t b)
{ return itv_sqrt_Rll(intern,a,b); }

static inline void itv_abs(itv_t a, itv_t b)
{ itv_abs_Rll(a,b); }

static inline void itv_mod(itv_internal_t* intern, itv_t a, itv_t b, itv_t c, bool is_int)
{ itv_mod_Rll(intern,a,b,c,is_int); }

static inline void itv_print(itv_t itv)
{ itv_fprint(stdout,itv); }

static inline void itv_ceil(itv_t a, itv_t b)
{ bound_ceil(a->sup,b->sup); bound_floor(a->inf,b->inf); }

static inline void itv_floor(itv_t a, itv_t b)
{ bound_floor(a->sup,b->sup); bound_ceil(a->inf,b->inf); }

static inline void itv_trunc(itv_t a, itv_t b)
{ bound_trunc(a->sup,b->sup); bound_trunc(a->inf,b->inf); }

static inline void itv_to_int(itv_t a, itv_t b)
{ bound_ceil(a->sup,b->sup); bound_ceil(a->inf,b->inf); }

static inline void itv_to_float(itv_t a, itv_t b)
{ bound_to_float(a->sup,b->sup); bound_to_float(a->inf,b->inf); }

static inline void itv_to_double(itv_t a, itv_t b)
{ bound_to_double(a->sup,b->sup); bound_to_double(a->inf,b->inf); }

static inline void itv_mul_2exp(itv_t a, itv_t b, int c)
{ bound_mul_2exp(a->sup,b->sup,c); bound_mul_2exp(a->inf,b->inf,c); }

static inline bool itv_is_pos(itv_t a)
{ return (bound_sgn(a->inf)<=0); }

static inline bool itv_is_neg(itv_t a)
{ return (bound_sgn(a->sup)<=0); }

static inline void itv_magnitude(bound_t a, itv_t b)
{
  if (bound_sgn(b->inf)<=0) bound_set(a,b->sup);
  else if (bound_sgn(b->sup)<=0) bound_set(a,b->inf);
  else bound_max(a,b->inf,b->sup);
}

static inline void itv_range_abs(bound_t a, itv_t b)
{ bound_add(a,b->sup,b->inf); }

static inline void itv_range_rel(itv_internal_t* intern, bound_t a, itv_t b)
{
  bound_add(a,b->sup,b->inf);
  if (!bound_infty(a)) {
    itv_magnitude(intern->muldiv_bound,b);
    bound_div_2(intern->muldiv_bound,intern->muldiv_bound);
    bound_div(a,a,intern->muldiv_bound);
  }
}

static inline bool itv_is_int(itv_internal_t* intern, itv_t a)
{
  bound_trunc(intern->muldiv_bound,a->sup);
  if (bound_cmp(intern->muldiv_bound,a->sup)) return false;
  bound_trunc(intern->muldiv_bound,a->inf);
  return !bound_cmp(intern->muldiv_bound,a->inf);
}
# 18 "pk_config.h" 2
# 1 "/home/donquijote/dev/apron/include/itv_linexpr.h" 1







# 1 "/home/donquijote/dev/apron/include/itv.h" 1
# 9 "/home/donquijote/dev/apron/include/itv_linexpr.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_expr0.h" 1
# 11 "/home/donquijote/dev/apron/include/ap_expr0.h"
# 1 "/home/donquijote/dev/apron/include/ap_linexpr0.h" 1
# 13 "/home/donquijote/dev/apron/include/ap_linexpr0.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 14 "/home/donquijote/dev/apron/include/ap_linexpr0.h" 2

# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stdarg.h" 1 3 4
# 102 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 16 "/home/donquijote/dev/apron/include/ap_linexpr0.h" 2



# 1 "/home/donquijote/dev/apron/include/ap_dimension.h" 1
# 24 "/home/donquijote/dev/apron/include/ap_dimension.h"
typedef unsigned int ap_dim_t;





typedef struct ap_dimension_t {
  size_t intdim;
  size_t realdim;
} ap_dimension_t;


typedef struct ap_dimchange_t {
  ap_dim_t* dim;
  size_t intdim ;
  size_t realdim;
} ap_dimchange_t;
# 75 "/home/donquijote/dev/apron/include/ap_dimension.h"
typedef struct ap_dimperm_t {
  ap_dim_t* dim;
  size_t size;
} ap_dimperm_t;







void ap_dimchange_init(ap_dimchange_t* dimchange, size_t intdim, size_t realdim);

ap_dimchange_t* ap_dimchange_alloc(size_t intdim, size_t realdim);


static inline void ap_dimchange_clear(ap_dimchange_t* dimchange);

static inline void ap_dimchange_free(ap_dimchange_t* dimchange);


void ap_dimchange_fprint(FILE* stream, ap_dimchange_t* dimchange);

void ap_dimchange_add_invert(ap_dimchange_t* dimchange);


void ap_dimperm_init(ap_dimperm_t* dimperm, size_t size);

ap_dimperm_t* ap_dimperm_alloc(size_t size);


static inline void ap_dimperm_clear(ap_dimperm_t* dimperm);

static inline void ap_dimperm_free(ap_dimperm_t* dimperm);


void ap_dimperm_fprint(FILE* stream, ap_dimperm_t* perm);







void ap_dimperm_set_id(ap_dimperm_t* perm);


void ap_dimperm_compose(ap_dimperm_t* perm,
   ap_dimperm_t* perm1, ap_dimperm_t* perm2);





void ap_dimperm_invert(ap_dimperm_t* nperm, ap_dimperm_t* perm);







static inline void ap_dimchange_clear(ap_dimchange_t* dimchange)
{
  if (dimchange->dim) free(dimchange->dim);
  dimchange->intdim = dimchange->realdim = 0;
  dimchange->dim = ((void *)0);
}
static inline void ap_dimchange_free(ap_dimchange_t* dimchange)
{
  ap_dimchange_clear(dimchange);
  free(dimchange);
}

static inline
void ap_dimperm_clear(ap_dimperm_t* dimperm)
{
  if (dimperm->dim) free(dimperm->dim);
  dimperm->size = 0;
  dimperm->dim = ((void *)0);
}
static inline
void ap_dimperm_free(ap_dimperm_t* dimperm)
{
  ap_dimperm_clear(dimperm);
  free(dimperm);
}
# 20 "/home/donquijote/dev/apron/include/ap_linexpr0.h" 2
# 30 "/home/donquijote/dev/apron/include/ap_linexpr0.h"
typedef enum ap_linexpr_discr_t {
  AP_LINEXPR_DENSE,
  AP_LINEXPR_SPARSE
} ap_linexpr_discr_t;



typedef struct ap_linterm_t {
  ap_dim_t dim;
  ap_coeff_t coeff;
} ap_linterm_t;



typedef struct ap_linexpr0_t {
  ap_coeff_t cst;
  ap_linexpr_discr_t discr;
  size_t size;
  union {
    ap_coeff_t* coeff;
    ap_linterm_t* linterm;
  } p;
} ap_linexpr0_t;
# 73 "/home/donquijote/dev/apron/include/ap_linexpr0.h"
typedef enum ap_linexpr_type_t {
  AP_LINEXPR_INTLINEAR,
  AP_LINEXPR_QUASILINEAR,
  AP_LINEXPR_LINEAR
} ap_linexpr_type_t;





ap_linexpr0_t* ap_linexpr0_alloc(ap_linexpr_discr_t lin_discr, size_t size);




void ap_linexpr0_realloc(ap_linexpr0_t* e, size_t size);





void ap_linexpr0_minimize(ap_linexpr0_t* e);



void ap_linexpr0_free(ap_linexpr0_t* linexpr);


ap_linexpr0_t* ap_linexpr0_copy(ap_linexpr0_t* a);


void ap_linexpr0_fprint(FILE* stream, ap_linexpr0_t* a, char** name_of_dim);






bool ap_linexpr0_is_integer(ap_linexpr0_t* a, size_t intdim);


bool ap_linexpr0_is_real(ap_linexpr0_t* a, size_t intdim);





ap_linexpr_type_t ap_linexpr0_type(ap_linexpr0_t* a);

bool ap_linexpr0_is_linear(ap_linexpr0_t* a);

bool ap_linexpr0_is_quasilinear(ap_linexpr0_t* a);


ap_linexpr_type_t ap_linexpr0_array_type(ap_linexpr0_t** texpr, size_t size);
bool ap_linexpr0_array_is_linear(ap_linexpr0_t** texpr, size_t size);
bool ap_linexpr0_array_is_quasilinear(ap_linexpr0_t** texpr, size_t size);






static inline
size_t ap_linexpr0_size(ap_linexpr0_t* expr);


static inline
ap_coeff_t* ap_linexpr0_cstref(ap_linexpr0_t* expr);


ap_coeff_t* ap_linexpr0_coeffref(ap_linexpr0_t* expr, ap_dim_t dim);
# 154 "/home/donquijote/dev/apron/include/ap_linexpr0.h"
static inline
void ap_linexpr0_get_cst(ap_coeff_t* coeff, ap_linexpr0_t* expr);


bool ap_linexpr0_get_coeff(ap_coeff_t* coeff, ap_linexpr0_t* expr, ap_dim_t dim);




static inline void ap_linexpr0_set_cst(ap_linexpr0_t* expr, ap_coeff_t* cst);
static inline void ap_linexpr0_set_cst_scalar(ap_linexpr0_t* expr, ap_scalar_t* scalar);
static inline void ap_linexpr0_set_cst_scalar_int(ap_linexpr0_t* expr, int num);
static inline void ap_linexpr0_set_cst_scalar_frac(ap_linexpr0_t* expr, int num, unsigned int den);
static inline void ap_linexpr0_set_cst_scalar_double(ap_linexpr0_t* expr, double num);
static inline void ap_linexpr0_set_cst_interval(ap_linexpr0_t* expr, ap_interval_t* itv);
static inline void ap_linexpr0_set_cst_interval_scalar(ap_linexpr0_t* expr, ap_scalar_t* inf, ap_scalar_t* sup);
static inline void ap_linexpr0_set_cst_interval_int(ap_linexpr0_t* expr, int inf, int sup);
static inline void ap_linexpr0_set_cst_interval_frac(ap_linexpr0_t* expr,
        int numinf, unsigned int deninf,
        int numsup, unsigned int densup);
static inline void ap_linexpr0_set_cst_interval_double(ap_linexpr0_t* expr, double inf, double sup);



static inline bool ap_linexpr0_set_coeff(ap_linexpr0_t* expr, ap_dim_t dim, ap_coeff_t* coeff);
static inline bool ap_linexpr0_set_coeff_scalar(ap_linexpr0_t* expr, ap_dim_t dim, ap_scalar_t* scalar);
static inline bool ap_linexpr0_set_coeff_scalar_int(ap_linexpr0_t* expr, ap_dim_t dim, int num);
static inline bool ap_linexpr0_set_coeff_scalar_frac(ap_linexpr0_t* expr, ap_dim_t dim, int num, unsigned int den);
static inline bool ap_linexpr0_set_coeff_scalar_double(ap_linexpr0_t* expr, ap_dim_t dim, double num);
static inline bool ap_linexpr0_set_coeffinterval(ap_linexpr0_t* expr, ap_dim_t dim, ap_interval_t* itv);
static inline bool ap_linexpr0_set_coeff_interval_scalar(ap_linexpr0_t* expr, ap_dim_t dim, ap_scalar_t* inf, ap_scalar_t* sup);
static inline bool ap_linexpr0_set_coeff_interval_int(ap_linexpr0_t* expr, ap_dim_t dim, int inf, int sup);
static inline bool ap_linexpr0_set_coeff_interval_frac(ap_linexpr0_t* expr, ap_dim_t dim,
          int numinf, unsigned int deninf,
          int numsup, unsigned int densup);
static inline bool ap_linexpr0_set_coeff_interval_double(ap_linexpr0_t* expr, ap_dim_t dim, double inf, double sup);
# 198 "/home/donquijote/dev/apron/include/ap_linexpr0.h"
typedef enum ap_coefftag_t {
  AP_COEFF,
  AP_COEFF_S,
  AP_COEFF_S_MPQ,
  AP_COEFF_S_MPFR,
  AP_COEFF_S_INT,
  AP_COEFF_S_FRAC,
  AP_COEFF_S_DOUBLE,
  AP_COEFF_I,
  AP_COEFF_I_SCALAR,
  AP_COEFF_I_MPQ,
  AP_COEFF_I_MPFR,
  AP_COEFF_I_INT,
  AP_COEFF_I_FRAC,
  AP_COEFF_I_DOUBLE,
  AP_CST,
  AP_CST_S,
  AP_CST_S_MPQ,
  AP_CST_S_MPFR,
  AP_CST_S_INT,
  AP_CST_S_FRAC,
  AP_CST_S_DOUBLE,
  AP_CST_I,
  AP_CST_I_SCALAR,
  AP_CST_I_MPQ,
  AP_CST_I_MPFR,
  AP_CST_I_INT,
  AP_CST_I_FRAC,
  AP_CST_I_DOUBLE,
  AP_END
} ap_coefftag_t;

bool ap_linexpr0_set_list_generic(ap_coeff_t* (*get_pcoeff)(void* expr, bool cst, va_list* va),
      void* expr, va_list* va);

bool ap_linexpr0_set_list(ap_linexpr0_t* expr, ...);
# 267 "/home/donquijote/dev/apron/include/ap_linexpr0.h"
void ap_linexpr0_add_dimensions_with(ap_linexpr0_t* expr,
      ap_dimchange_t* dimchange);
ap_linexpr0_t* ap_linexpr0_add_dimensions(ap_linexpr0_t* expr,
       ap_dimchange_t* dimchange);





void ap_linexpr0_permute_dimensions_with(ap_linexpr0_t* expr,
      ap_dimperm_t* perm);
ap_linexpr0_t* ap_linexpr0_permute_dimensions(ap_linexpr0_t* expr,
           ap_dimperm_t* perm);







long ap_linexpr0_hash(ap_linexpr0_t* expr);
bool ap_linexpr0_equal(ap_linexpr0_t* expr1,
      ap_linexpr0_t* expr2);


int ap_linexpr0_compare(ap_linexpr0_t* expr1,
       ap_linexpr0_t* expr2);






void ap_linexpr0_array_free(ap_linexpr0_t** texpr, size_t size);





static inline
size_t ap_linexpr0_size(ap_linexpr0_t* expr)
  { return expr->size; }

static inline
ap_coeff_t* ap_linexpr0_cstref(ap_linexpr0_t* expr)
  { return &expr->cst; }

static inline
void ap_linexpr0_get_cst(ap_coeff_t* coeff, ap_linexpr0_t* expr)
  { ap_coeff_set(coeff,&expr->cst); }

static inline
void ap_linexpr0_set_cst(ap_linexpr0_t* expr, ap_coeff_t* cst)
  { ap_coeff_set(&expr->cst,cst); }

static inline
void ap_linexpr0_set_cst_scalar(ap_linexpr0_t* expr, ap_scalar_t* scalar)
  { ap_coeff_set_scalar(&expr->cst, scalar); }

static inline
void ap_linexpr0_set_cst_scalar_int(ap_linexpr0_t* expr, int num)
  { ap_coeff_set_scalar_int(&expr->cst, num); }

static inline
void ap_linexpr0_set_cst_scalar_frac(ap_linexpr0_t* expr, int num, unsigned int den)
  { ap_coeff_set_scalar_frac(&expr->cst, num, den); }

static inline
void ap_linexpr0_set_cst_scalar_double(ap_linexpr0_t* expr, double num)
  { ap_coeff_set_scalar_double(&expr->cst, num); }

static inline
void ap_linexpr0_set_cst_interval(ap_linexpr0_t* expr, ap_interval_t* itv)
  { ap_coeff_set_interval(&expr->cst, itv); }

static inline
void ap_linexpr0_set_cst_interval_int(ap_linexpr0_t* expr, int inf, int sup)
  { ap_coeff_set_interval_int(&expr->cst, inf,sup); }

static inline
void ap_linexpr0_set_cst_interval_scalar(ap_linexpr0_t* expr, ap_scalar_t* inf, ap_scalar_t* sup)
  { ap_coeff_set_interval_scalar(&expr->cst, inf,sup); }

static inline
void ap_linexpr0_set_cst_interval_frac(ap_linexpr0_t* expr,
      int numinf, unsigned int deninf,
      int numsup, unsigned int densup)
  { ap_coeff_set_interval_frac(&expr->cst, numinf,deninf, numsup,densup); }

static inline
void ap_linexpr0_set_cst_interval_double(ap_linexpr0_t* expr, double inf, double sup)
  { ap_coeff_set_interval_double(&expr->cst, inf,sup); }

static inline
bool ap_linexpr0_set_coeff(ap_linexpr0_t* expr, ap_dim_t dim, ap_coeff_t* coeff)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ap_coeff_set(ecoeff,coeff); return false;} else return true; }

static inline
bool ap_linexpr0_set_coeff_scalar(ap_linexpr0_t* expr, ap_dim_t dim, ap_scalar_t* scalar)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_scalar(ecoeff,scalar); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeff_scalar_int(ap_linexpr0_t* expr, ap_dim_t dim, int num)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_scalar_int(ecoeff,num); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeff_scalar_frac(ap_linexpr0_t* expr, ap_dim_t dim, int num, unsigned int den)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_scalar_frac(ecoeff,num, den); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeff_scalar_double(ap_linexpr0_t* expr, ap_dim_t dim, double num)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_scalar_double(ecoeff,num); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeffinterval(ap_linexpr0_t* expr, ap_dim_t dim, ap_interval_t* itv)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_interval(ecoeff,itv); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeff_interval_int(ap_linexpr0_t* expr, ap_dim_t dim, int inf, int sup)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_interval_int(ecoeff,inf,sup); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeff_interval_scalar(ap_linexpr0_t* expr, ap_dim_t dim, ap_scalar_t* inf, ap_scalar_t* sup)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_interval_scalar(ecoeff,inf,sup); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeff_interval_frac(ap_linexpr0_t* expr, ap_dim_t dim,
      int numinf, unsigned int deninf,
      int numsup, unsigned int densup)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_interval_frac(ecoeff,numinf,deninf, numsup,densup); return false; } else return true; }

static inline
bool ap_linexpr0_set_coeff_interval_double(ap_linexpr0_t* expr, ap_dim_t dim, double inf, double sup)
  { ap_coeff_t* ecoeff = ap_linexpr0_coeffref(expr,dim); if (ecoeff){ ap_coeff_set_interval_double(ecoeff,inf,sup); return false; } else return true; }
# 12 "/home/donquijote/dev/apron/include/ap_expr0.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_lincons0.h" 1
# 13 "/home/donquijote/dev/apron/include/ap_lincons0.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 14 "/home/donquijote/dev/apron/include/ap_lincons0.h" 2
# 28 "/home/donquijote/dev/apron/include/ap_lincons0.h"
typedef enum ap_constyp_t {
  AP_CONS_EQ,
  AP_CONS_SUPEQ,
  AP_CONS_SUP,
  AP_CONS_EQMOD,
  AP_CONS_DISEQ
} ap_constyp_t;


typedef struct ap_lincons0_t {
  ap_linexpr0_t* linexpr0;
  ap_constyp_t constyp;
  ap_scalar_t* scalar;



} ap_lincons0_t;


typedef struct ap_lincons0_array_t {
  ap_lincons0_t* p;
  size_t size;
} ap_lincons0_array_t;
# 60 "/home/donquijote/dev/apron/include/ap_lincons0.h"
static inline
ap_lincons0_t ap_lincons0_make(ap_constyp_t constyp,
          ap_linexpr0_t* linexpr,
          ap_scalar_t* scalar);



ap_lincons0_t ap_lincons0_make_unsat(void);


static inline
ap_lincons0_t ap_lincons0_copy(ap_lincons0_t* cons);


static inline
void ap_lincons0_clear(ap_lincons0_t* cons);


void ap_lincons0_fprint(FILE* stream,
   ap_lincons0_t* cons, char** name_of_dim);






bool ap_lincons0_is_unsat(ap_lincons0_t* cons);







static inline
void ap_lincons0_add_dimensions_with(ap_lincons0_t* cons,
         ap_dimchange_t* dimchange);
static inline
ap_lincons0_t ap_lincons0_add_dimensions(ap_lincons0_t* cons,
      ap_dimchange_t* dimchange);

static inline
void ap_lincons0_permute_dimensions_with(ap_lincons0_t* cons,
      ap_dimperm_t* perm);
static inline
ap_lincons0_t ap_lincons0_permute_dimensions(ap_lincons0_t* cons,
          ap_dimperm_t* perm);





ap_lincons0_array_t ap_lincons0_array_make(size_t size);



void ap_lincons0_array_resize(ap_lincons0_array_t* array, size_t size);




void ap_lincons0_array_clear(ap_lincons0_array_t* array);


void ap_lincons0_array_fprint(FILE* stream,
         ap_lincons0_array_t* ap_lincons0_array,
         char** name_of_dim);


ap_linexpr_type_t ap_lincons0_array_type(ap_lincons0_array_t* array);
bool ap_lincons0_array_is_linear(ap_lincons0_array_t* array);
bool ap_lincons0_array_is_quasilinear(ap_lincons0_array_t* array);





void ap_lincons0_array_add_dimensions_with(ap_lincons0_array_t* array,
        ap_dimchange_t* dimchange);
ap_lincons0_array_t ap_lincons0_array_add_dimensions(ap_lincons0_array_t* array,
           ap_dimchange_t* dimchange);

void ap_lincons0_array_permute_dimensions_with(ap_lincons0_array_t* array,
            ap_dimperm_t* perm);
ap_lincons0_array_t ap_lincons0_array_permute_dimensions(ap_lincons0_array_t* array,
        ap_dimperm_t* perm);





static inline ap_lincons0_t ap_lincons0_make(ap_constyp_t constyp, ap_linexpr0_t* linexpr, ap_scalar_t* scalar)
{
  ap_lincons0_t cons;
  cons.constyp = constyp;
  cons.linexpr0 = linexpr;
  cons.scalar = scalar;
  return cons;
}
static inline ap_lincons0_t ap_lincons0_copy(ap_lincons0_t* cons)
{
  return ap_lincons0_make(cons->constyp,
     cons->linexpr0 ? ap_linexpr0_copy(cons->linexpr0) : ((void *)0),
     cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0));
}
static inline void ap_lincons0_clear(ap_lincons0_t* lincons)
{
  if (lincons->linexpr0){
    ap_linexpr0_free(lincons->linexpr0);
  }
  lincons->linexpr0 = ((void *)0);
  if (lincons->scalar){
    ap_scalar_free(lincons->scalar);
  }
  lincons->scalar = ((void *)0);
}

static inline
void ap_lincons0_add_dimensions_with(ap_lincons0_t* cons,
         ap_dimchange_t* dimchange)
{ ap_linexpr0_add_dimensions_with(cons->linexpr0,dimchange); }
static inline
ap_lincons0_t ap_lincons0_add_dimensions(ap_lincons0_t* cons,
      ap_dimchange_t* dimchange)
{
  return ap_lincons0_make(cons->constyp,
     ap_linexpr0_add_dimensions(cons->linexpr0,dimchange),
     cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0));
}
static inline
void ap_lincons0_permute_dimensions_with(ap_lincons0_t* cons,
      ap_dimperm_t* perm)
{ ap_linexpr0_permute_dimensions_with(cons->linexpr0,perm); }
static inline
ap_lincons0_t ap_lincons0_permute_dimensions(ap_lincons0_t* cons,
          ap_dimperm_t* perm)
{
  return ap_lincons0_make(cons->constyp,
     ap_linexpr0_permute_dimensions(cons->linexpr0,perm),
     cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0));
}
# 13 "/home/donquijote/dev/apron/include/ap_expr0.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_generator0.h" 1
# 13 "/home/donquijote/dev/apron/include/ap_generator0.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 14 "/home/donquijote/dev/apron/include/ap_generator0.h" 2
# 28 "/home/donquijote/dev/apron/include/ap_generator0.h"
typedef enum ap_gentyp_t {
  AP_GEN_LINE,
  AP_GEN_RAY,
  AP_GEN_VERTEX,
  AP_GEN_LINEMOD,
  AP_GEN_RAYMOD
} ap_gentyp_t;


typedef struct ap_generator0_t {
  ap_linexpr0_t* linexpr0;

  ap_gentyp_t gentyp;
} ap_generator0_t;


typedef struct ap_generator0_array_t {
  ap_generator0_t* p;
  size_t size;
} ap_generator0_array_t;





static inline
ap_generator0_t ap_generator0_make(ap_gentyp_t gentyp, ap_linexpr0_t* linexpr);



static inline
ap_generator0_t ap_generator0_copy(ap_generator0_t* gen);


static inline
void ap_generator0_clear(ap_generator0_t* gen);


void ap_generator0_fprint(FILE* stream,
     ap_generator0_t* gen, char** name_of_dim);






static inline
void ap_generator0_add_dimensions_with(ap_generator0_t* gen,
           ap_dimchange_t* dimchange);
static inline
ap_generator0_t ap_generator0_add_dimensions(ap_generator0_t* gen,
          ap_dimchange_t* dimchange);

static inline
void ap_generator0_permute_dimensions_with(ap_generator0_t* gen,
        ap_dimperm_t* perm);
static inline
ap_generator0_t ap_generator0_permute_dimensions(ap_generator0_t* gen,
       ap_dimperm_t* perm);





ap_generator0_array_t ap_generator0_array_make(size_t size);



void ap_generator0_array_resize(ap_generator0_array_t* array, size_t size);




void ap_generator0_array_clear(ap_generator0_array_t* ap_generator0_array);


void ap_generator0_array_fprint(FILE* stream,
    ap_generator0_array_t* ap_generator0_array,
    char** name_of_dim);





void ap_generator0_array_add_dimensions_with(ap_generator0_array_t* array,
          ap_dimchange_t* dimchange);
ap_generator0_array_t ap_generator0_array_add_dimensions(ap_generator0_array_t* array,
        ap_dimchange_t* dimchange);

void ap_generator0_array_permute_dimensions_with(ap_generator0_array_t* array,
       ap_dimperm_t* perm);
ap_generator0_array_t ap_generator0_array_permute_dimensions(ap_generator0_array_t* array,
            ap_dimperm_t* perm);




static inline ap_generator0_t ap_generator0_make(ap_gentyp_t gentyp, ap_linexpr0_t* linexpr)
{
  ap_generator0_t gen;

  gen.gentyp = gentyp;
  gen.linexpr0 = linexpr;
  return gen;
}
static inline ap_generator0_t ap_generator0_copy(ap_generator0_t* gen)
{
  return ap_generator0_make(gen->gentyp,
       gen->linexpr0 ? ap_linexpr0_copy(gen->linexpr0) : ((void *)0));
}
static inline void ap_generator0_clear(ap_generator0_t* generator)
{
  if (generator->linexpr0){
    ap_linexpr0_free(generator->linexpr0);
    generator->linexpr0 = ((void *)0);
  }
}

static inline
void ap_generator0_add_dimensions_with(ap_generator0_t* gen,
           ap_dimchange_t* dimchange)
{ ap_linexpr0_add_dimensions_with(gen->linexpr0,dimchange); }
static inline
ap_generator0_t ap_generator0_add_dimensions(ap_generator0_t* gen,
          ap_dimchange_t* dimchange)
{
  return ap_generator0_make(gen->gentyp,
       ap_linexpr0_add_dimensions(gen->linexpr0,dimchange));
}
static inline
void ap_generator0_permute_dimensions_with(ap_generator0_t* gen,
        ap_dimperm_t* perm)
{ ap_linexpr0_permute_dimensions_with(gen->linexpr0,perm); }
static inline
ap_generator0_t ap_generator0_permute_dimensions(ap_generator0_t* gen,
       ap_dimperm_t* perm)
{
  return ap_generator0_make(gen->gentyp,
       ap_linexpr0_permute_dimensions(gen->linexpr0,perm));
}
# 14 "/home/donquijote/dev/apron/include/ap_expr0.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_texpr0.h" 1
# 36 "/home/donquijote/dev/apron/include/ap_texpr0.h"
typedef enum ap_texpr_op_t {


  AP_TEXPR_ADD, AP_TEXPR_SUB, AP_TEXPR_MUL, AP_TEXPR_DIV,
  AP_TEXPR_MOD,


  AP_TEXPR_NEG ,
  AP_TEXPR_CAST, AP_TEXPR_SQRT,

} ap_texpr_op_t;


typedef enum ap_texpr_rtype_t {
  AP_RTYPE_REAL,
  AP_RTYPE_INT,
  AP_RTYPE_SINGLE,
  AP_RTYPE_DOUBLE,
  AP_RTYPE_EXTENDED,
  AP_RTYPE_QUAD,
  AP_RTYPE_SIZE
} ap_texpr_rtype_t;


typedef enum ap_texpr_rdir_t {
  AP_RDIR_NEAREST = GMP_RNDN,
  AP_RDIR_ZERO = GMP_RNDZ,
  AP_RDIR_UP = GMP_RNDU,
  AP_RDIR_DOWN = GMP_RNDD,
  AP_RDIR_RND,
  AP_RDIR_SIZE
} ap_texpr_rdir_t;


typedef struct ap_texpr0_node_t {
  ap_texpr_op_t op;
  ap_texpr_rtype_t type;
  ap_texpr_rdir_t dir;
  struct ap_texpr0_t* exprA;
  struct ap_texpr0_t* exprB;
} ap_texpr0_node_t;


typedef enum ap_texpr_discr_t {
  AP_TEXPR_CST, AP_TEXPR_DIM, AP_TEXPR_NODE
} ap_texpr_discr_t;

typedef struct ap_texpr0_t {
  ap_texpr_discr_t discr;
  union {
    ap_coeff_t cst;
    ap_dim_t dim;
    ap_texpr0_node_t* node;
  } val;
} ap_texpr0_t;





ap_texpr0_t* ap_texpr0_cst (ap_coeff_t* coeff);
ap_texpr0_t* ap_texpr0_cst_scalar (ap_scalar_t* scalar);
ap_texpr0_t* ap_texpr0_cst_scalar_mpq (mpq_t mpq);
ap_texpr0_t* ap_texpr0_cst_scalar_mpfr (mpfr_t mpfr);
ap_texpr0_t* ap_texpr0_cst_scalar_int (long int num);
ap_texpr0_t* ap_texpr0_cst_scalar_frac (long int num, unsigned long int den);
ap_texpr0_t* ap_texpr0_cst_scalar_double (double num);
ap_texpr0_t* ap_texpr0_cst_interval (ap_interval_t* itv);
ap_texpr0_t* ap_texpr0_cst_interval_scalar (ap_scalar_t* inf, ap_scalar_t* sup);
ap_texpr0_t* ap_texpr0_cst_interval_mpq (mpq_t inf, mpq_t sup);
ap_texpr0_t* ap_texpr0_cst_interval_mpfr (mpfr_t inf, mpfr_t sup);
ap_texpr0_t* ap_texpr0_cst_interval_int (long int inf, long int sup);
ap_texpr0_t* ap_texpr0_cst_interval_frac (long int numinf, unsigned long int deninf,
         long int numsup, unsigned long int densup);
ap_texpr0_t* ap_texpr0_cst_interval_double (double inf, double sup);
ap_texpr0_t* ap_texpr0_cst_interval_top (void);


ap_texpr0_t* ap_texpr0_dim(ap_dim_t dim);


ap_texpr0_t* ap_texpr0_unop(ap_texpr_op_t op,
       ap_texpr0_t* opA,
       ap_texpr_rtype_t type, ap_texpr_rdir_t dir);


ap_texpr0_t* ap_texpr0_binop(ap_texpr_op_t op,
        ap_texpr0_t* opA, ap_texpr0_t* opB,
        ap_texpr_rtype_t type, ap_texpr_rdir_t dir);


ap_texpr0_t* ap_texpr0_copy(ap_texpr0_t* expr);


void ap_texpr0_free(ap_texpr0_t* expr);


ap_texpr0_t* ap_texpr0_from_linexpr0(ap_linexpr0_t* e);







void ap_texpr0_fprint(FILE* stream, ap_texpr0_t* a, char** name_of_dim);
void ap_texpr0_print(ap_texpr0_t* a, char** name_of_dim);







static inline bool ap_texpr_is_unop(ap_texpr_op_t op){
  return (op>=AP_TEXPR_NEG && op<=AP_TEXPR_SQRT);
}
static inline bool ap_texpr_is_binop(ap_texpr_op_t op){
  return (op<=AP_TEXPR_MOD);
}


size_t ap_texpr0_depth(ap_texpr0_t* a);


size_t ap_texpr0_size(ap_texpr0_t* a);


ap_dim_t ap_texpr0_max_dim(ap_texpr0_t* a);





bool ap_texpr0_has_dim(ap_texpr0_t* a, ap_dim_t d);


ap_dim_t* ap_texpr0_dimlist(ap_texpr0_t* a);







bool ap_texpr0_is_interval_cst(ap_texpr0_t* a);


bool ap_texpr0_is_interval_linear(ap_texpr0_t* a);

bool ap_texpr0_is_interval_polynomial(ap_texpr0_t* a);

bool ap_texpr0_is_interval_polyfrac(ap_texpr0_t* a);

bool ap_texpr0_is_scalar(ap_texpr0_t* a);


bool ap_texpr0_array_is_interval_linear(ap_texpr0_t** texpr, size_t size);
bool ap_texpr0_array_is_interval_polynomial(ap_texpr0_t** texpr, size_t size);
bool ap_texpr0_array_is_interval_polyfrac(ap_texpr0_t** texpr, size_t size);
bool ap_texpr0_array_is_scalar(ap_texpr0_t** texpr, size_t size);







ap_texpr0_t* ap_texpr0_substitute(ap_texpr0_t* a, ap_dim_t dim, ap_texpr0_t *dst);
void ap_texpr0_substitute_with (ap_texpr0_t* a, ap_dim_t dim, ap_texpr0_t *dst);






ap_texpr0_t* ap_texpr0_add_dimensions(ap_texpr0_t* expr,
          ap_dimchange_t* dimchange);
ap_texpr0_t* ap_texpr0_remove_dimensions(ap_texpr0_t* expr,
      ap_dimchange_t* dimchange);
ap_texpr0_t* ap_texpr0_permute_dimensions(ap_texpr0_t* expr,
       ap_dimperm_t* dimperm);
void ap_texpr0_add_dimensions_with(ap_texpr0_t* expr,
       ap_dimchange_t* dimchange);
void ap_texpr0_remove_dimensions_with(ap_texpr0_t* expr,
     ap_dimchange_t* dimchange);
void ap_texpr0_permute_dimensions_with(ap_texpr0_t* expr,
           ap_dimperm_t* perm);







long ap_texpr0_hash(ap_texpr0_t* a);


bool ap_texpr0_equal(ap_texpr0_t* a1, ap_texpr0_t* a2);





ap_texpr0_t* ap_texpr0_node(ap_texpr_op_t op,
       ap_texpr_rtype_t type, ap_texpr_rdir_t dir,
       ap_texpr0_t* opA, ap_texpr0_t* opB);
void ap_texpr0_node_free(ap_texpr0_node_t* node);
void ap_texpr0_clear(ap_texpr0_t* node);
# 15 "/home/donquijote/dev/apron/include/ap_expr0.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_tcons0.h" 1
# 13 "/home/donquijote/dev/apron/include/ap_tcons0.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include-fixed/limits.h" 1 3 4
# 14 "/home/donquijote/dev/apron/include/ap_tcons0.h" 2



# 1 "/home/donquijote/dev/apron/include/ap_texpr0.h" 1
# 18 "/home/donquijote/dev/apron/include/ap_tcons0.h" 2
# 29 "/home/donquijote/dev/apron/include/ap_tcons0.h"
typedef struct ap_tcons0_t {
  ap_texpr0_t* texpr0;
  ap_constyp_t constyp;
  ap_scalar_t* scalar;


} ap_tcons0_t;


typedef struct ap_tcons0_array_t {
  ap_tcons0_t* p;
  size_t size;
} ap_tcons0_array_t;
# 51 "/home/donquijote/dev/apron/include/ap_tcons0.h"
static inline
ap_tcons0_t ap_tcons0_make(ap_constyp_t constyp,
      ap_texpr0_t* texpr,
      ap_scalar_t* scalar);



ap_tcons0_t ap_tcons0_make_unsat(void);


static inline
ap_tcons0_t ap_tcons0_from_lincons0(ap_lincons0_t* cons);


static inline
ap_tcons0_t ap_tcons0_copy(ap_tcons0_t* cons);


static inline
void ap_tcons0_clear(ap_tcons0_t* cons);


void ap_tcons0_fprint(FILE* stream,
        ap_tcons0_t* cons, char** name_of_dim);






static inline
bool ap_tcons0_is_interval_cst(ap_tcons0_t* a);


static inline
bool ap_tcons0_is_interval_linear(ap_tcons0_t* a);


static inline
bool ap_tcons0_is_interval_polynomial(ap_tcons0_t* a);


static inline
bool ap_tcons0_is_interval_polyfrac(ap_tcons0_t* a);


static inline
bool ap_tcons0_is_scalar(ap_tcons0_t* a);






static inline
void ap_tcons0_add_dimensions_with(ap_tcons0_t* cons,
       ap_dimchange_t* dimchange);
static inline
ap_tcons0_t ap_tcons0_add_dimensions(ap_tcons0_t* cons,
         ap_dimchange_t* dimchange);

static inline
void ap_tcons0_remove_dimensions_with(ap_tcons0_t* cons,
          ap_dimchange_t* dimchange);
static inline
ap_tcons0_t ap_tcons0_remove_dimensions(ap_tcons0_t* cons,
     ap_dimchange_t* dimchange);

static inline
void ap_tcons0_permute_dimensions_with(ap_tcons0_t* cons,
           ap_dimperm_t* perm);
static inline
ap_tcons0_t ap_tcons0_permute_dimensions(ap_tcons0_t* cons,
      ap_dimperm_t* perm);





ap_tcons0_array_t ap_tcons0_array_make(size_t size);



void ap_tcons0_array_resize(ap_tcons0_array_t* array, size_t size);




void ap_tcons0_array_clear(ap_tcons0_array_t* array);


void ap_tcons0_array_fprint(FILE* stream,
         ap_tcons0_array_t* ap_tcons0_array,
         char** name_of_dim);


bool ap_tcons0_array_is_interval_linear(ap_tcons0_array_t* array);






void ap_tcons0_array_add_dimensions_with(ap_tcons0_array_t* array,
      ap_dimchange_t* dimchange);
ap_tcons0_array_t ap_tcons0_array_add_dimensions(ap_tcons0_array_t* array,
       ap_dimchange_t* dimchange);

void ap_tcons0_array_remove_dimensions_with(ap_tcons0_array_t* array,
         ap_dimchange_t* dimchange);
ap_tcons0_array_t ap_tcons0_array_remove_dimensions(ap_tcons0_array_t* array,
          ap_dimchange_t* dimchange);

void ap_tcons0_array_permute_dimensions_with(ap_tcons0_array_t* array,
          ap_dimperm_t* perm);
ap_tcons0_array_t ap_tcons0_array_permute_dimensions(ap_tcons0_array_t* array,
           ap_dimperm_t* perm);





static inline ap_tcons0_t ap_tcons0_make(ap_constyp_t constyp, ap_texpr0_t* texpr, ap_scalar_t* scalar)
{
  ap_tcons0_t cons;
  cons.constyp = constyp;
  cons.texpr0 = texpr;
  cons.scalar = scalar;
  return cons;
}
static inline ap_tcons0_t ap_tcons0_from_lincons0(ap_lincons0_t* cons)
{
  ap_tcons0_t res;
  res.texpr0 = ap_texpr0_from_linexpr0(cons->linexpr0);
  res.constyp = cons->constyp;
  res.scalar = cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0);
  return res;
}
static inline ap_tcons0_t ap_tcons0_copy(ap_tcons0_t* cons)
{
  return ap_tcons0_make(cons->constyp,
   ap_texpr0_copy(cons->texpr0),
   cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0));
}
static inline void ap_tcons0_clear(ap_tcons0_t* tcons)
{
  if (tcons->texpr0){
    ap_texpr0_free(tcons->texpr0);
  }
  tcons->texpr0 = ((void *)0);
  if (tcons->scalar){
    ap_scalar_free(tcons->scalar);
  }
  tcons->scalar = ((void *)0);
}

static inline
bool ap_tcons0_is_interval_cst(ap_tcons0_t* a)
{ return ap_texpr0_is_interval_cst(a->texpr0); }
static inline
bool ap_tcons0_is_interval_linear(ap_tcons0_t* a)
{ return ap_texpr0_is_interval_linear(a->texpr0); }
static inline
bool ap_tcons0_is_interval_polynomial(ap_tcons0_t* a)
{ return ap_texpr0_is_interval_polynomial(a->texpr0); }
static inline
bool ap_tcons0_is_interval_polyfrac(ap_tcons0_t* a)
{ return ap_texpr0_is_interval_polyfrac(a->texpr0); }
static inline
bool ap_tcons0_is_scalar(ap_tcons0_t* a)
{ return ap_texpr0_is_scalar(a->texpr0); }

static inline
void ap_tcons0_add_dimensions_with(ap_tcons0_t* cons,
       ap_dimchange_t* dimchange)
{ ap_texpr0_add_dimensions_with(cons->texpr0,dimchange); }
static inline
ap_tcons0_t ap_tcons0_add_dimensions(ap_tcons0_t* cons,
         ap_dimchange_t* dimchange)
{
  return ap_tcons0_make(cons->constyp,
   ap_texpr0_add_dimensions(cons->texpr0,dimchange),
   cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0));
}
static inline
void ap_tcons0_remove_dimensions_with(ap_tcons0_t* cons,
          ap_dimchange_t* dimchange)
{ ap_texpr0_remove_dimensions_with(cons->texpr0,dimchange); }
static inline
ap_tcons0_t ap_tcons0_remove_dimensions(ap_tcons0_t* cons,
     ap_dimchange_t* dimchange)
{
  return ap_tcons0_make(cons->constyp,
   ap_texpr0_remove_dimensions(cons->texpr0,dimchange),
   cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0));
}
static inline
void ap_tcons0_permute_dimensions_with(ap_tcons0_t* cons,
           ap_dimperm_t* perm)
{ ap_texpr0_permute_dimensions_with(cons->texpr0,perm); }
static inline
ap_tcons0_t ap_tcons0_permute_dimensions(ap_tcons0_t* cons,
      ap_dimperm_t* perm)
{
  return ap_tcons0_make(cons->constyp,
   ap_texpr0_permute_dimensions(cons->texpr0,perm),
   cons->scalar ? ap_scalar_alloc_set(cons->scalar) : ((void *)0));
}
# 16 "/home/donquijote/dev/apron/include/ap_expr0.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_linearize.h" 1






# 1 "/home/donquijote/dev/apron/include/ap_manager.h" 1
# 30 "/home/donquijote/dev/apron/include/ap_manager.h"
typedef enum tbool_t {
  tbool_false=0,
  tbool_true=1,
  tbool_top=2,
} tbool_t;

static inline tbool_t tbool_of_bool(bool a);
static inline tbool_t tbool_of_int(int n);
static inline tbool_t tbool_or(tbool_t a, tbool_t b);
static inline tbool_t tbool_and(tbool_t a, tbool_t b);
static inline tbool_t tbool_not(tbool_t a);


typedef struct ap_membuf_t {
  void* ptr;
  size_t size;
} ap_membuf_t;





typedef enum ap_funid_t {
  AP_FUNID_UNKNOWN,
  AP_FUNID_COPY,
  AP_FUNID_FREE,
  AP_FUNID_ASIZE,
  AP_FUNID_MINIMIZE,
  AP_FUNID_CANONICALIZE,
  AP_FUNID_HASH,
  AP_FUNID_APPROXIMATE,
  AP_FUNID_FPRINT,
  AP_FUNID_FPRINTDIFF,
  AP_FUNID_FDUMP,
  AP_FUNID_SERIALIZE_RAW,
  AP_FUNID_DESERIALIZE_RAW,
  AP_FUNID_BOTTOM,
  AP_FUNID_TOP,
  AP_FUNID_OF_BOX,
  AP_FUNID_DIMENSION,
  AP_FUNID_IS_BOTTOM,
  AP_FUNID_IS_TOP,
  AP_FUNID_IS_LEQ,
  AP_FUNID_IS_EQ,
  AP_FUNID_IS_DIMENSION_UNCONSTRAINED,
  AP_FUNID_SAT_INTERVAL,
  AP_FUNID_SAT_LINCONS,
  AP_FUNID_SAT_TCONS,
  AP_FUNID_BOUND_DIMENSION,
  AP_FUNID_BOUND_LINEXPR,
  AP_FUNID_BOUND_TEXPR,
  AP_FUNID_TO_BOX,
  AP_FUNID_TO_LINCONS_ARRAY,
  AP_FUNID_TO_TCONS_ARRAY,
  AP_FUNID_TO_GENERATOR_ARRAY,
  AP_FUNID_MEET,
  AP_FUNID_MEET_ARRAY,
  AP_FUNID_MEET_LINCONS_ARRAY,
  AP_FUNID_MEET_TCONS_ARRAY,
  AP_FUNID_JOIN,
  AP_FUNID_JOIN_ARRAY,
  AP_FUNID_ADD_RAY_ARRAY,
  AP_FUNID_ASSIGN_LINEXPR_ARRAY,
  AP_FUNID_SUBSTITUTE_LINEXPR_ARRAY,
  AP_FUNID_ASSIGN_TEXPR_ARRAY,
  AP_FUNID_SUBSTITUTE_TEXPR_ARRAY,
  AP_FUNID_ADD_DIMENSIONS,
  AP_FUNID_REMOVE_DIMENSIONS,
  AP_FUNID_PERMUTE_DIMENSIONS,
  AP_FUNID_FORGET_ARRAY,
  AP_FUNID_EXPAND,
  AP_FUNID_FOLD,
  AP_FUNID_WIDENING,
  AP_FUNID_CLOSURE,
  AP_FUNID_SIZE,
  AP_FUNID_CHANGE_ENVIRONMENT,
  AP_FUNID_RENAME_ARRAY,
  AP_FUNID_SIZE2
} ap_funid_t;

extern const char* ap_name_of_funid[AP_FUNID_SIZE2];
# 119 "/home/donquijote/dev/apron/include/ap_manager.h"
typedef enum ap_exc_t {
  AP_EXC_NONE,
  AP_EXC_TIMEOUT,
  AP_EXC_OUT_OF_SPACE,
  AP_EXC_OVERFLOW,
  AP_EXC_INVALID_ARGUMENT,
  AP_EXC_NOT_IMPLEMENTED,
  AP_EXC_SIZE
} ap_exc_t;

extern const char* ap_name_of_exception[AP_EXC_SIZE];


typedef struct ap_exclog_t {
  ap_exc_t exn;
  ap_funid_t funid;
  char* msg;
  struct ap_exclog_t* tail;
} ap_exclog_t;


typedef struct ap_result_t {
  ap_exclog_t* exclog;
  ap_exc_t exn;
  bool flag_exact;
  bool flag_best;
} ap_result_t;







typedef struct ap_funopt_t {
  int algorithm;






  size_t timeout;



  size_t max_object_size;



  bool flag_exact_wanted;


  bool flag_best_wanted;


} ap_funopt_t;


typedef struct ap_option_t {
  ap_funopt_t funopt[AP_FUNID_SIZE];
  bool abort_if_exception[AP_EXC_SIZE];
  ap_scalar_discr_t scalar_discr;
} ap_option_t;






typedef struct ap_manager_t {
  char* library;
  char* version;
  void* internal;


  void* funptr[AP_FUNID_SIZE];

  ap_option_t option;
  ap_result_t result;
  void (*internal_free)(void*);
  size_t count;
} ap_manager_t;





void ap_manager_clear_exclog(ap_manager_t* man);

void ap_manager_free(ap_manager_t* man);




const char* ap_manager_get_library(ap_manager_t* man);
const char* ap_manager_get_version(ap_manager_t* man);

ap_funopt_t ap_manager_get_funopt(ap_manager_t* man, ap_funid_t funid);
bool ap_manager_get_abort_if_exception(ap_manager_t* man, ap_exc_t exn);

ap_exc_t ap_manager_get_exception(ap_manager_t* man);

ap_exclog_t* ap_manager_get_exclog(ap_manager_t* man);

bool ap_manager_get_flag_exact(ap_manager_t* man);
bool ap_manager_get_flag_best(ap_manager_t* man);


void ap_funopt_init(ap_funopt_t* fopt);
void ap_manager_set_funopt(ap_manager_t* man, ap_funid_t funid, ap_funopt_t* funopt);
void ap_manager_set_abort_if_exception(ap_manager_t* man, ap_exc_t exn, bool flag);

bool ap_fpu_init(void);







ap_manager_t* ap_manager_alloc(char* library, char* version,
          void* internal,
          void (*internal_free)(void*));
static inline
ap_manager_t* ap_manager_copy(ap_manager_t* man);

void ap_manager_raise_exception(ap_manager_t* man,
    ap_exc_t exn, ap_funid_t funid, const char* msg);




ap_exclog_t* ap_exc_cons(ap_exc_t exn,
    ap_funid_t funid, const char* msg,
    ap_exclog_t* tail);
void ap_exclog_free(ap_exclog_t* head);





static inline tbool_t tbool_of_int(int n)
{ return ((n) ? tbool_true : tbool_false); }
static inline tbool_t tbool_of_bool(bool a)
  { return ((a) ? tbool_true : tbool_false); }
static inline tbool_t tbool_or(tbool_t a, tbool_t b)
{
  return
    ( (a==tbool_true || b==tbool_true) ? tbool_true :
      ( (a==tbool_top || b==tbool_top) ? tbool_top :
 tbool_false ) );
}
static inline tbool_t tbool_and(tbool_t a, tbool_t b)
{
  return
    ( (a==tbool_false || b==tbool_false) ? tbool_false :
      ( (a==tbool_top || b==tbool_top) ? tbool_top :
 tbool_true ) );
}
static inline tbool_t tbool_not(tbool_t a)
{
  return
    a==tbool_false ? tbool_true :
    a==tbool_true ? tbool_false : a;
}
static inline
ap_manager_t* ap_manager_copy(ap_manager_t* man)
{ man->count++; return man; }
# 8 "/home/donquijote/dev/apron/include/ap_linearize.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_expr0.h" 1
# 9 "/home/donquijote/dev/apron/include/ap_linearize.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_abstract0.h" 1
# 11 "/home/donquijote/dev/apron/include/ap_abstract0.h"
typedef struct ap_abstract0_t ap_abstract0_t;
# 21 "/home/donquijote/dev/apron/include/ap_abstract0.h"
struct ap_abstract0_t {
  void* value;
  ap_manager_t* man;
};
# 34 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_abstract0_t* ap_abstract0_copy(ap_manager_t* man, ap_abstract0_t* a);



void ap_abstract0_free(ap_manager_t* man, ap_abstract0_t* a);


size_t ap_abstract0_size(ap_manager_t* man, ap_abstract0_t* a);
# 50 "/home/donquijote/dev/apron/include/ap_abstract0.h"
void ap_abstract0_minimize(ap_manager_t* man, ap_abstract0_t* a);




void ap_abstract0_canonicalize(ap_manager_t* man, ap_abstract0_t* a);


int ap_abstract0_hash(ap_manager_t* man, ap_abstract0_t* a);







void ap_abstract0_approximate(ap_manager_t* man, ap_abstract0_t* a, int algorithm);
# 79 "/home/donquijote/dev/apron/include/ap_abstract0.h"
void ap_abstract0_fprint(FILE* stream,
    ap_manager_t* man, ap_abstract0_t* a, char** name_of_dim);




void ap_abstract0_fprintdiff(FILE* stream,
        ap_manager_t* man,
        ap_abstract0_t* a1, ap_abstract0_t* a2,
        char** name_of_dim);





void ap_abstract0_fdump(FILE* stream, ap_manager_t* man, ap_abstract0_t* a);
# 103 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_membuf_t ap_abstract0_serialize_raw(ap_manager_t* man, ap_abstract0_t* a);






ap_abstract0_t* ap_abstract0_deserialize_raw(ap_manager_t* man, void* ptr, size_t* size);
# 125 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_abstract0_t* ap_abstract0_bottom(ap_manager_t* man, size_t intdim, size_t realdim);



ap_abstract0_t* ap_abstract0_top(ap_manager_t* man, size_t intdim, size_t realdim);


ap_abstract0_t* ap_abstract0_of_box(ap_manager_t* man,
        size_t intdim, size_t realdim,
        ap_interval_t** tinterval);







ap_dimension_t ap_abstract0_dimension(ap_manager_t* man, ap_abstract0_t* a);
# 160 "/home/donquijote/dev/apron/include/ap_abstract0.h"
bool ap_abstract0_is_bottom(ap_manager_t* man, ap_abstract0_t* a);
bool ap_abstract0_is_top(ap_manager_t* man, ap_abstract0_t* a);


bool ap_abstract0_is_leq(ap_manager_t* man, ap_abstract0_t* a1, ap_abstract0_t* a2);

bool ap_abstract0_is_eq(ap_manager_t* man, ap_abstract0_t* a1, ap_abstract0_t* a2);


bool ap_abstract0_sat_lincons(ap_manager_t* man, ap_abstract0_t* a, ap_lincons0_t* lincons);
bool ap_abstract0_sat_tcons(ap_manager_t* man, ap_abstract0_t* a, ap_tcons0_t* tcons);

bool ap_abstract0_sat_interval(ap_manager_t* man, ap_abstract0_t* a,
         ap_dim_t dim, ap_interval_t* interval);


bool ap_abstract0_is_dimension_unconstrained(ap_manager_t* man,
          ap_abstract0_t* a, ap_dim_t dim);







ap_interval_t* ap_abstract0_bound_linexpr(ap_manager_t* man,
       ap_abstract0_t* a, ap_linexpr0_t* expr);
ap_interval_t* ap_abstract0_bound_texpr(ap_manager_t* man,
     ap_abstract0_t* a, ap_texpr0_t* expr);




ap_interval_t* ap_abstract0_bound_dimension(ap_manager_t* man,
         ap_abstract0_t* a, ap_dim_t dim);




ap_lincons0_array_t ap_abstract0_to_lincons_array(ap_manager_t* man, ap_abstract0_t* a);





ap_tcons0_array_t ap_abstract0_to_tcons_array(ap_manager_t* man, ap_abstract0_t* a);




ap_interval_t** ap_abstract0_to_box(ap_manager_t* man, ap_abstract0_t* a);





ap_generator0_array_t ap_abstract0_to_generator_array(ap_manager_t* man, ap_abstract0_t* a);
# 229 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_abstract0_t* ap_abstract0_meet(ap_manager_t* man,
      bool destructive, ap_abstract0_t* a1, ap_abstract0_t* a2);

ap_abstract0_t* ap_abstract0_join(ap_manager_t* man,
      bool destructive, ap_abstract0_t* a1, ap_abstract0_t* a2);



ap_abstract0_t* ap_abstract0_meet_array(ap_manager_t* man,
     ap_abstract0_t** tab, size_t size);

ap_abstract0_t* ap_abstract0_join_array(ap_manager_t* man,
     ap_abstract0_t** tab, size_t size);





ap_abstract0_t*
ap_abstract0_meet_lincons_array(ap_manager_t* man,
    bool destructive, ap_abstract0_t* a, ap_lincons0_array_t* array);
ap_abstract0_t*
ap_abstract0_meet_tcons_array(ap_manager_t* man,
    bool destructive, ap_abstract0_t* a, ap_tcons0_array_t* array);


ap_abstract0_t*
ap_abstract0_add_ray_array(ap_manager_t* man,
      bool destructive, ap_abstract0_t* a, ap_generator0_array_t* array);






ap_abstract0_t*
ap_abstract0_assign_linexpr_array(ap_manager_t* man,
      bool destructive,
      ap_abstract0_t* org,
      ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
      ap_abstract0_t* dest);
ap_abstract0_t*
ap_abstract0_assign_texpr_array(ap_manager_t* man,
    bool destructive,
    ap_abstract0_t* org,
    ap_dim_t* tdim, ap_texpr0_t** texpr, size_t size,
    ap_abstract0_t* dest);
ap_abstract0_t*
ap_abstract0_substitute_linexpr_array(ap_manager_t* man,
          bool destructive,
          ap_abstract0_t* org,
          ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
          ap_abstract0_t* dest);
ap_abstract0_t*
ap_abstract0_substitute_texpr_array(ap_manager_t* man,
        bool destructive,
        ap_abstract0_t* org,
        ap_dim_t* tdim, ap_texpr0_t** texpr, size_t size,
        ap_abstract0_t* dest);
# 301 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_abstract0_t*
ap_abstract0_forget_array(ap_manager_t* man,
     bool destructive,
     ap_abstract0_t* a, ap_dim_t* tdim, size_t size,
     bool project);





ap_abstract0_t*
ap_abstract0_add_dimensions(ap_manager_t* man,
       bool destructive,
       ap_abstract0_t* a,ap_dimchange_t* dimchange,
       bool project);
ap_abstract0_t*
 ap_abstract0_remove_dimensions(ap_manager_t* man,
    bool destructive,
    ap_abstract0_t* a, ap_dimchange_t* dimchange);


ap_abstract0_t*
ap_abstract0_permute_dimensions(ap_manager_t* man,
    bool destructive,
    ap_abstract0_t* a, ap_dimperm_t* perm);






ap_abstract0_t*
ap_abstract0_expand(ap_manager_t* man,
      bool destructive,
      ap_abstract0_t* a, ap_dim_t dim, size_t n);
# 348 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_abstract0_t*
ap_abstract0_fold(ap_manager_t* man,
    bool destructive,
    ap_abstract0_t* a, ap_dim_t* tdim, size_t size);
# 360 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_abstract0_t* ap_abstract0_widening(ap_manager_t* man,
          ap_abstract0_t* a1, ap_abstract0_t* a2);






ap_abstract0_t* ap_abstract0_closure(ap_manager_t* man, bool destructive, ap_abstract0_t* a);







static inline
ap_manager_t* ap_abstract0_manager(ap_abstract0_t* a)
  { return a->man; }



ap_abstract0_t* ap_abstract0_of_lincons_array(ap_manager_t* man,
           size_t intdim, size_t realdim,
           ap_lincons0_array_t* array);
ap_abstract0_t* ap_abstract0_of_tcons_array(ap_manager_t* man,
         size_t intdim, size_t realdim,
         ap_tcons0_array_t* array);


ap_abstract0_t* ap_abstract0_assign_linexpr(ap_manager_t* man,
         bool destructive,
         ap_abstract0_t* org,
         ap_dim_t dim, ap_linexpr0_t* expr,
         ap_abstract0_t* dest);
ap_abstract0_t* ap_abstract0_assign_texpr(ap_manager_t* man,
       bool destructive,
       ap_abstract0_t* org,
       ap_dim_t dim, ap_texpr0_t* expr,
       ap_abstract0_t* dest);
ap_abstract0_t* ap_abstract0_substitute_linexpr(ap_manager_t* man,
      bool destructive,
      ap_abstract0_t* org,
      ap_dim_t dim, ap_linexpr0_t* expr,
      ap_abstract0_t* dest);
ap_abstract0_t* ap_abstract0_substitute_texpr(ap_manager_t* man,
           bool destructive,
           ap_abstract0_t* org,
           ap_dim_t dim, ap_texpr0_t* expr,
           ap_abstract0_t* dest);
# 421 "/home/donquijote/dev/apron/include/ap_abstract0.h"
ap_abstract0_t*
ap_abstract0_widening_threshold(ap_manager_t* man,
    ap_abstract0_t* a1, ap_abstract0_t* a2,
    ap_lincons0_array_t* array);







ap_abstract0_t*
ap_abstract0_meetjoin(ap_funid_t funid,

        ap_manager_t* man, bool destructive,
        ap_abstract0_t* a1, ap_abstract0_t* a2);
ap_abstract0_t*
ap_abstract0_asssub_linexpr(ap_funid_t funid,

       ap_manager_t* man,
       bool destructive,
       ap_abstract0_t* a,
       ap_dim_t dim, ap_linexpr0_t* expr,
       ap_abstract0_t* dest);
ap_abstract0_t*
ap_abstract0_asssub_linexpr_array(ap_funid_t funid,

      ap_manager_t* man,
      bool destructive,
      ap_abstract0_t* a,
      ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
      ap_abstract0_t* dest);
ap_abstract0_t*
ap_abstract0_asssub_texpr(ap_funid_t funid,

     ap_manager_t* man,
     bool destructive,
     ap_abstract0_t* a,
     ap_dim_t dim, ap_texpr0_t* expr,
     ap_abstract0_t* dest);
ap_abstract0_t*
ap_abstract0_asssub_texpr_array(ap_funid_t funid,

    ap_manager_t* man,
    bool destructive,
    ap_abstract0_t* a,
    ap_dim_t* tdim, ap_texpr0_t** texpr, size_t size,
    ap_abstract0_t* dest);
# 10 "/home/donquijote/dev/apron/include/ap_linearize.h" 2
# 20 "/home/donquijote/dev/apron/include/ap_linearize.h"
ap_interval_t* ap_eval_linexpr0(ap_manager_t* man,
    ap_abstract0_t* abs,
    ap_linexpr0_t* expr,
    ap_scalar_discr_t discr,
    bool* pexact);
# 65 "/home/donquijote/dev/apron/include/ap_linearize.h"
ap_linexpr0_t*
ap_quasilinearize_linexpr0(ap_manager_t* man,
      void* abs,
      ap_linexpr0_t* linexpr0,
      bool* pexact,
      ap_scalar_discr_t discr);

ap_lincons0_t
ap_quasilinearize_lincons0(ap_manager_t* man,
      void* abs,
      ap_lincons0_t* lincons0,
      bool* pexact,
      ap_scalar_discr_t discr,
      bool meet);

ap_linexpr0_t**
ap_quasilinearize_linexpr0_array(ap_manager_t* man,
     void* abs,
     ap_linexpr0_t** texpr, size_t size,
     bool* pexact,
     ap_scalar_discr_t discr);

ap_lincons0_array_t
ap_quasilinearize_lincons0_array(ap_manager_t* man,
     void* abs,
     ap_lincons0_array_t* array,
     bool* pexact,
     ap_scalar_discr_t discr,
     bool linearize,
     bool meet);





ap_interval_t* ap_eval_texpr0(ap_manager_t* man,
         ap_abstract0_t* abs,
         ap_texpr0_t* expr,
         ap_scalar_discr_t discr,
         bool* pexact);
# 120 "/home/donquijote/dev/apron/include/ap_linearize.h"
ap_linexpr0_t* ap_intlinearize_texpr0_intlinear(ap_manager_t* man,
      ap_texpr0_t* expr,
      ap_scalar_discr_t discr);





ap_linexpr0_t* ap_intlinearize_texpr0(ap_manager_t* man,
          ap_abstract0_t* abs,
          ap_texpr0_t* expr,
          bool* pexact,
          ap_scalar_discr_t discr,
          bool quasilinearize);

ap_linexpr0_t** ap_intlinearize_texpr0_array(ap_manager_t* man,
          ap_abstract0_t* abs,
          ap_texpr0_t** texpr, size_t size,
          bool* pexact,
          ap_scalar_discr_t discr,
          bool quasilinearize);

ap_lincons0_t ap_intlinearize_tcons0(ap_manager_t* man,
         ap_abstract0_t* abs,
         ap_tcons0_t* cons,
         bool* pexact,
         ap_scalar_discr_t discr,
         bool quasilinearize, bool meet);

ap_lincons0_array_t ap_intlinearize_tcons0_array(ap_manager_t* man,
       ap_abstract0_t* abs,
       ap_tcons0_array_t* array,
       bool* pexact,
       ap_scalar_discr_t discr,
       ap_linexpr_type_t type, bool meet,
       bool boxize, size_t kmax, bool intervalonly);
# 17 "/home/donquijote/dev/apron/include/ap_expr0.h" 2
# 10 "/home/donquijote/dev/apron/include/itv_linexpr.h" 2
# 20 "/home/donquijote/dev/apron/include/itv_linexpr.h"
typedef struct itv_linterm_t {
  itv_t itv;
  bool equality;

  ap_dim_t dim;
} itv_linterm_t;


typedef struct itv_linexpr_t {
  itv_linterm_t* linterm;
  size_t size;
  itv_t cst;
  bool equality;

} itv_linexpr_t;


typedef struct itv_lincons_t {
  itv_linexpr_t linexpr;
  ap_constyp_t constyp;
  num_t num;
} itv_lincons_t;


typedef struct itv_lincons_array_t {
  itv_lincons_t* p;
  size_t size;
} itv_lincons_array_t;
# 75 "/home/donquijote/dev/apron/include/itv_linexpr.h"
static inline void itv_linterm_init(itv_linterm_t* term);
static inline void itv_linterm_init_set(itv_linterm_t* res, itv_linterm_t* term);
static inline void itv_linterm_set(itv_linterm_t* res, itv_linterm_t* term);
static inline void itv_linterm_clear(itv_linterm_t* term);
static inline void itv_linterm_swap(itv_linterm_t* a, itv_linterm_t* b);

static inline void itv_linexpr_init(itv_linexpr_t* expr, size_t size);
static inline void itv_linexpr_init_set(itv_linexpr_t* res, itv_linexpr_t* expr);
static inline void itv_linexpr_set(itv_linexpr_t* res, itv_linexpr_t* expr);
static inline void itv_linexpr_reinit(itv_linexpr_t* expr, size_t size);
static inline void itv_linexpr_clear(itv_linexpr_t* expr);
static inline void itv_linexpr_fprint(FILE* stream, itv_linexpr_t* expr, char** name);
static inline void itv_linexpr_print(itv_linexpr_t* expr, char** name);

static inline void itv_lincons_init(itv_lincons_t* cons);
static inline void itv_lincons_set(itv_lincons_t* res, itv_lincons_t* expr);
static inline void itv_lincons_set_bool(itv_lincons_t* res, bool value);
static inline void itv_lincons_clear(itv_lincons_t* cons);
static inline void itv_lincons_fprint(FILE* stream, itv_lincons_t* cons, char** name);
static inline void itv_lincons_print(itv_lincons_t* cons, char** name);
static inline void itv_lincons_swap(itv_lincons_t* a, itv_lincons_t* b);

static inline void itv_lincons_array_init(itv_lincons_array_t* array, size_t size);
static inline void itv_lincons_array_reinit(itv_lincons_array_t* array, size_t size);
static inline void itv_lincons_array_clear(itv_lincons_array_t* array);
static inline void itv_lincons_array_fprint(FILE* stream, itv_lincons_array_t* array, char** name);
static inline void itv_lincons_array_print(itv_lincons_array_t* array, char** name);





static inline bool itv_linexpr_set_ap_linexpr0(itv_internal_t* intern,
 itv_linexpr_t* expr,
 ap_linexpr0_t* linexpr0);




static inline bool itv_lincons_set_ap_lincons0(itv_internal_t* intern,
 itv_lincons_t* cons,
 ap_lincons0_t* lincons0);





static inline bool itv_lincons_array_set_ap_lincons0_array(itv_internal_t* intern,
          itv_lincons_array_t* tcons, ap_lincons0_array_t* tlincons0);





static inline void ap_linexpr0_set_itv_linexpr(itv_internal_t* intern,
            ap_linexpr0_t** plinexpr0, itv_linexpr_t* linexpr);




static inline void ap_lincons0_set_itv_lincons(itv_internal_t* intern,
            ap_lincons0_t* plincons0, itv_lincons_t* lincons);
# 145 "/home/donquijote/dev/apron/include/itv_linexpr.h"
static inline void itv_linexpr_neg(itv_linexpr_t* expr);

static inline void itv_linexpr_scale(itv_internal_t* intern,
         itv_linexpr_t* expr, itv_t coeff);


static inline void itv_linexpr_add(itv_internal_t* intern,
       itv_linexpr_t* expr,
       itv_linexpr_t* exprA,
       itv_linexpr_t* exprB);
static inline void itv_linexpr_sub(itv_internal_t* intern,
       itv_linexpr_t* expr,
       itv_linexpr_t* exprA,
       itv_linexpr_t* exprB);







static inline bool itv_linexpr_is_integer(itv_linexpr_t* expr, size_t intdim);
static inline bool itv_lincons_is_integer(itv_lincons_t* cons, size_t intdim);
static inline bool itv_linexpr_is_scalar(itv_linexpr_t* expr);
static inline bool itv_linexpr_is_quasilinear(itv_linexpr_t* expr);
static inline bool itv_linexpr_is_integer(itv_linexpr_t* expr, size_t intdim);
static inline bool itv_lincons_is_scalar(itv_lincons_t* expr);
static inline bool itv_lincons_is_quasilinear(itv_lincons_t* expr);
static inline bool itv_lincons_array_is_scalar(itv_lincons_array_t* array);
static inline bool itv_lincons_array_is_quasilinear(itv_lincons_array_t* array);
static inline bool itv_linexpr_is_integer(itv_linexpr_t* expr, size_t intdim);
static inline bool itv_lincons_is_integer(itv_lincons_t* cons, size_t intdim);

static inline tbool_t itv_eval_cstlincons(itv_internal_t* intern,
       itv_lincons_t* lincons);


static inline bool itv_sat_lincons_is_false(itv_internal_t* intern,
         itv_lincons_t* lincons);
# 193 "/home/donquijote/dev/apron/include/itv_linexpr.h"
static inline void itv_lincons_reduce_integer(itv_internal_t* intern,
           itv_lincons_t* cons, size_t intdim);
# 207 "/home/donquijote/dev/apron/include/itv_linexpr.h"
static inline tbool_t itv_lincons_array_reduce(itv_internal_t* intern,
            itv_lincons_array_t* array, bool meet);
# 218 "/home/donquijote/dev/apron/include/itv_linexpr.h"
static inline tbool_t itv_lincons_array_reduce_integer(itv_internal_t* intern,
             itv_lincons_array_t* array,
             size_t intdim);







void itv_linexpr_init_Rll(itv_linexpr_t* expr, size_t size);
void itv_linexpr_init_set_Rll(itv_linexpr_t* res, itv_linexpr_t* expr);
void itv_linexpr_set_Rll(itv_linexpr_t* res, itv_linexpr_t* expr);
void itv_linexpr_reinit_Rll(itv_linexpr_t* expr, size_t size);
void itv_linexpr_clear_Rll(itv_linexpr_t* expr);
void itv_linexpr_fprint_Rll(FILE* stream, itv_linexpr_t* expr, char** name);
void itv_lincons_set_bool_Rll(itv_lincons_t* cons, bool value);
void itv_lincons_fprint_Rll(FILE* stream, itv_lincons_t* cons, char** name);

void itv_lincons_array_init_Rll(itv_lincons_array_t* array, size_t size);
void itv_lincons_array_reinit_Rll(itv_lincons_array_t* array, size_t size);
void itv_lincons_array_clear_Rll(itv_lincons_array_t* array);
void itv_lincons_array_fprint_Rll(FILE* stream, itv_lincons_array_t* array, char** name);

bool itv_linexpr_set_ap_linexpr0_Rll(itv_internal_t* intern, itv_linexpr_t* expr, ap_linexpr0_t* linexpr0);
bool itv_lincons_set_ap_lincons0_Rll(itv_internal_t* intern, itv_lincons_t* cons, ap_lincons0_t* lincons0);
bool itv_lincons_array_set_ap_lincons0_array_Rll(itv_internal_t* intern, itv_lincons_array_t* tcons, ap_lincons0_array_t* tlincons0);

void ap_linexpr0_set_itv_linexpr_Rll(itv_internal_t* intern, ap_linexpr0_t** linexpr0, itv_linexpr_t* linexpr);
void ap_lincons0_set_itv_lincons_Rll(itv_internal_t* intern, ap_lincons0_t* lincons0, itv_lincons_t* lincons);

void itv_linexpr_neg_Rll(itv_linexpr_t* expr);
void itv_linexpr_scale_Rll(itv_internal_t* intern, itv_linexpr_t* expr, itv_t coeff);
void itv_linexpr_div_Rll(itv_internal_t* intern, itv_linexpr_t* expr, itv_t coeff);
void itv_linexpr_add_Rll(itv_internal_t* intern, itv_linexpr_t* expr, itv_linexpr_t* exprA, itv_linexpr_t* exprB);
void itv_linexpr_sub_Rll(itv_internal_t* intern, itv_linexpr_t* expr, itv_linexpr_t* exprA, itv_linexpr_t* exprB);

bool itv_linexpr_is_scalar_Rll(itv_linexpr_t* expr);
bool itv_linexpr_is_quasilinear_Rll(itv_linexpr_t* expr);
bool itv_lincons_array_is_scalar_Rll(itv_lincons_array_t* array);
bool itv_lincons_array_is_quasilinear_Rll(itv_lincons_array_t* array);
bool itv_linexpr_is_integer_Rll(itv_linexpr_t* expr, size_t intdim);
bool itv_lincons_is_integer_Rll(itv_lincons_t* cons, size_t intdim);

tbool_t itv_eval_cstlincons_Rll(itv_internal_t* intern, itv_lincons_t* lincons);
bool itv_sat_lincons_is_false_Rll(itv_internal_t* intern, itv_lincons_t* lincons);
void itv_lincons_reduce_integer_Rll(itv_internal_t* intern, itv_lincons_t* cons, size_t intdim);
tbool_t itv_lincons_array_reduce_Rll(itv_internal_t* intern, itv_lincons_array_t* array, bool meet);
tbool_t itv_lincons_array_reduce_integer_Rll(itv_internal_t* intern, itv_lincons_array_t* array, size_t intdim);


static inline void itv_linterm_init(itv_linterm_t* term)
{ itv_init(term->itv); term->equality = true; term->dim = (2147483647 * 2U + 1U); }
static inline void itv_linterm_init_set(itv_linterm_t* res, itv_linterm_t* term)
{ itv_init_set(res->itv,term->itv); res->equality = term->equality; res->dim = term->dim; }
static inline void itv_linterm_set(itv_linterm_t* res, itv_linterm_t* term)
{ itv_set(res->itv,term->itv); res->equality = term->equality; res->dim = term->dim; }
static inline void itv_linterm_clear(itv_linterm_t* term)
{ itv_clear(term->itv); }
static inline void itv_linterm_swap(itv_linterm_t* a, itv_linterm_t* b)
{ if (a!=b){ itv_linterm_t t=*a; *a=*b; *b=t; } }

static inline void itv_linexpr_init(itv_linexpr_t* expr, size_t size)
{ itv_linexpr_init_Rll(expr,size); }
static inline void itv_linexpr_init_set(itv_linexpr_t* res, itv_linexpr_t* expr)
{ itv_linexpr_init_set_Rll(res,expr); }
static inline void itv_linexpr_set(itv_linexpr_t* res, itv_linexpr_t* expr)
{ itv_linexpr_set_Rll(res,expr); }

static inline void itv_linexpr_reinit(itv_linexpr_t* expr, size_t size)
{ itv_linexpr_reinit_Rll(expr,size); }

static inline void itv_linexpr_clear(itv_linexpr_t* expr)
{ itv_linexpr_clear_Rll(expr); }

static inline void itv_linexpr_fprint(FILE* stream, itv_linexpr_t* expr, char** name)
{ itv_linexpr_fprint_Rll(stream,expr,name); }

static inline void itv_linexpr_print(itv_linexpr_t* expr, char** name)
{ itv_linexpr_fprint(stdout,expr,name); }

static inline void itv_lincons_init(itv_lincons_t* cons)
{ itv_linexpr_init(&cons->linexpr,0); num_init(cons->num); }
static inline void itv_lincons_set(itv_lincons_t* a, itv_lincons_t* b)
{ if (a!=b){ itv_linexpr_set(&a->linexpr,&b->linexpr); num_set(a->num,b->num); a->constyp = b->constyp; } }
static inline void itv_lincons_set_bool(itv_lincons_t* a, bool value)
{ itv_lincons_set_bool_Rll(a,value); }
static inline void itv_lincons_clear(itv_lincons_t* cons)
{ itv_linexpr_clear(&cons->linexpr); num_clear(cons->num); }

static inline void itv_lincons_fprint(FILE* stream, itv_lincons_t* cons, char** name)
{ itv_lincons_fprint_Rll(stream,cons,name); }

static inline void itv_lincons_print(itv_lincons_t* cons, char** name)
{ itv_lincons_fprint(stdout,cons,name); }
static inline void itv_lincons_swap(itv_lincons_t* a, itv_lincons_t* b)
{ if (a!=b){ itv_lincons_t t=*a; *a=*b; *b=t; } }

static inline void itv_lincons_array_init(itv_lincons_array_t* array, size_t size)
{ itv_lincons_array_init_Rll(array,size); }

static inline void itv_lincons_array_reinit(itv_lincons_array_t* array, size_t size)
{ itv_lincons_array_reinit_Rll(array,size); }

static inline void itv_lincons_array_clear(itv_lincons_array_t* array)
{ itv_lincons_array_clear_Rll(array); }

static inline void itv_lincons_array_fprint(FILE* stream, itv_lincons_array_t* array, char** name)
{ itv_lincons_array_fprint_Rll(stream,array,name); }

static inline void itv_lincons_array_print(itv_lincons_array_t* array, char** name)
{ itv_lincons_array_fprint(stdout,array,name); }


static inline bool itv_linexpr_set_ap_linexpr0(itv_internal_t* intern, itv_linexpr_t* expr, ap_linexpr0_t* linexpr0)
{ return itv_linexpr_set_ap_linexpr0_Rll(intern,expr,linexpr0); }

static inline bool itv_lincons_set_ap_lincons0(itv_internal_t* intern, itv_lincons_t* cons, ap_lincons0_t* lincons0)
{ return itv_lincons_set_ap_lincons0_Rll(intern,cons,lincons0); }

static inline bool itv_lincons_array_set_ap_lincons0_array(itv_internal_t* intern, itv_lincons_array_t* tcons, ap_lincons0_array_t* tlincons0)
{ return itv_lincons_array_set_ap_lincons0_array_Rll(intern,tcons,tlincons0); }

static inline void ap_linexpr0_set_itv_linexpr(itv_internal_t* intern, ap_linexpr0_t** expr, itv_linexpr_t* linexpr0)
{ ap_linexpr0_set_itv_linexpr_Rll(intern,expr,linexpr0); }

static inline void ap_lincons0_set_itv_lincons(itv_internal_t* intern, ap_lincons0_t* cons, itv_lincons_t* lincons0)
{ ap_lincons0_set_itv_lincons_Rll(intern,cons,lincons0); }

static inline void itv_linexpr_neg(itv_linexpr_t* expr)
{ itv_linexpr_neg_Rll(expr); }

static inline void itv_linexpr_scale(itv_internal_t* intern, itv_linexpr_t* expr, itv_t coeff)
{ itv_linexpr_scale_Rll(intern,expr,coeff); }

static inline void itv_linexpr_div(itv_internal_t* intern, itv_linexpr_t* expr, itv_t coeff)
{ itv_linexpr_div_Rll(intern,expr,coeff); }

static inline void itv_linexpr_add(itv_internal_t* intern, itv_linexpr_t* expr, itv_linexpr_t* exprA, itv_linexpr_t* exprB)
{ itv_linexpr_add_Rll(intern,expr,exprA,exprB); }

static inline void itv_linexpr_sub(itv_internal_t* intern, itv_linexpr_t* expr, itv_linexpr_t* exprA, itv_linexpr_t* exprB)
{ itv_linexpr_sub_Rll(intern,expr,exprA,exprB); }

static inline bool itv_linexpr_is_scalar(itv_linexpr_t* expr)
{ return itv_linexpr_is_scalar_Rll(expr); }
static inline bool itv_linexpr_is_quasilinear(itv_linexpr_t* expr)
{ return itv_linexpr_is_quasilinear_Rll(expr); }
static inline bool itv_lincons_is_scalar(itv_lincons_t* cons)
{ return itv_linexpr_is_scalar_Rll(&cons->linexpr); }
static inline bool itv_lincons_is_quasilinear(itv_lincons_t* cons)
{ return itv_linexpr_is_quasilinear_Rll(&cons->linexpr); }
static inline bool itv_lincons_array_is_scalar(itv_lincons_array_t* array)
{ return itv_lincons_array_is_scalar_Rll(array); }
static inline bool itv_lincons_array_is_quasilinear(itv_lincons_array_t* array)
{ return itv_lincons_array_is_quasilinear_Rll(array); }
static inline bool itv_linexpr_is_integer(itv_linexpr_t* expr, size_t intdim)
{ return itv_linexpr_is_integer_Rll(expr,intdim); }
static inline bool itv_lincons_is_integer(itv_lincons_t* cons, size_t intdim)
{ return itv_linexpr_is_integer_Rll(&cons->linexpr,intdim); }
static inline tbool_t itv_eval_cstlincons(itv_internal_t* intern, itv_lincons_t* lincons)
{ return itv_eval_cstlincons_Rll(intern,lincons); }
static inline bool itv_sat_lincons_is_false(itv_internal_t* intern, itv_lincons_t* lincons)
{ return itv_sat_lincons_is_false_Rll(intern,lincons); }
static inline void itv_lincons_reduce_integer(itv_internal_t* intern, itv_lincons_t* cons, size_t intdim)
{ itv_lincons_reduce_integer_Rll(intern,cons,intdim); }
static inline tbool_t itv_lincons_array_reduce(itv_internal_t* intern, itv_lincons_array_t* array, bool meet)
{ return itv_lincons_array_reduce_Rll(intern,array,meet); }
static inline tbool_t itv_lincons_array_reduce_integer(itv_internal_t* intern, itv_lincons_array_t* array, size_t intdim)
{ return itv_lincons_array_reduce_integer_Rll(intern,array,intdim); }
# 19 "pk_config.h" 2

# 1 "/home/donquijote/dev/apron/include/ap_coeff.h" 1
# 21 "pk_config.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_dimension.h" 1
# 22 "pk_config.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_expr0.h" 1
# 23 "pk_config.h" 2
# 1 "/home/donquijote/dev/apron/include/ap_manager.h" 1
# 24 "pk_config.h" 2
# 39 "pk_config.h"
static inline size_t numint_size(numint_t a)

{ return 1; }
# 53 "pk_config.h"
static inline size_t numint_size2(numint_t a)
{
  numint_t x;
  if (a==0) return 0;
  numint_abs(x,a);
  return (size_t)(
    sizeof(numint_t)*8 -



    __builtin_clzll((unsigned long long int)(*x))

    );
}
# 118 "pk_config.h"
static const size_t polka_cst = 1;
static const size_t polka_eps = 2;
# 9 "pk_extract.c" 2
# 1 "pk_vector.h" 1
# 16 "pk_vector.h"
# 1 "pk_internal.h" 1
# 12 "pk_internal.h"
# 1 "pk_bit.h" 1
# 26 "pk_bit.h"
typedef unsigned int bitstring_t;
typedef struct bitindex_t {
  size_t index;
  size_t word;
  bitstring_t bit;
} bitindex_t;





void bitindex_print(bitindex_t* bi);
void bitindex_fprint(FILE* stream, bitindex_t* bi);
bitindex_t bitindex_init(size_t col);
void bitindex_inc(bitindex_t*);
void bitindex_dec(bitindex_t*);
size_t bitindex_size(size_t n);


bitstring_t* bitstring_alloc(size_t n);
bitstring_t* bitstring_realloc(bitstring_t* b, size_t n);
void bitstring_free(bitstring_t* b);
void bitstring_clear(bitstring_t* b, size_t size);
void bitstring_copy(bitstring_t* b2, bitstring_t* b1, size_t size);
int bitstring_cmp(bitstring_t* r1, bitstring_t* r2, size_t size);

void bitstring_print(bitstring_t* b, size_t size);
void bitstring_fprint(FILE* stream, bitstring_t* b, size_t size);

int bitstring_get(bitstring_t* b, bitindex_t ix);
void bitstring_set(bitstring_t* b, bitindex_t ix);
void bitstring_clr(bitstring_t* b, bitindex_t ix);
# 13 "pk_internal.h" 2
# 1 "pk.h" 1
# 16 "pk.h"
# 1 "/home/donquijote/dev/apron/include/ap_global0.h" 1
# 19 "/home/donquijote/dev/apron/include/ap_global0.h"
# 1 "/home/donquijote/dev/apron/include/ap_texpr0.h" 1
# 20 "/home/donquijote/dev/apron/include/ap_global0.h" 2
# 17 "pk.h" 2







typedef enum pk_status_t {
  pk_status_conseps=0x1,
  pk_status_consgauss=0x2,
  pk_status_gengauss=0x4,
  pk_status_minimaleps=0x8
} pk_status_t;

struct pk_t {

  struct matrix_t* C;
  struct matrix_t* F;
  struct satmat_t* satC;
  struct satmat_t* satF;
  size_t intdim;
  size_t realdim;
  size_t nbeq;
  size_t nbline;
  pk_status_t status;
};

typedef struct pk_t pk_t;
typedef struct pk_internal_t pk_internal_t;
# 61 "pk.h"
ap_manager_t* pk_manager_alloc(bool strict);
# 74 "pk.h"
pk_internal_t* pk_manager_get_internal(ap_manager_t* man);




void pk_set_max_coeff_size(pk_internal_t* pk, size_t size);
void pk_set_approximate_max_coeff_size(pk_internal_t* pk, size_t size);
size_t pk_get_max_coeff_size(pk_internal_t* pk);
size_t pk_get_approximate_max_coeff_size(pk_internal_t* pk);





pk_t* pk_of_abstract0(ap_abstract0_t* abstract);



ap_abstract0_t* pk_to_abstract0(ap_manager_t* man, pk_t* poly);
# 102 "pk.h"
struct pk_internal_t* pk_internal_alloc(bool strict);

void pk_internal_free(pk_internal_t* pk);
# 115 "pk.h"
pk_t* pk_copy(ap_manager_t* man, pk_t* a);



void pk_free(ap_manager_t* man, pk_t* a);


size_t pk_size(ap_manager_t* man, pk_t* a);
# 131 "pk.h"
void pk_minimize(ap_manager_t* man, pk_t* a);




void pk_canonicalize(ap_manager_t* man, pk_t* a);




int pk_hash(ap_manager_t* man, pk_t* a);






void pk_approximate(ap_manager_t* man, pk_t* a, int algorithm);
# 174 "pk.h"
void pk_fprint(FILE* stream,
        ap_manager_t* man,
        pk_t* a,
        char** name_of_dim);



void pk_fprintdiff(FILE* stream,
     ap_manager_t* man,
     pk_t* a1, pk_t* a2,
     char** name_of_dim);






void pk_fdump(FILE* stream, ap_manager_t* man, pk_t* a);
# 200 "pk.h"
ap_membuf_t pk_serialize_raw(ap_manager_t* man, pk_t* a);






pk_t* pk_deserialize_raw(ap_manager_t* man, void* ptr, size_t* size);
# 223 "pk.h"
pk_t* pk_bottom(ap_manager_t* man, size_t intdim, size_t realdim);


pk_t* pk_top(ap_manager_t* man, size_t intdim, size_t realdim);



pk_t* pk_of_box(ap_manager_t* man,
  size_t intdim, size_t realdim,
  ap_interval_t** tinterval);







ap_dimension_t pk_dimension(ap_manager_t* man, pk_t* a);






bool pk_is_bottom(ap_manager_t* man, pk_t* a);




bool pk_is_top(ap_manager_t* man, pk_t* a);





bool pk_is_leq(ap_manager_t* man, pk_t* a1, pk_t* a2);






bool pk_is_eq(ap_manager_t* man, pk_t* a1, pk_t* a2);





bool pk_sat_lincons(ap_manager_t* man, pk_t* a, ap_lincons0_t* lincons);






bool pk_sat_tcons(ap_manager_t* man, pk_t* a, ap_tcons0_t* cons);


bool pk_sat_interval(ap_manager_t* man, pk_t* a,
       ap_dim_t dim, ap_interval_t* interval);






bool pk_is_dimension_unconstrained(ap_manager_t* man, pk_t* po,
       ap_dim_t dim);
# 301 "pk.h"
ap_interval_t* pk_bound_linexpr(ap_manager_t* man,
    pk_t* a, ap_linexpr0_t* expr);







ap_interval_t* pk_bound_texpr(ap_manager_t* man,
         pk_t* a, ap_texpr0_t* expr);



ap_interval_t* pk_bound_dimension(ap_manager_t* man,
      pk_t* a, ap_dim_t dim);







ap_lincons0_array_t pk_to_lincons_array(ap_manager_t* man, pk_t* a);





ap_tcons0_array_t pk_to_tcons_array(ap_manager_t* man, pk_t* a);



ap_interval_t** pk_to_box(ap_manager_t* man, pk_t* a);
# 343 "pk.h"
ap_generator0_array_t pk_to_generator_array(ap_manager_t* man, pk_t* a);
# 356 "pk.h"
pk_t* pk_meet(ap_manager_t* man, bool destructive, pk_t* a1, pk_t* a2);
pk_t* pk_join(ap_manager_t* man, bool destructive, pk_t* a1, pk_t* a2);


pk_t* pk_meet_array(ap_manager_t* man, pk_t** tab, size_t size);
pk_t* pk_join_array(ap_manager_t* man, pk_t** tab, size_t size);


pk_t* pk_meet_lincons_array(ap_manager_t* man,
       bool destructive, pk_t* a,
       ap_lincons0_array_t* array);
pk_t* pk_meet_tcons_array(ap_manager_t* man,
     bool destructive, pk_t* a,
     ap_tcons0_array_t* array);


pk_t* pk_add_ray_array(ap_manager_t* man,
         bool destructive, pk_t* a,
         ap_generator0_array_t* array);






pk_t* pk_assign_linexpr_array(ap_manager_t* man,
         bool destructive, pk_t* a,
         ap_dim_t* tdim,
         ap_linexpr0_t** texpr,
         size_t size,
         pk_t* dest);
pk_t* pk_substitute_linexpr_array(ap_manager_t* man,
      bool destructive, pk_t* a,
      ap_dim_t* tdim,
      ap_linexpr0_t** texpr,
      size_t size,
      pk_t* dest);
pk_t* pk_assign_texpr_array(ap_manager_t* man,
       bool destructive, pk_t* a,
       ap_dim_t* tdim,
       ap_texpr0_t** texpr,
       size_t size,
       pk_t* dest);
pk_t* pk_substitute_texpr_array(ap_manager_t* man,
    bool destructive, pk_t* a,
    ap_dim_t* tdim,
    ap_texpr0_t** texpr,
    size_t size,
    pk_t* dest);







pk_t* pk_forget_array(ap_manager_t* man,
        bool destructive, pk_t* a,
        ap_dim_t* tdim, size_t size,
        bool project);





pk_t* pk_add_dimensions(ap_manager_t* man,
   bool destructive, pk_t* a,
   ap_dimchange_t* dimchange,
   bool project);

pk_t* pk_remove_dimensions(ap_manager_t* man,
      bool destructive, pk_t* a,
      ap_dimchange_t* dimchange);
pk_t* pk_permute_dimensions(ap_manager_t* man,
       bool destructive,
       pk_t* a,
       ap_dimperm_t* permutation);





pk_t* pk_expand(ap_manager_t* man,
  bool destructive, pk_t* a,
  ap_dim_t dim,
  size_t n);
# 453 "pk.h"
pk_t* pk_fold(ap_manager_t* man,
       bool destructive, pk_t* a,
       ap_dim_t* tdim,
       size_t size);
# 467 "pk.h"
pk_t* pk_widening(ap_manager_t* man, pk_t* a1, pk_t* a2);







pk_t* pk_closure(ap_manager_t* man, bool destructive, pk_t* a);
# 14 "pk_internal.h" 2
# 26 "pk_internal.h"
struct pk_internal_t {
  enum ap_exc_t exn;

  bool strict;
  size_t dec;

  size_t maxdims;
  size_t maxcols;
  size_t maxrows;

  ap_funid_t funid;
  ap_funopt_t* funopt;

  size_t max_coeff_size;
  size_t approximate_max_coeff_size;

  numint_t* vector_numintp;

  mpq_t* vector_mpqp;

  numint_t* vector_tmp;

  ap_dim_t* matrix_dimp;
  numint_t matrix_acc;
  numint_t matrix_prod;


  int* cherni_intp;
  numint_t cherni_prod;

  itv_internal_t* itv;
  bound_t poly_bound;
  itv_t poly_itv;
  itv_linexpr_t poly_itv_linexpr;
  itv_lincons_t poly_itv_lincons;
  numrat_t poly_numrat;
  numint_t* poly_numintp;
  numint_t* poly_numintp2;

  ap_dim_t* poly_dimp;
  ap_dim_t* poly_dimp2;
  ap_dim_t* poly_fold_dimp;
  struct matrix_t* poly_matspecial;
  numint_t poly_prod;
};





pk_internal_t* pk_internal_alloc(bool strict);

void pk_internal_free(pk_internal_t* pk);

void pk_internal_realloc_lazy(pk_internal_t* pk, size_t maxdims);


static inline pk_internal_t* pk_init_from_manager(ap_manager_t* man, ap_funid_t funid);





static inline pk_internal_t* pk_init_from_manager(ap_manager_t* man, ap_funid_t funid)
{
  pk_internal_t* pk = (pk_internal_t*)man->internal;
  pk->funid = funid;
  pk->funopt = &man->option.funopt[funid];
  man->result.flag_exact = man->result.flag_best = false;
  return pk;
}
# 17 "pk_vector.h" 2






numint_t* vector_alloc(size_t size);
void vector_realloc(numint_t** q, size_t size, size_t nsize);
void vector_free(numint_t* q, size_t size);
void vector_clear(numint_t* q, size_t size);
void vector_copy(numint_t* q1, numint_t* q2, size_t size);
void vector_print(numint_t* q, size_t size);


bool vector_normalize(pk_internal_t* pk,
        numint_t* q, size_t size);
bool vector_normalize_expr(pk_internal_t* pk,
      numint_t* q, size_t size);
bool vector_normalize_constraint(pk_internal_t* pk,
     numint_t* q,
     size_t intdim, size_t realdim);
bool vector_normalize_constraint_int(pk_internal_t* pk,
         numint_t* q,
         size_t intdim, size_t realdim);


int vector_compare(pk_internal_t* pk,
     numint_t* q1, numint_t* q2, size_t size);


void vector_combine(pk_internal_t* pk,
      numint_t* q1, numint_t* q2,
      numint_t* q3, size_t k, size_t size);
void vector_product(pk_internal_t* pk,
      numint_t prod,
      numint_t* q1, numint_t* q2, size_t size);
void vector_product_strict(pk_internal_t* pk,
      numint_t prod,
      numint_t* r1, numint_t* r2, size_t size);


bool vector_is_null(pk_internal_t* pk,
      numint_t* q, size_t size);
bool vector_is_null_strict(pk_internal_t* pk,
      numint_t* q, size_t size);
bool vector_is_positivity_constraint(pk_internal_t* pk,
         numint_t* q, size_t size);
bool vector_is_dummy_constraint(pk_internal_t* pk,
      numint_t* q, size_t size);
bool vector_is_dummy_or_strict_generator(pk_internal_t* pk,
      numint_t* q, size_t size);
bool vector_is_integer(pk_internal_t* pk,
         numint_t* vec,
         size_t intdim, size_t realdim);
long vector_hash(pk_internal_t* pk,
   numint_t* vec,size_t size);

numint_t* _vector_alloc_int(size_t size);
void vector_gcd(pk_internal_t* pk,
  numint_t* q, size_t size, numint_t gcd);
# 10 "pk_extract.c" 2
# 1 "pk_satmat.h" 1
# 25 "pk_satmat.h"
typedef struct satmat_t {

  bitstring_t** p;
  size_t nbrows;
  size_t nbcolumns;

  size_t _maxrows;
} satmat_t;

satmat_t* satmat_alloc(size_t nbrows, size_t nbcols);
void satmat_resize_rows(satmat_t* sat, size_t nbrows);
void satmat_resize_cols(satmat_t* sat, size_t nbcols);
satmat_t* satmat_copy_resize_cols(satmat_t* sat, size_t nbcols);
void satmat_free(satmat_t* sat);
void satmat_clear(satmat_t* sat);
satmat_t* satmat_copy(satmat_t* sat);
void satmat_print(satmat_t* sat);
void satmat_fprint(FILE* stream, satmat_t* sat);

bitstring_t satmat_get(satmat_t* sat, size_t i, bitindex_t jx);
void satmat_set(satmat_t* sat, size_t i, bitindex_t jx);
void satmat_clr(satmat_t* sat, size_t i, bitindex_t jx);

satmat_t* satmat_transpose(satmat_t* org, size_t nbcols);

void satmat_exch_rows(satmat_t* sat, size_t l1, size_t l2);
void satmat_move_rows(satmat_t* sat, size_t destrow, size_t orgrow, size_t size);
# 11 "pk_extract.c" 2
# 1 "pk_matrix.h" 1
# 32 "pk_matrix.h"
typedef struct matrix_t {

  numint_t** p;
  size_t nbrows;
  size_t nbcolumns;


  size_t _maxrows;
  bool _sorted;
} matrix_t;




static inline size_t matrix_get_maxrows(matrix_t* mat)
{ return mat->_maxrows; }
static inline bool matrix_is_sorted(matrix_t* mat)
{ return mat->_sorted; }


matrix_t* matrix_alloc(size_t nbrows, size_t nbcols, bool s);
void matrix_resize_rows(matrix_t* mat, size_t nbrows);
void matrix_resize_rows_lazy(matrix_t* mat, size_t nbrows);
void matrix_minimize(matrix_t* mat);
void matrix_free(matrix_t* mat);
void matrix_clear(matrix_t* mat);
void matrix_print(matrix_t* mat);
void matrix_fprint(FILE* stream, matrix_t* mat);
matrix_t* matrix_copy(matrix_t* mat);
bool matrix_equal(matrix_t* mata, matrix_t* matb);


void matrix_normalize_row(pk_internal_t* pk,
     matrix_t* mat, size_t l);
void matrix_combine_rows(pk_internal_t* pk,
    matrix_t* mat, size_t l1, size_t l2, size_t l3, size_t k);
int matrix_compare_rows(pk_internal_t* pk,
   matrix_t* mat, size_t l1, size_t l2);
void matrix_exch_rows(matrix_t* mat, size_t l1, size_t l2);
void matrix_move_rows(matrix_t* mat, size_t destrow, size_t orgrow, size_t size);


bool matrix_normalize_constraint(pk_internal_t* pk,
       matrix_t* mat,
       size_t intdim, size_t realdim);
bool matrix_normalize_constraint_int(pk_internal_t* pk,
           matrix_t* mat,
           size_t intdim, size_t realdim);


void matrix_sort_rows(pk_internal_t* pk,
        matrix_t* mat);
void matrix_sort_rows_with_sat(pk_internal_t* pk,
          matrix_t* mat, satmat_t* sat);

matrix_t* matrix_append(matrix_t* ma, matrix_t* mb);
void matrix_append_with(matrix_t* ma, matrix_t* mb);
void matrix_revappend_with(matrix_t* ma, matrix_t* mb);

matrix_t* matrix_merge_sort(pk_internal_t* pk,
       matrix_t* ma, matrix_t* mb);
void matrix_merge_sort_with(pk_internal_t* pk,
       matrix_t* mat, matrix_t* cmat);



static inline
bool matrix_is_row_dummy_constraint(pk_internal_t* pk,
        matrix_t* mat,
        size_t l)
{
  return vector_is_dummy_constraint(pk,
        mat->p[l],mat->nbcolumns);
}



matrix_t* _matrix_alloc_int(size_t nr, size_t nc, bool s);
# 12 "pk_extract.c" 2

# 1 "pk_user.h" 1
# 36 "pk_user.h"
bool vector_set_dim_bound(pk_internal_t* pk,
     numint_t* vec,
     ap_dim_t dim,
     numrat_t numrat,
     int mode,
     size_t intdim, size_t realdim,
     bool integer);

bool vector_set_linexpr_bound(pk_internal_t* pk,
         numint_t* vec,
         numint_t* vec2,
         numrat_t numrat,
         int mode,
         size_t intdim, size_t realdim,
         bool integer);


void vector_set_itv_linexpr(pk_internal_t* pk,
       numint_t* vec,
       itv_linexpr_t* expr,
       size_t dim,
       int mode);


void vector_set_itv_lincons(pk_internal_t* pk,
       numint_t* vec,
       itv_lincons_t* cons,
       size_t intdim, size_t realdim,
       bool integer);




bool vector_set_itv_lincons_sat(pk_internal_t* pk,
    numint_t* vec,
    itv_lincons_t* cons,
    size_t intdim, size_t realdim,
    bool integer);



bool vector_set_ap_generator0(pk_internal_t* pk,
         numint_t* vec,
         ap_generator0_t* gen,
         size_t intdim, size_t realdim);
bool matrix_set_ap_generator0_array(pk_internal_t* pk,
        matrix_t** matrix,
        ap_generator0_array_t* array,
        size_t intdim, size_t realdim);
# 101 "pk_user.h"
bool matrix_set_itv_lincons_array(pk_internal_t* pk,
      matrix_t** mat,
      itv_lincons_array_t* array,
      size_t intdim, size_t realdim,
      bool integer);





ap_lincons0_t lincons0_of_vector(pk_internal_t* pk,
     numint_t* q,
     size_t size);
ap_generator0_t generator0_of_vector(pk_internal_t* pk,
         numint_t* q,
         size_t size);
# 14 "pk_extract.c" 2
# 1 "pk_representation.h" 1
# 23 "pk_representation.h"
pk_t* poly_alloc(size_t intdim, size_t realdim);


void poly_clear(pk_t* po);


void poly_set(pk_t* pa, pk_t* pb);
# 39 "pk_representation.h"
void poly_chernikova(ap_manager_t* man, pk_t* poly, char* msg);



void poly_chernikova2(ap_manager_t* man, pk_t* poly, char* msg);



void poly_chernikova3(ap_manager_t* man, pk_t* poly, char* msg);




void poly_canonicalize(ap_manager_t* man, pk_t* poly);


static inline bool poly_is_conseps(pk_internal_t* pk, pk_t* po);


bool pk_is_canonical(ap_manager_t* man, pk_t* po);



static inline void poly_obtain_C(ap_manager_t* man, pk_t* po, char* msg);
static inline void poly_obtain_F(ap_manager_t* man, pk_t* po, char* msg);



void poly_obtain_sorted_C(pk_internal_t* pk, pk_t* poly);
void poly_obtain_sorted_F(pk_internal_t* pk, pk_t* poly);



static inline void poly_obtain_satC(pk_t* poly);
static inline void poly_obtain_satF(pk_t* poly);


static inline void poly_dual(pk_t* po);



void poly_chernikova_dual(ap_manager_t* man,
     pk_t* poly,
     char* msg,
     bool usual);
static inline void poly_obtain_C_dual(ap_manager_t* man,pk_t* po, char* msg, bool usual);
static inline void poly_obtain_F_dual(ap_manager_t* man,pk_t* po, char* msg, bool usual);






bool matrix_check_gauss(matrix_t* mat, size_t nbeq);



bool poly_check(pk_internal_t* pk, pk_t* po);


bool poly_check_dual(pk_internal_t* pk, pk_t* po, bool usual);






static inline bool poly_is_conseps(pk_internal_t* pk, pk_t* po)
{
  return (!pk->strict ||
   po->realdim==0 ||
   (po->status & pk_status_conseps));;
}
  static inline bool poly_is_minimaleps(pk_internal_t* pk, pk_t* po)
{
  return (!pk->strict ||
   po->realdim==0 ||
   (po->status & pk_status_minimaleps));
}

static inline void poly_obtain_C(ap_manager_t* man, pk_t* po, char* msg)
{
  if (!po->C) poly_chernikova(man,po,msg);
}
static inline void poly_obtain_F(ap_manager_t* man, pk_t* po, char* msg)
{
  if (!po->F) poly_chernikova(man,po,msg);
}
static inline void poly_obtain_satF(pk_t* poly)
{
  if (!poly->satF){
    ((void) (0));
    poly->satF = satmat_transpose(poly->satC,poly->C->nbrows);
  }
}
static inline void poly_obtain_satC(pk_t* poly)
{
  if (!poly->satC){
    ((void) (0));
    poly->satC = satmat_transpose(poly->satF,poly->F->nbrows);
  }
}

static inline void poly_dual(pk_t* po)
{
  void* ptr;
  size_t nb;
  ptr = po->C; po->C = po->F; po->F = ptr;
  ptr = po->satC; po->satC = po->satF; po->satF = ptr;
  nb = po->nbeq; po->nbeq = po->nbline; po->nbline = nb;
}

static inline void poly_obtain_C_dual(ap_manager_t* man, pk_t* po, char* msg, bool usual)
{
  if (!po->C) poly_chernikova_dual(man,po,msg,usual);
}
static inline void poly_obtain_F_dual(ap_manager_t* man, pk_t* po, char* msg, bool usual)
{
  if (!po->F) poly_chernikova_dual(man,po,msg,usual);
}
# 15 "pk_extract.c" 2
# 1 "pk_extract.h" 1
# 19 "pk_extract.h"
itv_t* matrix_to_box(pk_internal_t* pk, matrix_t* F);





void matrix_bound_dimension(pk_internal_t* pk,
       itv_t itv,
       ap_dim_t dim,
       matrix_t* F);




void matrix_bound_vector(pk_internal_t* pk,
    itv_t itv,
    numint_t* vec,
    matrix_t* F);
# 16 "pk_extract.c" 2
# 1 "/home/donquijote/dev/apron/include/ap_generic.h" 1
# 33 "/home/donquijote/dev/apron/include/ap_generic.h"
bool ap_generic_sat_tcons(ap_manager_t* man, void* abs, ap_tcons0_t* cons,
     ap_scalar_discr_t discr, bool quasilinearize);



ap_interval_t* ap_generic_bound_texpr(ap_manager_t* man, void* abs, ap_texpr0_t* expr,
          ap_scalar_discr_t discr, bool quasilinearize);



ap_tcons0_array_t ap_generic_to_tcons_array(ap_manager_t* man,
         void* abs);
# 56 "/home/donquijote/dev/apron/include/ap_generic.h"
void* ap_generic_meetjoin_array(bool meet,
    ap_manager_t* man,
    void** tab, size_t size);



static inline
void* ap_generic_meet_array(ap_manager_t* man,
       void** tab, size_t size);


static inline
void* ap_generic_join_array(ap_manager_t* man,
       void** tab, size_t size);







void* ap_generic_meet_quasilinearize_lincons_array(ap_manager_t* man,
         bool destructive, void* abs, ap_lincons0_array_t* array,
         ap_scalar_discr_t discr, bool linearize,
         void* (*meet_lincons_array)(ap_manager_t*,
                bool, void*,ap_lincons0_array_t*));

void*
ap_generic_meet_intlinearize_tcons_array(ap_manager_t* man,
      bool destructive, void* abs, ap_tcons0_array_t* array,
      ap_scalar_discr_t discr, ap_linexpr_type_t linearize,
      void* (*meet_lincons_array)(ap_manager_t*,
             bool, void*,
             ap_lincons0_array_t*));





void* ap_generic_asssub_linexpr_array(bool assign,
          ap_manager_t* man,
          bool destructive, void* abs, ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
          void* dest);
void* ap_generic_asssub_texpr_array(bool assign,
        ap_manager_t* man,
        bool destructive, void* abs, ap_dim_t* tdim, ap_texpr0_t** texpr, size_t size,
        void* dest);
# 126 "/home/donquijote/dev/apron/include/ap_generic.h"
static inline
void* ap_generic_assign_linexpr_array(ap_manager_t* man,
          bool destructive, void* abs, ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
          void* dest);
static inline
void* ap_generic_assign_texpr_array(ap_manager_t* man,
        bool destructive, void* abs, ap_dim_t* tdim, ap_texpr0_t** texpr, size_t size,
        void* dest);






static inline
void* ap_generic_substitute_linexpr_array(ap_manager_t* man,
       bool destructive, void* abs, ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
       void* dest);
static inline
void* ap_generic_substitute_texpr_array(ap_manager_t* man,
     bool destructive, void* abs, ap_dim_t* tdim, ap_texpr0_t** texpr, size_t size,
     void* dest);
# 158 "/home/donquijote/dev/apron/include/ap_generic.h"
static inline
void* ap_generic_meet_array(ap_manager_t* man,
       void** tab, size_t size)
{ return ap_generic_meetjoin_array(true,man,tab,size); }

static inline
void* ap_generic_join_array(ap_manager_t* man,
       void** tab, size_t size)
{ return ap_generic_meetjoin_array(false,man,tab,size); }

static inline
void* ap_generic_assign_linexpr_array(ap_manager_t* man,
          bool destructive, void* abs, ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
          void* dest)
{
  return ap_generic_asssub_linexpr_array(true,
      man, destructive, abs, tdim, texpr, size,
      dest);
}
static inline
void* ap_generic_substitute_linexpr_array(ap_manager_t* man,
       bool destructive, void* abs, ap_dim_t* tdim, ap_linexpr0_t** texpr, size_t size,
       void* dest)
{
  return ap_generic_asssub_linexpr_array(false,
      man, destructive, abs, tdim, texpr, size,
      dest);
}

static inline
void* ap_generic_assign_texpr_array(ap_manager_t* man,
        bool destructive, void* abs, ap_dim_t* tdim, ap_texpr0_t** texpr, size_t size,
        void* dest)
{
  return ap_generic_asssub_texpr_array(true,
           man, destructive, abs, tdim, texpr, size,
           dest);
}
static inline
void* ap_generic_substitute_texpr_array(ap_manager_t* man,
     bool destructive,
     void* abs,
     ap_dim_t* tdim,
     ap_texpr0_t** texpr,
     size_t size,
     void* dest)
{
  return ap_generic_asssub_texpr_array(false,
           man, destructive, abs, tdim, texpr, size,
           dest);
}
# 17 "pk_extract.c" 2
# 1 "/home/donquijote/dev/apron/include/itv_linearize.h" 1
# 9 "/home/donquijote/dev/apron/include/itv_linearize.h"
# 1 "/home/donquijote/dev/apron/include/itv_linexpr.h" 1
# 10 "/home/donquijote/dev/apron/include/itv_linearize.h" 2
# 20 "/home/donquijote/dev/apron/include/itv_linearize.h"
static inline void itv_eval_linexpr(itv_internal_t* intern,
        itv_t itv,
        itv_linexpr_t* expr,
        itv_t* env);



static inline bool itv_eval_ap_linexpr0(itv_internal_t* intern,
     itv_t itv,
     ap_linexpr0_t* expr,
     itv_t* env);
# 40 "/home/donquijote/dev/apron/include/itv_linearize.h"
static inline bool itv_boxize_lincons_array(itv_internal_t* intern,
         itv_t* res,
         bool* tchange,
         itv_lincons_array_t* array,
         itv_t* env,size_t intdim,
         size_t kmax,
         bool intervalonly);
# 71 "/home/donquijote/dev/apron/include/itv_linearize.h"
static inline bool itv_quasilinearize_linexpr(itv_internal_t* intern, itv_linexpr_t* linexpr, itv_t* env, bool for_meet_inequality);


static inline bool itv_quasilinearize_lincons(itv_internal_t* intern, itv_lincons_t* lincons, itv_t* env, bool meet);


static inline bool itv_quasilinearize_lincons_array(itv_internal_t* intern, itv_lincons_array_t* tlincons, itv_t* env, bool meet);


static inline void itv_linearize_lincons_array(itv_internal_t* intern, itv_lincons_array_t* tlincons, bool meet);






static inline void itv_eval_ap_texpr0(itv_internal_t* intern, itv_t res, ap_texpr0_t* expr, itv_t* env);
# 103 "/home/donquijote/dev/apron/include/itv_linearize.h"
static inline bool itv_intlinearize_ap_texpr0_intlinear(itv_internal_t* intern, itv_linexpr_t* res, ap_texpr0_t* expr);
static inline bool itv_intlinearize_ap_tcons0_intlinear(itv_internal_t* intern, itv_lincons_t* res, ap_tcons0_t* cons);
static inline bool itv_intlinearize_ap_tcons0_array_intlinear(itv_internal_t* intern, itv_lincons_array_t* res, ap_tcons0_array_t* cons);
# 120 "/home/donquijote/dev/apron/include/itv_linearize.h"
static inline bool itv_intlinearize_ap_texpr0(itv_internal_t* intern, itv_linexpr_t* res, ap_texpr0_t* expr, itv_t* env, size_t intdim);
static inline bool itv_intlinearize_ap_tcons0(itv_internal_t* intern, itv_lincons_t* res, ap_tcons0_t* cons, itv_t* env, size_t intdim);
static inline bool itv_intlinearize_ap_tcons0_array(itv_internal_t* intern, itv_lincons_array_t* res, ap_tcons0_array_t* cons, itv_t* env, size_t intdim);






void itv_eval_linexpr_Rll(itv_internal_t* intern, itv_t itv, itv_linexpr_t* expr, itv_t* env);
bool itv_eval_ap_linexpr0_Rll(itv_internal_t* intern, itv_t itv, ap_linexpr0_t* expr, itv_t* env);


bool itv_boxize_lincons_array_Rll(itv_internal_t* intern, itv_t* res, bool* change, itv_lincons_array_t* array, itv_t* env, size_t intdim, size_t kmax, bool intervalonly);


bool itv_quasilinearize_linexpr_Rll(itv_internal_t* intern, itv_linexpr_t* linexpr, itv_t* env, bool for_meet_inequality);
bool itv_quasilinearize_lincons_Rll(itv_internal_t* intern, itv_lincons_t* lincons, itv_t* env, bool meet);
bool itv_quasilinearize_lincons_array_Rll(itv_internal_t* intern, itv_lincons_array_t* tlincons, itv_t* env, bool meet);
void itv_linearize_lincons_array_Rll(itv_internal_t* intern, itv_lincons_array_t* array, bool meet);


void itv_eval_ap_texpr0_Rll(itv_internal_t* intern, itv_t itv, ap_texpr0_t* expr, itv_t* env);


bool itv_intlinearize_ap_texpr0_intlinear_Rll(itv_internal_t* intern, itv_linexpr_t* res, ap_texpr0_t* expr);
bool itv_intlinearize_ap_tcons0_intlinear_Rll(itv_internal_t* intern,itv_lincons_t* res, ap_tcons0_t* cons);
bool itv_intlinearize_ap_tcons0_array_intlinear_Rll(itv_internal_t* intern,itv_lincons_array_t* res, ap_tcons0_array_t* cons);


bool itv_intlinearize_ap_texpr0_Rll(itv_internal_t* intern,itv_linexpr_t* res,ap_texpr0_t* expr,itv_t* env, size_t intdim);
bool itv_intlinearize_ap_tcons0_Rll(itv_internal_t* intern,itv_lincons_t* res, ap_tcons0_t* cons, itv_t* env, size_t intdim);
bool itv_intlinearize_ap_tcons0_array_Rll(itv_internal_t* intern,itv_lincons_array_t* res, ap_tcons0_array_t* cons, itv_t* env, size_t intdim);





static inline void itv_eval_linexpr(itv_internal_t* intern, itv_t itv, itv_linexpr_t* expr, itv_t* env)
{ itv_eval_linexpr_Rll(intern,itv,expr,env); }
static inline bool itv_eval_ap_linexpr0(itv_internal_t* intern, itv_t itv, ap_linexpr0_t* expr, itv_t* env)
{ return itv_eval_ap_linexpr0_Rll(intern,itv,expr,env); }


static inline bool itv_boxize_lincons_array(itv_internal_t* intern, itv_t* res, bool* tchange, itv_lincons_array_t* array, itv_t* env, size_t intdim, size_t kmax, bool intervalonly)
{ return itv_boxize_lincons_array_Rll(intern,res,tchange,array,env,intdim,kmax,intervalonly); }


static inline bool itv_quasilinearize_linexpr(itv_internal_t* intern, itv_linexpr_t* linexpr, itv_t* env, bool for_ineq)
  { return itv_quasilinearize_linexpr_Rll(intern,linexpr,env, for_ineq); }
static inline bool itv_quasilinearize_lincons(itv_internal_t* intern, itv_lincons_t* lincons, itv_t* env, bool meet)
{ return itv_quasilinearize_lincons_Rll(intern,lincons,env,meet); }
  static inline bool itv_quasilinearize_lincons_array(itv_internal_t* intern, itv_lincons_array_t* tlincons, itv_t* env, bool meet)
{ return itv_quasilinearize_lincons_array_Rll(intern,tlincons,env,meet); }
static inline void itv_linearize_lincons_array(itv_internal_t* intern, itv_lincons_array_t* array, bool meet)
{ itv_linearize_lincons_array_Rll(intern,array,meet); }


static inline void itv_eval_ap_texpr0(itv_internal_t* intern, itv_t itv, ap_texpr0_t* expr, itv_t* env)
{ itv_eval_ap_texpr0_Rll(intern,itv,expr,env); }


static inline bool itv_intlinearize_ap_texpr0_intlinear(itv_internal_t* intern, itv_linexpr_t* linexpr, ap_texpr0_t* expr)
{ return itv_intlinearize_ap_texpr0_intlinear_Rll(intern,linexpr,expr); }
static inline bool itv_intlinearize_ap_tcons0_intlinear(itv_internal_t* intern, itv_lincons_t* lincons, ap_tcons0_t* cons)
  { return itv_intlinearize_ap_tcons0_intlinear_Rll(intern,lincons,cons); }
static inline bool itv_intlinearize_ap_tcons0_array_intlinear(itv_internal_t* intern, itv_lincons_array_t* tlincons, ap_tcons0_array_t* tcons)
  { return itv_intlinearize_ap_tcons0_array_intlinear_Rll(intern,tlincons,tcons); }


static inline bool itv_intlinearize_ap_texpr0(itv_internal_t* intern, itv_linexpr_t* linexpr, ap_texpr0_t* expr, itv_t* env, size_t intdim)
{ return itv_intlinearize_ap_texpr0_Rll(intern,linexpr,expr,env,intdim); }
static inline bool itv_intlinearize_ap_tcons0(itv_internal_t* intern, itv_lincons_t* lincons, ap_tcons0_t* cons, itv_t* env, size_t intdim)
  { return itv_intlinearize_ap_tcons0_Rll(intern,lincons,cons,env,intdim); }
static inline bool itv_intlinearize_ap_tcons0_array(itv_internal_t* intern, itv_lincons_array_t* tlincons, ap_tcons0_array_t* tcons, itv_t* env, size_t intdim)
  { return itv_intlinearize_ap_tcons0_array_Rll(intern,tlincons,tcons,env,intdim); }
# 18 "pk_extract.c" 2



void matrix_bound_dimension(pk_internal_t* pk,
       itv_t itv,
       ap_dim_t dim,
       matrix_t* F)
{
  size_t i, index;
  int sgn;

  ((void) (0));

  bound_set_infty(itv->inf,-1);
  bound_set_infty(itv->sup,-1);
  index = pk->dec+dim;
  for (i=0; i<F->nbrows; i++){
    if (!pk->strict || numint_sgn(F->p[i][polka_eps])==0){
      sgn = numint_sgn(F->p[i][index]);
      if (numint_sgn(F->p[i][0])==0){

 if (sgn){
   itv_set_top(itv);
   return;
 }
      }
      else if (numint_sgn(F->p[i][polka_cst])==0){

 if (sgn > 0){
   bound_set_infty(itv->sup,+1);
   if (bound_infty(itv->inf) && bound_sgn(itv->inf)>0)
     return;
 }
 else if (sgn < 0){
   bound_set_infty(itv->inf,+1);
   if (bound_infty(itv->sup) && bound_sgn(itv->sup)>0)
     return;
 }
      }
      else {

 numrat_set_numint2(pk->poly_numrat,
      F->p[i][index],
      F->p[i][polka_cst]);
 if (bound_cmp_num(itv->sup,pk->poly_numrat)<0){
   bound_set_num(itv->sup,pk->poly_numrat);
 }
 numrat_neg(pk->poly_numrat,pk->poly_numrat);
 if (bound_cmp_num(itv->inf,pk->poly_numrat)<0){
   bound_set_num(itv->inf,pk->poly_numrat);
 }
      }
    }
  }
}

itv_t* matrix_to_box(pk_internal_t* pk,
       matrix_t* F)
{
  size_t i,dim;
  itv_t* res;

  ((void) (0));
  ((void) (0));
  dim = F->nbcolumns - pk->dec;
  res = itv_array_alloc(dim);
  for (i=0;i<dim;i++){
    matrix_bound_dimension(pk,res[i],i,F);
  }
  return res;
}





void matrix_bound_vector(pk_internal_t* pk,
    itv_t itv,
    numint_t* vec,
    matrix_t* F)
{
  size_t i;
  int sgn;

  bound_set_infty(itv->inf,-1);
  bound_set_infty(itv->sup,-1);

  for (i=0; i<F->nbrows; i++){
    if (!pk->strict || numint_sgn(F->p[i][polka_eps])==0 ){
      vector_product_strict(pk,
       pk->poly_prod,
       F->p[i],
       vec, F->nbcolumns);
      sgn = numint_sgn(pk->poly_prod);
      if (numint_sgn(F->p[i][0])==0){

 if (sgn){
   itv_set_top(itv);
   return;
 }
      }
      else if (numint_sgn(F->p[i][polka_cst])==0){

 if (sgn > 0){
   bound_set_infty(itv->sup,+1);
   if (bound_infty(itv->inf) && bound_sgn(itv->inf)>0)
     return;
 }
 else if (sgn < 0){
   bound_set_infty(itv->inf,+1);
   if (bound_infty(itv->sup) && bound_sgn(itv->sup)>0)
     return;
 }
      }
      else {

 numrat_set_numint2(pk->poly_numrat,
      pk->poly_prod,
      F->p[i][polka_cst]);
 if (bound_cmp_num(itv->sup,pk->poly_numrat)<0){
   bound_set_num(itv->sup,pk->poly_numrat);
 }
 numrat_neg(pk->poly_numrat,pk->poly_numrat);
 if (bound_cmp_num(itv->inf,pk->poly_numrat)<0){
   bound_set_num(itv->inf,pk->poly_numrat);
 }
      }
    }
  }
  if (!bound_infty(itv->inf)){
    numint_mul(itv->inf->d,
        itv->inf->d,
        vec[0]);
    numrat_canonicalize(itv->inf);
  }
  if (!bound_infty(itv->sup)){
    numint_mul(itv->sup->d,
        itv->sup->d,
        vec[0]);
    numrat_canonicalize(itv->sup);
  }
}




static
void vector_bound_itv_linexpr(pk_internal_t* pk,
         itv_t itv,
         itv_linexpr_t* linexpr,
         numint_t* vec, size_t size)
{
  size_t i,dim;
  bool *peq;
  itv_ptr pitv;
  itv_ptr prod;
  numrat_t* rat;

  prod = pk->poly_itv;
  rat = &pk->poly_numrat;

  numrat_set_int(*rat,1);
  itv_set_int(itv,0);
  for ((i)=0; (i)<(linexpr)->size ? (((dim) = (linexpr)->linterm[i].dim), ((pitv) = (linexpr)->linterm[i].itv), ((peq) = &((linexpr)->linterm[i].equality)), ((dim)!=(2147483647 * 2U + 1U))) : false; (i)++){
    size_t index = pk->dec + dim;
    if (numint_sgn(vec[index])){
      numint_set(toto(*rat),vec[index]);
      itv_mul_num(prod,pitv,*rat);
      itv_add(itv,itv,prod);
    }
  }
  if (numint_sgn(vec[polka_cst])){
    numint_set(*rat->n,vec[polka_cst]);
    itv_div_num(itv,itv,*rat);
    itv_add(itv,itv,linexpr->cst);
  }
  return;
}




static
void matrix_bound_itv_linexpr(pk_internal_t* pk,
         itv_t itv,
         itv_linexpr_t* linexpr,
         matrix_t* F)
{
  size_t i;
  int sgn;
  itv_t prod;

  bound_set_infty(itv->inf,-1);
  bound_set_infty(itv->sup,-1);

  itv_init(prod);
  for (i=0; i<F->nbrows; i++){
    if (!pk->strict || numint_sgn(F->p[i][polka_eps])==0 ){
      vector_bound_itv_linexpr(pk, prod, linexpr, F->p[i], F->nbcolumns);
      if (numint_sgn(F->p[i][0])==0){

 if (!itv_is_zero(prod)){
   itv_set_top(itv);
   goto _matrix_bound_itv_linexpr_exit;
 }
      }
      else if (numint_sgn(F->p[i][polka_cst])==0){

 if (!itv_is_zero(prod)){
   if (bound_sgn(prod->inf)<0){

     bound_set_infty(itv->sup,+1);
     if (bound_infty(itv->inf) && bound_sgn(itv->inf)>0)
       goto _matrix_bound_itv_linexpr_exit;
   }
   else if (bound_sgn(prod->sup)<0){

     bound_set_infty(itv->inf,+1);
     if (bound_infty(itv->sup) && bound_sgn(itv->sup)>0)
       goto _matrix_bound_itv_linexpr_exit;
   }
   else {
     itv_set_top(itv);
     goto _matrix_bound_itv_linexpr_exit;
   }
 }
      }
      else {
 itv_join(itv,itv,prod);
      }
    }
  }
 _matrix_bound_itv_linexpr_exit:
  itv_clear(prod);
  return;
}





ap_interval_t* pk_bound_dimension(ap_manager_t* man,
      pk_t* po,
      ap_dim_t dim)
{
  itv_t itv;
  ap_interval_t* interval;
  pk_internal_t* pk = pk_init_from_manager(man,AP_FUNID_BOUND_DIMENSION);

  interval = ap_interval_alloc();
  ap_interval_reinit(interval,AP_SCALAR_MPQ);
  if (pk->funopt->algorithm>0)
    poly_chernikova(man,po,((void *)0));
  else
    poly_obtain_F(man,po,((void *)0));

  if (pk->exn){
    pk->exn = AP_EXC_NONE;
    ap_interval_set_top(interval);
    return interval;
  }

  if (!po->F){
    ap_interval_set_bottom(interval);
    man->result.flag_exact = man->result.flag_best = true;
    return interval;
  }

  itv_init(itv);
  matrix_bound_dimension(pk,itv,dim,po->F);
  ap_interval_set_itv(pk->itv,interval, itv);
  itv_clear(itv);
  man->result.flag_exact = man->result.flag_best =
    dim<po->intdim ? false : true;

  return interval;
}





ap_interval_t* pk_bound_linexpr(ap_manager_t* man,
    pk_t* po,
    ap_linexpr0_t* expr)
{
  bool exact;
  ap_interval_t* interval;
  itv_t itv;
  pk_internal_t* pk = pk_init_from_manager(man,AP_FUNID_BOUND_LINEXPR);

  interval = ap_interval_alloc();
  ap_interval_reinit(interval,AP_SCALAR_MPQ);
  if (pk->funopt->algorithm>0)
    poly_chernikova(man,po,((void *)0));
  else
    poly_obtain_F(man,po,((void *)0));

  if (pk->exn){
    pk->exn = AP_EXC_NONE;
    ap_interval_set_top(interval);
    return interval;
  }

  if (!po->F){
    ap_interval_set_bottom(interval);
    man->result.flag_exact = man->result.flag_best = true;
    return interval;
  }



  exact = itv_linexpr_set_ap_linexpr0(pk->itv,
          &pk->poly_itv_linexpr,
          expr);
  itv_init(itv);
  matrix_bound_itv_linexpr(pk,itv,&pk->poly_itv_linexpr,po->F);
  ap_interval_set_itv(pk->itv,interval,itv);
  itv_clear(itv);

  man->result.flag_exact = man->result.flag_best =
    ( (pk->funopt->flag_exact_wanted || pk->funopt->flag_best_wanted) &&
      ap_linexpr0_is_real(expr,po->intdim) ) ?
    exact :
    false;

  return interval;
}

ap_interval_t* pk_bound_texpr(ap_manager_t* man,
         pk_t* po,
         ap_texpr0_t* expr)
{
  itv_t itv1,itv2;
  itv_t* env;
  ap_interval_t* interval;
  pk_internal_t* pk = pk_init_from_manager(man,AP_FUNID_BOUND_TEXPR);

  interval = ap_interval_alloc();
  ap_interval_reinit(interval,AP_SCALAR_MPQ);
  if (pk->funopt->algorithm>0)
    poly_chernikova(man,po,((void *)0));
  else
    poly_obtain_F(man,po,((void *)0));

  if (pk->exn){
    pk->exn = AP_EXC_NONE;
    ap_interval_set_top(interval);
    return interval;
  }
  if (!po->F){
    ap_interval_set_bottom(interval);
    man->result.flag_exact = man->result.flag_best = true;
    return interval;
  }
  env = matrix_to_box(pk,po->F);
  itv_intlinearize_ap_texpr0(pk->itv,&pk->poly_itv_linexpr,
        expr,env,po->intdim);
  itv_init(itv1); itv_init(itv2);
  matrix_bound_itv_linexpr(pk,itv1,&pk->poly_itv_linexpr,po->F);
  itv_eval_ap_texpr0(pk->itv,itv2,expr,env);
  itv_meet(pk->itv,itv1,itv1,itv2);
  ap_interval_set_itv(pk->itv,interval,itv1);
  itv_clear(itv1); itv_clear(itv2);
  itv_array_free(env,po->intdim+po->realdim);
  man->result.flag_exact = man->result.flag_best = ap_texpr0_is_interval_linear(expr);

  return interval;
}






ap_lincons0_array_t pk_to_lincons_array(ap_manager_t* man,
     pk_t* po)
{
  ap_lincons0_array_t array;
  matrix_t* C;
  size_t i,k;
  pk_internal_t* pk = pk_init_from_manager(man,AP_FUNID_TO_LINCONS_ARRAY);

  man->result.flag_exact = man->result.flag_best = true;

  poly_chernikova3(man,po,((void *)0));
  if (pk->exn){
    pk->exn = AP_EXC_NONE;
    man->result.flag_exact = man->result.flag_best = false;
    array = ap_lincons0_array_make(0);
    return array;
  }
  if (!po->C){
    array = ap_lincons0_array_make(1);
    array.p[0] = ap_lincons0_make_unsat();
    return array;
  }
  poly_obtain_sorted_C(pk,po);
  C = po->C;
  array = ap_lincons0_array_make(C->nbrows);
  for (i=0,k=0; i<C->nbrows; i++){
    if (! vector_is_dummy_constraint(pk,
         C->p[i], C->nbcolumns)){
      array.p[k] = lincons0_of_vector(pk, C->p[i], C->nbcolumns);
      k++;
    }
  }
  array.size = k;
  return array;
}

ap_tcons0_array_t pk_to_tcons_array(ap_manager_t* man,
        pk_t* po)
{
  return ap_generic_to_tcons_array(man,po);
}





ap_interval_t** pk_to_box(ap_manager_t* man,
     pk_t* po)
{
  ap_interval_t** interval;
  itv_t* titv;
  size_t i,dim;
  pk_internal_t* pk = pk_init_from_manager(man,AP_FUNID_TO_BOX);

  dim = po->intdim + po->realdim;
  if (pk->funopt->algorithm>=0)
    poly_chernikova(man,po,((void *)0));
  else
    poly_obtain_F(man,po,((void *)0));

  if (pk->exn){
    pk->exn = AP_EXC_NONE;
    man->result.flag_exact = man->result.flag_best = false;
    interval = ap_interval_array_alloc(dim);
    for (i=0; i<dim; i++){
      ap_interval_set_top(interval[i]);
    }
    return interval;
  }
  interval = ap_interval_array_alloc(dim);
  if (!po->F){
    for (i=0; i<dim; i++){
      ap_interval_set_bottom(interval[i]);
    }
  }
  else {
    titv = matrix_to_box(pk,po->F);
    for (i=0; i<dim; i++){
      ap_interval_set_itv(pk->itv,interval[i],titv[i]);
    }
    itv_array_free(titv,dim);
  }
  man->result.flag_exact = man->result.flag_best = true;
  return interval;
}
# 486 "pk_extract.c"
ap_generator0_array_t pk_to_generator_array(ap_manager_t* man,
         pk_t* po)
{
  ap_generator0_array_t array;
  matrix_t* F;
  size_t i,k;
  pk_internal_t* pk = pk_init_from_manager(man,AP_FUNID_TO_GENERATOR_ARRAY);

  man->result.flag_exact = man->result.flag_best = true;

  poly_chernikova3(man,po,((void *)0));
  if (pk->exn){
    pk->exn = AP_EXC_NONE;
    man->result.flag_exact = man->result.flag_best = false;
    array = ap_generator0_array_make(0);
    return array;
  }
  if (!po->F){
    array = ap_generator0_array_make(0);
    return array;
  }
  F = po->F;
  poly_obtain_sorted_F(pk,po);
  array = ap_generator0_array_make(F->nbrows);
  for (i=0,k=0; i<F->nbrows; i++){
    if (! vector_is_dummy_or_strict_generator(pk,
           F->p[i], F->nbcolumns)){
      array.p[k] = generator0_of_vector(pk, F->p[i], F->nbcolumns);
      k++;
    }
  }
  array.size = k;
  return array;
}
