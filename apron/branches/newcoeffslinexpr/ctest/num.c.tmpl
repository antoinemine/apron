/* -*- mode: c -*- */

/* Testing num, bound, itv, etiv */

/* MODULO NOT TESTED yet !!!!!!!!!!! */
/* TESTS NOT TESTED yet !!!!!!!!!!! */


#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#include "eitv_all.h"
#include "num_conv.h"

num_internal_t intern;
FILE* output = NULL;

#define TABCST1 { -10.6, -7.5, -5.4, -5.0, 0.0, 3.0, 4.3, 5.5, 9.7 }
#define TABSIZE1 9
#define TABCST2 { -7,0,9 }
#define TABSIZE2 3

/* ********************************************************************** */
/* FPU init */
/* ********************************************************************** */

/* simple run-time test that fpu behaves correctly */
static bool test_fpu(void)
{
  int i;
  long double d = 1., dd;
  /* find the minimal long double, as the fixpoint of x -> x/2 with rounding
     towards +oo;
     the max iteration value should be enough for 128-bit floating-point */
  for (i=0;i<5000000;i++) {
    dd = d;
    d /= 2;
    if (d==dd || d==0.) break;
  }
  /* fails if flush to 0 */
  if (d!=dd) { fprintf(stderr,"test_fpu failed test #1 after %i iterations\n",i); return false; }
  /* fails if long double rounding is not towards +oo */
  if (d*0.25!=dd) { fprintf(stderr,"test_fpu failed test #2\n"); return false; }
  /* fails if double rounding is not towards +oo */
  if ((double)d<dd) { fprintf(stderr,"test_fpu failed test #3\n"); return false; }
  /* fails if float rounding is not towards +oo */
  if ((float)d<dd) { fprintf(stderr,"test_fpu failed test #4\n"); return false; }
  return true;
}

#if defined(__ppc__)
static bool fpu_init(void)
{
  __asm volatile ("mtfsfi 7,2");
  return test_fpu();
}
#elif defined(__linux) || defined (__APPLE__)
#include <fenv.h>
static bool fpu_init(void)
{
  if (!fesetround(FE_UPWARD)) return test_fpu();
  fprintf(stderr,"could not set fpu rounding mode: fesetround failed\n");
  return false;
}
#elif defined(__FreeBSD__) || defined(sun)
#include <ieeefp.h>
static bool fpu_init(void)
{
  fpsetround(FP_RP);
  return test_fpu();
}
#else
static bool fpu_init(void)
{
  fprintf(stderr,"could not set fpu rounding mode: platform not supported\n");
  return false;
}

#endif

/* ********************************************************************** */
/* Testing normal ops */
/* ********************************************************************** */

#define error(fmt,msg)					\
  do {							\
    fprintf(output,"error: ");                           \
    fprintf(output,fmt,msg);                            \
    fprintf(output,"\n");                               \
  } while (0)


MACRO_FOREACH ttt ("num","bound","itv","eitv")
#define MARK_ttt
MACRO_FOREACH XXX @AllNum

void checkapprox_tttXXX(tttXXX_t x, tttXXX_t y, bool exact, char* msg)
{
  int cmp = tttXXX_cmp(x,y);
#if defined(MARK_num) || defined(MARK_bound)
  if (cmp>0)
    error("%s: incorrect approximation",msg);
  else if (cmp<0 && exact)
    error("%s: exact is true but should be false",msg);
#else
  if (cmp!=0 && cmp!=-1)
    error("%s: incorrect approximation",msg);
  else if (cmp==-1 && exact)
    error("%s: exact is true but should be false,msg",msg);
#endif
}

void testconv_tttXXX(tttXXX_t x)
{
  tttXXX_t y;
  bool exact1,exact2;
  int cmp;

  tttXXX_init(y);

  fprintf(output,"x = "); tttXXX_fprint(output,x); fprintf(output,"\n");

  MACRO_FOREACH YYY ("D","MPQ","MPFR")
  {
    tttYYY_t z;
    tttYYY_init(z);
    exact1 = tttYYY_set_tttXXX(z,x,intern);
    fprintf(output,"YYY_set(z,x); z = "); tttYYY_fprint(output,z); fprintf(output," exact = %d\n",exact1);
    exact2 = tttXXX_set_tttYYY(y,z,intern);
    fprintf(output,"set_YYY(y,z); y = "); tttXXX_fprint(output,y); fprintf(output," exact = %d\n",exact2);
    cmp = tttXXX_cmp(x,y);
    checkapprox_tttXXX(x,y,exact1 && exact2, "Conversion XXX -> YYY -> XXX");
    tttYYY_clear(z);
  }
  ENDMACRO;
  tttXXX_clear(y);
}

void test1_tttXXX(tttXXX_t x, void (*op)(tttXXX_t a, tttXXX_t b), char* nameop)
{
  tttXXX_t xx,y;

  tttXXX_init(y);
  tttXXX_init_set(xx,x);
  /* Test normal operation */
  fprintf(output,"x=xx = "); tttXXX_fprint(output,x); fprintf(output,"\n");
  op(y,x);
  fprintf(output,"%s(y,x) \t=> y = ",nameop); tttXXX_fprint(output,y); fprintf(output,"\n");
  /* Test first and second args aliased */
  op(xx,xx);
  fprintf(output,"%s(xx,xx) \t=> xx = ",nameop); tttXXX_fprint(output,xx); fprintf(output,"\n");
  if (tttXXX_cmp(y,xx)){
    fprintf(stdout,"ERROR: y!=xx\n");
  }
  tttXXX_clear(y);
  tttXXX_clear(xx);
}

void test1arg_tttXXX(tttXXX_t x, void* arg, void (*op)(tttXXX_t a, tttXXX_t b, void* arg), char* nameop)
{
  tttXXX_t xx,y;

  tttXXX_init(y);
  tttXXX_init_set(xx,x);
  /* Test normal operation */
  fprintf(output,"x=xx = "); tttXXX_fprint(output,x); fprintf(output,"\n");
  op(y,x,arg);
  fprintf(output,"%s(y,x) \t=> y = ",nameop); tttXXX_fprint(output,y); fprintf(output,"\n");
  /* Test first and second args aliased */
  op(xx,xx,arg);
  fprintf(output,"%s(xx,xx) \t=> xx = ",nameop); tttXXX_fprint(output,xx); fprintf(output,"\n");
  if (tttXXX_cmp(y,xx)){
    fprintf(stdout,"ERROR: y!=xx\n");
  }
  tttXXX_clear(y);
  tttXXX_clear(xx);
}

void test2_tttXXX(tttXXX_t x, tttXXX_t y, void (*op)(tttXXX_t a, tttXXX_t b, tttXXX_t c), char* nameop)
{
  assert(x!=y);
  tttXXX_t xx,yy,z;

  tttXXX_init(z);
  tttXXX_init_set(xx,x);
  tttXXX_init_set(yy,y);

  /* Test normal operation */
  fprintf(output,"x=xx = "); tttXXX_fprint(output,x); fprintf(output,"\n");
  fprintf(output,"y=yy = "); tttXXX_fprint(output,y); fprintf(output,"\n");
  op(z,x,y);
  fprintf(output,"%s(z,x,y) \t=> z = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  /* Test first and second args aliased */
  op(xx,xx,yy);
  fprintf(output,"%s(xx,xx,yy) \t=> xx = ",nameop); tttXXX_fprint(output,xx); fprintf(output,"\n");
  if (tttXXX_cmp(y,yy)){
    fprintf(stdout,"ERROR: yy has been modified\n");
  }
  if (tttXXX_cmp(z,xx)){
    fprintf(stdout,"ERROR: z!=xx\n");
  }
  tttXXX_set(xx,x);
  /* Test first and third args aliased */
  op(yy,xx,yy);
  fprintf(output,"%s(yy,xx,yy) \t=> yy = ",nameop); tttXXX_fprint(output,yy); fprintf(output,"\n");
  if (tttXXX_cmp(x,xx)){
    fprintf(stdout,"ERROR: xx has been modified\n");
  }
  if (tttXXX_cmp(z,yy)){
    fprintf(stdout,"ERROR: z!=yy\n");
  }
  tttXXX_set(yy,y);
  /* Test second and third args aliased */
  op(z,y,yy);
  fprintf(output,"%s(z,y,yy) \t=> z = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  op(xx,yy,yy);
  fprintf(output,"%s(xx,yy,yy) \t=> xx = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  if (tttXXX_cmp(y,yy)){
    fprintf(stdout,"ERROR: xx has been modified\n");
  }
  if (tttXXX_cmp(z,xx)){
    fprintf(stdout,"ERROR: z!=xx\n");
  }
  /* Test all arguments aliased */
  op(yy,yy,yy);
  fprintf(output,"%s(yy,yy,yy) \t=> yy = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  if (tttXXX_cmp(z,yy)){
    fprintf(stdout,"ERROR: z!=yy\n");
  }
  tttXXX_clear(z);
  tttXXX_clear(yy);
  tttXXX_clear(xx);
}
void test2arg_tttXXX(tttXXX_t x, tttXXX_t y, void* arg, void (*op)(tttXXX_t a, tttXXX_t b, tttXXX_t c, void* arg), char* nameop)
{
  assert(x!=y);
  tttXXX_t xx,yy,z;

  tttXXX_init(z);
  tttXXX_init_set(xx,x);
  tttXXX_init_set(yy,y);

  /* Test normal operation */
  fprintf(output,"x=xx = "); tttXXX_fprint(output,x); fprintf(output,"\n");
  fprintf(output,"y=yy = "); tttXXX_fprint(output,y); fprintf(output,"\n");
  op(z,x,y,arg);
  fprintf(output,"%s(z,x,y) \t=> z = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  /* Test first and second args aliased */
  op(xx,xx,yy,arg);
  fprintf(output,"%s(xx,xx,yy) \t=> xx = ",nameop); tttXXX_fprint(output,xx); fprintf(output,"\n");
  if (tttXXX_cmp(y,yy)){
    fprintf(stdout,"ERROR: yy has been modified\n");
  }
  if (tttXXX_cmp(z,xx)){
    fprintf(stdout,"ERROR: z!=xx\n");
  }
  tttXXX_set(xx,x);
  /* Test first and third args aliased */
  op(yy,xx,yy,arg);
  fprintf(output,"%s(yy,xx,yy) \t=> yy = ",nameop); tttXXX_fprint(output,yy); fprintf(output,"\n");
  if (tttXXX_cmp(x,xx)){
    fprintf(stdout,"ERROR: xx has been modified\n");
  }
  if (tttXXX_cmp(z,yy)){
    fprintf(stdout,"ERROR: z!=yy\n");
  }
  tttXXX_set(yy,y);
  /* Test second and third args aliased */
  op(z,y,yy,arg);
  fprintf(output,"%s(z,y,yy) \t=> z = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  op(xx,yy,yy,arg);
  fprintf(output,"%s(xx,yy,yy) \t=> xx = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  if (tttXXX_cmp(y,yy)){
    fprintf(stdout,"ERROR: xx has been modified\n");
  }
  if (tttXXX_cmp(z,xx)){
    fprintf(stdout,"ERROR: z!=xx\n");
  }
  /* Test all arguments aliased */
  op(yy,yy,yy,arg);
  fprintf(output,"%s(yy,yy,yy) \t=> yy = ",nameop); tttXXX_fprint(output,z); fprintf(output,"\n");
  if (tttXXX_cmp(z,yy)){
    fprintf(stdout,"ERROR: z!=yy\n");
  }
  tttXXX_clear(z);
  tttXXX_clear(yy);
  tttXXX_clear(xx);
}

void testun_tttXXX(tttXXX_t x)
{
  bool exact;

  test1_tttXXX(x,tttXXX_neg,"tttXXX_neg");
  test1_tttXXX(x,tttXXX_abs,"tttXXX_abs");
  test1_tttXXX(x,tttXXX_ceil,"tttXXX_ceil");
  test1_tttXXX(x,tttXXX_floor,"tttXXX_floor");
  test1_tttXXX(x,tttXXX_trunc,"tttXXX_trunc");

  /* mul_2exp */
  {
    int dec;
    tttXXX_t xx,y;

    for (dec=-2; dec<=2; dec+=2){
      tttXXX_init(y);
      tttXXX_init_set(xx,x);
      fprintf(output,"x=xx = "); tttXXX_fprint(output,x); fprintf(output,"\n");
      tttXXX_mul_2exp(y,x,dec);
      fprintf(output,"%s(y,x,%d) \t=> y = ","tttXXX_mul_2exp",dec); tttXXX_fprint(output,y); fprintf(output,"\n");
      tttXXX_mul_2exp(xx,xx,dec);
      fprintf(output,"%s(xx,xx,%d) \t=> xx = ","tttXXX_mul_2exp",dec); tttXXX_fprint(output,xx); fprintf(output,"\n");
      if (tttXXX_cmp(y,xx)){
	fprintf(stdout,"ERROR: y!=xx\n");
      }
      tttXXX_clear(y);
      tttXXX_clear(xx);
    }
  }

#if !defined(MARK_num)
  {
    int i;
    double k[TABSIZE1] = TABCST1;
    numXXX_t num;
    numXXX_init(num);
    for (i=0; i<TABSIZE1; i++){
      numXXX_set_double(num,k[i],intern);
      fprintf(output,"num="); numXXX_fprint(output,num); fprintf(output,"\n");

      test1arg_tttXXX(x,num,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_add_num,"tttXXX_add_num");
      test1arg_tttXXX(x,num,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_sub_num,"tttXXX_sub_num");
      test1arg_tttXXX(x,num,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_mul_num,"tttXXX_mul_num");
      test1arg_tttXXX(x,num,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_div_num,"tttXXX_div_num");
    }
    numXXX_clear(num);
  }
#endif

#if !defined(MARK_num) && !defined(MARK_bound)
  {
    int i;
    double k[TABSIZE1] = TABCST1;
    boundXXX_t bound;
    boundXXX_init(bound);
    for (i=-1; i<TABSIZE1+1; i++){
      if (i==-1) boundXXX_set_infty(bound,-1);
      else if (i==TABSIZE1) boundXXX_set_infty(bound,1);
      else boundXXX_set_double(bound,k[i],intern);
      fprintf(output,"bound="); boundXXX_fprint(output,bound); fprintf(output,"\n");
      test1arg_tttXXX(x,bound,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_mul_bound,"tttXXX_mul_bound");
      test1arg_tttXXX(x,bound,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_div_bound,"tttXXX_div_bound");
    }
    boundXXX_clear(bound);
  }
#endif

#if !defined(MARK_num) && !defined(MARK_bound)
  test1_tttXXX(x,tttXXX_to_int,"tttXXX_to_int");

  /* sqrt */
  {
    tttXXX_t xx,y;
    bool exact;

    tttXXX_init(y);
    tttXXX_init_set(xx,x);
    fprintf(output,"x=xx = "); tttXXX_fprint(output,x); fprintf(output,"\n");
    exact = tttXXX_sqrt(y,x,intern);
    fprintf(output,"%s(y,x) \t=> exact=%hhu, y = ","tttXXX_sqrt",exact); tttXXX_fprint(output,y); fprintf(output,"\n");
    exact = tttXXX_sqrt(xx,xx,intern);
    fprintf(output,"%s(xx,xx) \t=> exact=%hhu, xx = ","tttXXX_sqrt",exact); tttXXX_fprint(output,xx); fprintf(output,"\n");
    if (tttXXX_cmp(y,xx)){
      fprintf(stdout,"ERROR: y!=xx\n");
    }
    tttXXX_clear(y);
    tttXXX_clear(xx);
  }

  test1arg_tttXXX(x,intern,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_to_float,"tttXXX_to_float");
  test1arg_tttXXX(x,intern,(void (*)(tttXXX_t,tttXXX_t,void*))tttXXX_to_double,"tttXXX_to_double");
#endif


  testconv_tttXXX(x);
}

void testbin_tttXXX(tttXXX_t x, tttXXX_t y)
{
  test2_tttXXX(x,y,tttXXX_add,"tttXXX_add");
  test2_tttXXX(x,y,tttXXX_sub,"tttXXX_sub");
#if defined(MARK_num) || defined(MARK_bound)
  test2_tttXXX(x,y,tttXXX_mul,"tttXXX_mul");
#if defined(MARK_num)
  if (numXXX_sgn(y))
#endif
  test2_tttXXX(x,y,tttXXX_div,"tttXXX_div");
#else
  test2arg_tttXXX(x,y,intern,(void(*)(tttXXX_t,tttXXX_t,tttXXX_t,void*))tttXXX_mul,"tttXXX_mul");
  test2arg_tttXXX(x,y,intern,(void(*)(tttXXX_t,tttXXX_t,tttXXX_t,void*))tttXXX_div,"tttXXX_div");
#endif

#if defined(MARK_num) || defined(MARK_bound)
  test2_tttXXX(x,y,tttXXX_add,"tttXXX_min");
  test2_tttXXX(x,y,tttXXX_sub,"tttXXX_max");
#else
  test2_tttXXX(x,y,tttXXX_add,"tttXXX_meet");
  test2_tttXXX(x,y,tttXXX_sub,"tttXXX_join");
#endif
}

void testarith_tttXXX(tttXXX_t a, tttXXX_t b, unsigned long int c)
{
  tttXXX_t r,rr;
  tttXXX_init(r);
  tttXXX_init(rr);
  fprintf(output,"x = "); tttXXX_fprint(output,a); fprintf(output,"\n");
  fprintf(output,"y = "); tttXXX_fprint(output,b); fprintf(output,"\n");
  fprintf(output,"z = %lu\n",c);

  tttXXX_add(r,a,b);
  fprintf(output,"x + y = "); tttXXX_fprint(output,r); fprintf(output,"\n");
#if !defined(MARK_bound)
  tttXXX_sub(r,a,b);
  fprintf(output,"x - y = "); tttXXX_fprint(output,r); fprintf(output,"\n");

  tttXXX_add(r,a,b); tttXXX_sub(rr,r,b);
  fprintf(output,"(x + y) - y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
  checkapprox_tttXXX(a,rr,false,"");

  tttXXX_sub(r,a,b); tttXXX_add(rr,r,b);
  fprintf(output,"(x - y) + y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
  checkapprox_tttXXX(a,rr,false,"");
#endif

#if defined(MARK_num) || defined(MARK_bound)
  tttXXX_mul(r,a,b);
  fprintf(output,"x * y = "); tttXXX_fprint(output,r); fprintf(output,"\n");
#if defined(MARK_num)
  if (tttXXX_cmp_int(b,0)!=0)
#endif
    {
      tttXXX_div(r,a,b);
      fprintf(output,"x / y = "); tttXXX_fprint(output,r); fprintf(output,"\n");

      tttXXX_mul(r,a,b); tttXXX_div(rr,r,b);
      fprintf(output,"(x * y) / y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
      checkapprox_tttXXX(a,rr,false,"");

      tttXXX_div(r,a,b); tttXXX_mul(rr,r,b);
      fprintf(output,"(x / y) * y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
      checkapprox_tttXXX(a,rr,false,"");
    }
#else
  tttXXX_mul(r,a,b,intern);
  fprintf(output,"x * y = "); tttXXX_fprint(output,r); fprintf(output,"\n");
  tttXXX_div(r,a,b,intern);
  fprintf(output,"x / y = "); tttXXX_fprint(output,r); fprintf(output,"\n");

  tttXXX_mul(r,a,b,intern); tttXXX_div(rr,r,b,intern);
  fprintf(output,"(x * y) / y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
  checkapprox_tttXXX(a,rr,false,"");

  tttXXX_div(r,a,b,intern); tttXXX_mul(rr,r,b,intern);
  fprintf(output,"(x / y) * y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
  checkapprox_tttXXX(a,rr,false,"");
#endif

#if defined(MARK_num) || defined(MARK_bound)
  tttXXX_add_uint(r,a,c);
  fprintf(output,"x + z = "); tttXXX_fprint(output,r); fprintf(output,"\n");
  tttXXX_sub_uint(r,a,c);
  fprintf(output,"x - z = "); tttXXX_fprint(output,r); fprintf(output,"\n");

  tttXXX_add_uint(r,a,c); tttXXX_sub_uint(rr,r,c);
  fprintf(output,"(x + z) - z = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
  checkapprox_tttXXX(a,rr,false,"");

  tttXXX_sub_uint(r,a,c); tttXXX_add_uint(rr,r,c);
  fprintf(output,"(x - z) + z = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
  checkapprox_tttXXX(a,rr,false,"");
#endif
#if defined(MARK_bound) || defined(MARK_itv) || defined(MARK_eitv)
  {
#if defined(MARK_bound)
    boundXXX_ptr bound = b;
#elif defined(MARK_itv)
    boundXXX_ptr bound = b->sup;
#else
    boundXXX_ptr bound = b->itv->sup;
#endif

#if !defined(MARK_bound)
    tttXXX_mul_bound(r,a,bound);
    fprintf(output,"x *_b y = "); tttXXX_fprint(output,r); fprintf(output,"\n");
    tttXXX_div_bound(r,a,bound);
    fprintf(output,"x /_b y = "); tttXXX_fprint(output,r); fprintf(output,"\n");

    tttXXX_mul_bound(r,a,bound); tttXXX_div_bound(rr,r,bound);
    fprintf(output,"(x *_b y) /_b y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
    checkapprox_tttXXX(a,rr,false,"");

    tttXXX_div_bound(r,a,bound); tttXXX_mul_bound(rr,r,bound);
    fprintf(output,"(x /_b y) *_b y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
    checkapprox_tttXXX(a,rr,false,"");
#endif
    if (!boundXXX_infty(bound)){
      numXXX_ptr num = boundXXX_numref(bound);
      tttXXX_add_num(r,a,num);
      fprintf(output,"x +_n y = "); tttXXX_fprint(output,r); fprintf(output,"\n");
      tttXXX_sub_num(r,a,num);
      fprintf(output,"x -_n y = "); tttXXX_fprint(output,r); fprintf(output,"\n");

      tttXXX_add_num(r,a,num); tttXXX_sub_num(rr,r,num);
      fprintf(output,"(x +_n y) -_n y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
      checkapprox_tttXXX(a,rr,false,"");

      tttXXX_sub_num(r,a,num); tttXXX_add_num(rr,r,num);
      fprintf(output,"(x - y) + y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
      checkapprox_tttXXX(a,rr,false,"");

      tttXXX_mul_num(r,a,num);
      fprintf(output,"x *_n y = "); tttXXX_fprint(output,r); fprintf(output,"\n");
      tttXXX_div_num(r,a,num);
      fprintf(output,"x /_n y = "); tttXXX_fprint(output,r); fprintf(output,"\n");

      tttXXX_mul_num(r,a,num); tttXXX_div_num(rr,r,num);
      fprintf(output,"(x *_n y) /_n y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
      checkapprox_tttXXX(a,rr,false,"");

      tttXXX_div_num(r,a,num); tttXXX_mul_num(rr,r,num);
      fprintf(output,"(x /_n y) *_n y = "); tttXXX_fprint(output,rr); fprintf(output,"\n");
      checkapprox_tttXXX(a,rr,false,"");
    }
  }
#endif
  tttXXX_clear(r); tttXXX_clear(rr);
  fprintf(output,"\n");
}

void tttXXX__set_double_2(tttXXX_t a, double inf, double sup)
{
#if defined(MARK_num)
  if (sup==1./0. || !double_fits_tttXXX(sup,intern))
    tttXXX_set_int(a,1);
  else
    tttXXX_set_double(a,sup,intern);
#elif defined(MARK_bound)
  boundXXX_set_double(a,sup,intern);
#else
  tttXXX_set_double2(a,inf,sup,intern);
#endif
}

/*
void testmod(tttXXX_t a, tttXXX_t b)
{
  tttXXX_t c;
  tttXXX_init(c);
  fprintf(output,"x = "); tttXXX_fprint(output,a); fprintf(output,"\n");
  fprintf(output,"y = "); tttXXX_fprint(output,b); fprintf(output,"\n");
  tttXXX_mod(c,a,b,1, intern);
  fprintf(output,"x mod_i y = "); tttXXX_fprint(output,c); fprintf(output,"\n");
  tttXXX_mod(c,a,b,0, intern);
  fprintf(output,"x mod_f y = "); tttXXX_fprint(output,c); fprintf(output,"\n");
  fprintf(output,"\n");
  tttXXX_clear(c);
}

void set_frac(tttXXX_t a, int ninf, int dinf, int nsup, int dsup)
{
  numXXX_t n;
  numXXX_init(n);
  fprintf(output,"[%i/%i,%i/%i]\n",ninf,dinf,nsup,dsup);
  numXXX_set_lfrac(n,nsup,dsup,intern);  boundXXX_set_num(a->sup,n);
  numXXX_set_lfrac(n,-ninf,dinf,intern); boundXXX_set_num(a->neginf,n);
  numXXX_clear(n);
}
*/

ENDMACRO;

#undef MARK_ttt

ENDMACRO;

#if 1
#define FOPEN(a,b) output=fopen(a,b)
#define FCLOSE fclose(output)
#else
#define FOPEN(a,b) output=stdout
#define FCLOSE
#endif

int main(void)
{

  fpu_init();
  /*  mpfr_set_default_prec(4046);*/
  mpfr_set_default_prec(53);
  num_internal_init(intern);

  MACRO_FOREACH XXX @AllNum;
  MACRO_FOREACH ttt ("num","bound","itv","eitv");
  FOPEN("out/test_tttXXX.out","w");
  if (output==NULL) exit(-1);
  FCLOSE;
  output = NULL;
  ENDMACRO;

  MACRO_FOREACH ttt ("num","itv","eitv");
  FOPEN("out/test_tttXXX.out","a");
  {
    int i,j;
    double k[TABSIZE1] = TABCST1;

    tttXXX_t x,y;
    tttXXX_init(x); tttXXX_init(y);

    for (i=0; i<TABSIZE1; i++){
      tttXXX_set_double(x,k[i],intern);
      testun_tttXXX(x);
      for (j=0; j<TABSIZE1; j++){
	tttXXX_set_double(y,k[j],intern);
	testbin_tttXXX(x,y);
	testarith_tttXXX(x,y,3);
      }
    }
    tttXXX_clear(x);
    tttXXX_clear(y);
  }
  FCLOSE;
  ENDMACRO;
  /* bound */
  FOPEN("out/test_boundXXX.out","a");
  {
    int i,j;
    double k[TABSIZE1] = TABCST1;

    boundXXX_t x,y;
    boundXXX_init(x); boundXXX_init(y);

    for (i=-1; i<TABSIZE1+1; i++){
      if (i==-1) boundXXX_set_infty(x,-1);
      else if (i==TABSIZE1) boundXXX_set_infty(x,1);
      else boundXXX_set_double(x,k[i],intern);
      testun_boundXXX(x);
      for (j=-1; j<TABSIZE1+1; j++){
	if (j==-1) boundXXX_set_infty(y,-1);
	else if (j==TABSIZE1) boundXXX_set_infty(y,1);
	else boundXXX_set_double(y,k[j],intern);
	testbin_boundXXX(x,y);
	testarith_boundXXX(x,y,3);
      }
    }
    boundXXX_clear(x);
    boundXXX_clear(y);
  }
  FCLOSE;

  MACRO_FOREACH ttt ("itv","eitv");
  FOPEN("out/test_tttXXX.out","a");
  {
    int i1,i2,j1,j2;
    double k[TABSIZE2] = TABCST2;
    tttXXX_t x,y;
    tttXXX_init(x); tttXXX_init(y);

    for (i1=-1; i1<TABSIZE2; i1++){
      if (i1==-1) boundXXX_set_infty(tttXXX_neginfref(x),1);
      else boundXXX_set_double(tttXXX_neginfref(x),-k[i1],intern);
      for (i2=i1+1; i2<TABSIZE2+1; i2++){
	if (i2==TABSIZE2) boundXXX_set_infty(tttXXX_supref(x),1);
	else boundXXX_set_double(tttXXX_supref(x),k[i2],intern);
	tttXXX_canonicalize(x,false);
	testun_tttXXX(x);

	for (j1=-1; j1<TABSIZE2; j1++){
	  if (j1==-1) boundXXX_set_infty(tttXXX_neginfref(y),1);
	  else boundXXX_set_double(tttXXX_neginfref(y),-k[j1],intern);
	  for (j2=j1+1; j2<TABSIZE2+1; j2++){
	    if (j2==TABSIZE2) boundXXX_set_infty(tttXXX_supref(y),1);
	    else boundXXX_set_double(tttXXX_supref(y),k[j2],intern);
	    tttXXX_canonicalize(y,false);

	    testbin_tttXXX(x,y);
	    testarith_tttXXX(x,y,3);
	  }
	}
      }
    }
  }
  FCLOSE;
  ENDMACRO;
  ENDMACRO;

  num_internal_clear(intern);
  return 0;
}
