/* -*- mode: c -*- */
/* ********************************************************************** */
/* ap_linexprconsgen_conv.c: conversion between linear expressions and constraints */
/* ********************************************************************** */

#include "num_types.h"

MACRO_FOREACH XXX @AllNum
#include "boundXXX.h"
#include "itvXXX.h"
#include "eitvXXX.h"
#include "ap_linexprXXX.h"
#include "ap_linconsXXX.h"
#include "ap_lingenXXX.h"
ENDMACRO

#include "num_conv.h"

#define _APXXX_MARK_

MACRO_FOREACH XXX @AllNum
#define MARK1_XXX
MACRO_FOREACH ZZZ @MainNum
#define MARK2_ZZZ

#if defined(MARK1_XXX) && defined(MARK2_XXX)
MACRO_FOREACH yyy ("expr","cons","gen");
bool ap_linyyyXXX_set_linyyyZZZ(ap_linyyyXXX_t a, ap_linyyyZZZ_t b, num_internal_t intern){
  ap_linyyyXXX_set(a,b); return true;
}
bool ap_linyyyXXX_array_set_linyyyZZZ_array(ap_linyyyXXX_array_t a, ap_linyyyZZZ_array_t b, num_internal_t intern){
  ap_linyyyXXX_array_set(a,b); return true;
}
ENDMACRO
#else

#ifndef MARK_XXX_ZZZ
#define MARK_XXX_ZZZ
bool ap_linexprXXX_set_linexprZZZ(ap_linexprXXX_t a, ap_linexprZZZ_t b, num_internal_t intern)
{
  size_t i;
  bool res = eitvXXX_set_eitvZZZ(a->cst,b->cst,intern);
  ap_linexprXXX_resize(a,b->effsize);
  a->effsize = b->effsize;
  for (i=0; i<b->effsize; i++){
    a->linterm[i]->dim = b->linterm[i]->dim;
    res = eitvXXX_set_eitvZZZ(a->linterm[i]->eitv,b->linterm[i]->eitv,intern) || res;
  }
  return res;
}
bool ap_linconsXXX_set_linconsZZZ(ap_linconsXXX_t a, ap_linconsZZZ_t b, num_internal_t intern)
{
  bool res;
  res = ap_linexprXXX_set_linexprZZZ(a->linexpr,b->linexpr,intern);
  a->constyp = b->constyp;
  mpq_set(a->mpq,b->mpq);
  return res;
}
bool ap_lingenXXX_set_lingenZZZ(ap_lingenXXX_t a, ap_lingenZZZ_t b, num_internal_t intern)
{
  bool res;
  res = ap_linexprXXX_set_linexprZZZ(a->linexpr,b->linexpr,intern);
  a->gentyp = b->gentyp;
  return res;
}

MACRO_FOREACH yyy ("expr","cons","gen");
bool ap_linyyyXXX_array_set_linyyyZZZ_array(ap_linyyyXXX_array_t a, ap_linyyyZZZ_array_t b, num_internal_t intern)
{
  size_t i;
  bool res = true;
  ap_linyyyXXX_array_resize(a,b->size);
  for (i=0; i<b->size; i++){
    res = ap_linyyyXXX_set_linyyyZZZ(a->p[i],b->p[i],intern) && res;
  }
  return res;
}
ENDMACRO
#endif

#ifndef MARK_ZZZ_XXX
#define MARK_ZZZ_XXX
bool ap_linexprZZZ_set_linexprXXX(ap_linexprZZZ_t a, ap_linexprXXX_t b, num_internal_t intern)
{
  size_t i;
  bool res = eitvZZZ_set_eitvXXX(a->cst,b->cst,intern);
  ap_linexprZZZ_resize(a,b->effsize);
  a->effsize = b->effsize;
  for (i=0; i<b->effsize; i++){
    a->linterm[i]->dim = b->linterm[i]->dim;
    res = eitvZZZ_set_eitvXXX(a->linterm[i]->eitv,b->linterm[i]->eitv,intern) || res;
  }
  return res;
}
bool ap_linconsZZZ_set_linconsXXX(ap_linconsZZZ_t a, ap_linconsXXX_t b, num_internal_t intern)
{
  bool res;
  res = ap_linexprZZZ_set_linexprXXX(a->linexpr,b->linexpr,intern);
  a->constyp = b->constyp;
  return res;
}
bool ap_lingenZZZ_set_lingenXXX(ap_lingenZZZ_t a, ap_lingenXXX_t b, num_internal_t intern)
{
  bool res;
  res = ap_linexprZZZ_set_linexprXXX(a->linexpr,b->linexpr,intern);
  a->gentyp = b->gentyp;
  return res;
}
MACRO_FOREACH yyy ("expr","cons","gen");
bool ap_linyyyZZZ_array_set_linyyyXXX_array(ap_linyyyZZZ_array_t a, ap_linyyyXXX_array_t b, num_internal_t intern)
{
  size_t i;
  bool res = true;
  ap_linyyyZZZ_array_resize(a,b->size);
  for (i=0; i<b->size; i++){
    res = ap_linyyyZZZ_set_linyyyXXX(a->p[i],b->p[i],intern) && res;
  }
  return res;
}
ENDMACRO
#endif

#endif
#undef MARK2_ZZZ
ENDMACRO
#undef MARK1_XXX
ENDMACRO

#undef _APXXX_MARK_
