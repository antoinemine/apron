/* -*- mode: c -*- */

/* ************************************************************************* */
/* ap_coeff.h: coefficients, that are either scalars or intervals */
/* ************************************************************************* */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

#ifndef _AP_COEFF_H_
#define _AP_COEFF_H_

#include <assert.h>
#include <math.h>
#include <stdio.h>
#include <stdarg.h>

#include "ap_config.h"
#include "num_types.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef enum ap_scalar_discr_t {
  AP_SCALAR_D,      /* double-precision floating-point number */
  AP_SCALAR_MPQ,    /* GMP arbitrary precision rational */
  AP_SCALAR_MPFR,   /* MPFR floating-point number */
} ap_scalar_discr_t;

typedef struct ap_coeff_struct {
  ap_scalar_discr_t discr; /* discriminant for coefficient */
  union {
    eitvD_ptr    D;
    eitvMPQ_ptr  MPQ;
    eitvMPFR_ptr MPFR;
  } eitv;
} ap_coeff_struct;

typedef ap_coeff_struct* ap_coeff_ptr;
typedef ap_coeff_struct ap_coeff_t[1];

typedef enum ap_coeff_tag_t {
  AP_COEFF=EITV_EITV,	/* waiting for 1 ap_coeff_t* and a dimension/var */
  MACRO_FOREACH XXX ("Il","Ill","MPZ","Rl","Rll","MPQ","D","Dl","MPFR");
  AP_COEFF_NUMXXX,      /* waiting for 1 numXXX_t */
  AP_COEFF_NUMXXX2,     /* waiting for 2 numXXX_t */
  AP_COEFF_EITVXXX,	/* waiting for 1 eitvXXX_t */
  ENDMACRO;
  AP_COEFF_LINT,	/* waiting for 1 long int and a dimension/var */
  AP_COEFF_LINT2,	/* waiting for 2 long int and a dimension/var */
  AP_COEFF_MPZ,		/* waiting for 1 mpz_t and a dimension/var */
  AP_COEFF_MPZ2,	/* waiting for 2 mpz_t and a dimension/var */
  AP_COEFF_LFRAC,	/* waiting for 2 long int and a dimension/var */
  AP_COEFF_LFRAC2,	/* waiting for 4 long int and a dimension/var */
  AP_COEFF_MPQ,		/* waiting for 1 mpq_t and a dimension/var */
  AP_COEFF_MPQ2,	/* waiting for 2 mpq_t and a dimension/var */
  AP_COEFF_DOUBLE,	/* waiting for 1 double and a dimension/var */
  AP_COEFF_DOUBLE2,	/* waiting for 2 double and a dimension/var */
  AP_COEFF_MPFR,	/* waiting for 1 mpfr_t and a dimension/var */
  AP_COEFF_MPFR2,	/* waiting for 2 mpfr_t double and a dimension/var */

  AP_CST,		/* waiting for 1 ap_coeff_t* */
  MACRO_FOREACH XXX ("Il","Ill","MPZ","Rl","Rll","MPQ","D","Dl","MPFR");
  AP_CST_NUMXXX,      /* waiting for 1 numXXX_t */
  AP_CST_NUMXXX2,     /* waiting for 2 numXXX_t */
  AP_CST_EITVXXX,	/* waiting for 1 eitvXXX_t */
  ENDMACRO;
  AP_CST_LINT,		/* waiting for 1 long int */
  AP_CST_LINT2,		/* waiting for 2 long int */
  AP_CST_MPZ,		/* waiting for 1 mpz_t */
  AP_CST_MPZ2,		/* waiting for 2 mpz_t */
  AP_CST_LFRAC,		/* waiting for 2 long int */
  AP_CST_LFRAC2,	/* waiting for 4 long int */
  AP_CST_MPQ,		/* waiting for 1 mpq_t */
  AP_CST_MPQ2,		/* waiting for 2 mpq_t */
  AP_CST_DOUBLE,	/* waiting for 1 double */
  AP_CST_DOUBLE2,	/* waiting for 2 double */
  AP_CST_MPFR,		/* waiting for 1 mpfr_t */
  AP_CST_MPFR2,		/* waiting for 2 mpfr_t double */
  AP_END
} ap_coeff_tag_t;

#define AP_COEFF_NUMINTRl AP_COEFF_NUMIl
#define AP_COEFF_NUMINTRll AP_COEFF_NUMIll
#define AP_COEFF_NUMINTMPQ AP_COEFF_NUMMPZ
#define AP_COEFF_NUMINTRl2 AP_COEFF_NUMIl2
#define AP_COEFF_NUMINTRll2 AP_COEFF_NUMIll2
#define AP_COEFF_NUMINTMPQ2 AP_COEFF_NUMMPZ2
#define AP_CST_NUMINTRl AP_CST_NUMIl
#define AP_CST_NUMINTRll AP_CST_NUMIll
#define AP_CST_NUMINTMPQ AP_CST_NUMMPZ
#define AP_CST_NUMINTRl2 AP_CST_NUMIl2
#define AP_CST_NUMINTRll2 AP_CST_NUMIll2
#define AP_CST_NUMINTMPQ2 AP_CST_NUMMPZ2

/* ====================================================================== */
/* Basics */
/* ====================================================================== */

void ap_coeff_init(ap_coeff_t coeff, ap_scalar_discr_t discr);
void ap_coeff_init_set(ap_coeff_t coeff, ap_coeff_t coeff2);
MACRO_FOREACH ZZZ @MainNum
void ap_coeff_init_set_eitvZZZ(ap_coeff_t coeff, eitvZZZ_t eitv);
ENDMACRO
void ap_coeff_clear(ap_coeff_t coeff);
void ap_coeff_fprint(FILE* stream, ap_coeff_t a);
void ap_coeff_print(ap_coeff_t a);

bool ap_coeff_set(ap_coeff_t a, ap_coeff_t b, num_internal_t intern);
void ap_coeff_set_int(ap_coeff_t a, int b);
void ap_coeff_set_bottom(ap_coeff_t coeff);
void ap_coeff_set_top(ap_coeff_t coeff);

static inline void ap_coeff_swap(ap_coeff_t a, ap_coeff_t b)
{ ap_coeff_struct t = *a; *a = *b; *b = t; }
  /* Exchange */

/* ====================================================================== */
/* Conversions */
/* ====================================================================== */

bool ap_coeff_set_val(num_internal_t intern,
		      ap_coeff_t a, ap_coeff_tag_t tag, ...);

MACRO_FOREACH ZZZ @AllNum
bool ap_coeff_set_eitvZZZ(ap_coeff_t a, eitvZZZ_t b, num_internal_t intern);
bool eitvZZZ_set_ap_coeff(eitvZZZ_t a, ap_coeff_t b, num_internal_t intern);
ENDMACRO
  /* Return true if conversion is exact */

/* Internal use */
bool ap_coeff_set_generic(num_internal_t intern,
			  ap_coeff_t a, ap_coeff_tag_t tag, va_list* va);

/* ====================================================================== */
/* Tests */
/* ====================================================================== */
bool ap_coeff_is_point(ap_coeff_t a);
  /* Return true iff the interval is a single point */
bool ap_coeff_is_zero(ap_coeff_t a);
  /* Return true iff the interval is a single zero point */
bool ap_coeff_is_pos(ap_coeff_t a);
bool ap_coeff_is_neg(ap_coeff_t a);
  /* Included in [0;+oo], [-oo;0], or any of those */
bool ap_coeff_is_top(ap_coeff_t a);
  /* Return true iff the interval is resp. [-oo,+oo] */
bool ap_coeff_is_bottom(ap_coeff_t a);
  /* Return true iff the interval is empty */
bool ap_coeff_is_eq(ap_coeff_t a, ap_coeff_t b);
  /* True if same discriminant and equality */
bool ap_coeff_is_leq(ap_coeff_t a, ap_coeff_t b);
  /* True if same discriminant inclusion */
int ap_coeff_cmp(ap_coeff_t a, ap_coeff_t b);
  /* Returns 3/-3 if different discriminants, otherwise returns eitvZZZ_cmp */

/* ====================================================================== */
/* Other operations */
/* ====================================================================== */

long ap_coeff_hash(ap_coeff_t coeff);
  /* Hash code */

/* ====================================================================== */
/* FOR INTERNAL USE ONLY */
/* ====================================================================== */

MACRO_FOREACH ZZZ @MainNum
static inline void ap_coeff_cons_eitvZZZ(ap_coeff_t res, eitvZZZ_t e)
{ res->discr = AP_SCALAR_ZZZ; res->eitv.ZZZ = e; };
ENDMACRO

#ifdef __cplusplus
}
#endif

#endif
