/* -*- mode: c -*- */

/* ************************************************************************* */
/* ap_coeff.h: coefficients, that are either scalars or intervals */
/* ************************************************************************* */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

#ifndef _AP_COEFF_H_
#define _AP_COEFF_H_

#include <assert.h>
#include <math.h>
#include <stdio.h>

#include "ap_config.h"
#include "itvMPQ_types.h"
#include "itvD_types.h"
#include "itvMPFR_types.h"

#include "itvIl_types.h"
#include "itvIll_types.h"
#include "itvMPZ_types.h"
#include "itvRl_types.h"
#include "itvRll_types.h"
#include "itvDl_types.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef enum ap_scalar_discr_t {
  AP_SCALAR_MPQ,    /* GMP arbitrary precision rational */
  AP_SCALAR_D,      /* double-precision floating-point number */
  AP_SCALAR_MPFR,   /* MPFR floating-point number */
} ap_scalar_discr_t;

typedef struct ap_coeff_struct {
  bool ref;         /* If true, is only a reference */
  ap_scalar_discr_t discr; /* discriminant for coefficient */
  union {
    eitvD_ptr    D;
    eitvMPQ_ptr  MPQ;
    eitvMPFR_ptr MPFR;
  } eitv;
} ap_coeff_struct;

typedef ap_coeff_struct* ap_coeff_ptr;
typedef ap_coeff_struct ap_coeff_t[1];

/* ====================================================================== */
/* Basics */
/* ====================================================================== */

void ap_coeff_init(ap_coeff_t coeff, ap_scalar_discr_t discr);
void ap_coeff_init_set(ap_coeff_t coeff, ap_coeff_t coeff2);
MACROX
void ap_coeff_init_set_XXX(ap_coeff_t coeff, eitvXXX_t eitv);
ENDMACRO
void ap_coeff_clear(ap_coeff_t coeff);
void ap_coeff_fprint(FILE* stream, ap_coeff_t a);
static inline void ap_coeff_print(ap_coeff_t a);

bool ap_coeff_set(ap_coeff_t a, ap_coeff_t b, numinternal_t intern);
void ap_coeff_set_int(ap_coeff_t a, int b);
void ap_coeff_set_bottom(ap_coeff_t coeff);
void ap_coeff_set_top(ap_coeff_t coeff);

static inline void ap_coeff_swap(ap_coeff_t a, ap_coeff_t b)
{ ap_coeff_struct t = *a; *a = *b; *b = t; }
  /* Exchange */

MACROX
static inline void ap_coeff_ref_XXX(ap_coeff_t res, eitvXXX_t e);
ENDMACRO

/* ====================================================================== */
/* Conversions */
/* ====================================================================== */

MACROZ
bool ap_coeff_set_eitvZZZ(ap_coeff_t a, eitvZZZ_t b, numinternal_t intern);
bool eitvZZZ_set_ap_coeff(eitvZZZ_t a, ap_coeff_t b, numinternal_t intern);
ENDMACRO
  /* Return true if conversion is exact */

/* ====================================================================== */
/* Tests */
/* ====================================================================== */
bool ap_coeff_is_point(ap_coeff_t a);
  /* Return true iff the interval is a single point */
bool ap_coeff_is_zero(ap_coeff_t a);
  /* Return true iff the interval is a single zero point */
bool ap_coeff_is_pos(ap_coeff_t a);
bool ap_coeff_is_neg(ap_coeff_t a);
  /* Included in [0;+oo], [-oo;0], or any of those */
bool ap_coeff_is_top(ap_coeff_t a);
  /* Return true iff the interval is resp. [-oo,+oo] */
bool ap_coeff_is_eq(ap_coeff_t a, ap_coeff_t b);

/* ====================================================================== */
/* Other operations */
/* ====================================================================== */

long ap_coeff_hash(ap_coeff_t coeff);
  /* Hash code */

/* ====================================================================== */
/* FOR INTERNAL USE ONLY */
/* ====================================================================== */

static inline void ap_coeff_print(ap_coeff_t a)
{ ap_coeff_fprint(stdout,a); }
  /* Printing */

MACROX
static inline void ap_coeff_ref_XXX(ap_coeff_t res, eitvXXX_t e)
{ res->discr = AP_SCALAR_XXX; res->ref = true; res->eitv.XXX = e; };
ENDMACRO

#ifdef __cplusplus
}
#endif

#endif
