/* -*- mode: c -*- */

/* ************************************************************************* */
/* ap_lincons0.h: linear constraints and arrays */
/* ************************************************************************* */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

/* normally included from ap_expr0.h */

#ifndef _AP_LINCONS0_H_
#define _AP_LINCONS0_H_

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include "ap_coeff.h"
#include "ap_dimension.h"
#include "ap_linexpr0.h"
#include "ap_linconsD.h"
#include "ap_linconsMPQ.h"
#include "ap_linconsMPFR.h"

#ifdef __cplusplus
extern "C" {
#endif

/* ====================================================================== */
/* Datatypes */
/* ====================================================================== */

typedef struct ap_lincons0_struct {
  ap_scalar_discr_t discr;
  union {
    ap_linconsD_ptr    D;
    ap_linconsMPQ_ptr  MPQ;
    ap_linconsMPFR_ptr MPFR;
  } lincons;
} ap_lincons0_struct;
typedef ap_lincons0_struct ap_lincons0_t[1];
typedef ap_lincons0_struct* ap_lincons0_ptr;


/* ====================================================================== */
/* I. Memory management and printing */
/* ====================================================================== */

void ap_lincons0_init(ap_lincons0_t res, ap_scalar_discr_t discr, size_t size);
void ap_lincons0_init_set(ap_lincons0_t res, ap_lincons0_t e);
MACRO_MAINZ
void ap_lincons0_init_set_linconsZZZ(ap_lincons0_t res, ap_linconsZZZ_t e);
ENDMACRO
void ap_lincons0_minimize(ap_lincons0_t a);
void ap_lincons0_clear(ap_lincons0_t e);
void ap_lincons0_fprint(FILE* stream, ap_lincons0_t e, char** name_of_dim);
  /* Printing a linear expression */

/* ====================================================================== */
/* II. Conversions */
/* ====================================================================== */

bool ap_lincons0_set(ap_lincons0_t res, ap_lincons0_t e, num_internal_t intern);
MACRO_MAINZ
bool ap_lincons0_set_linconsZZZ(ap_lincons0_t a, ap_linconsZZZ_t b, num_internal_t intern);
bool ap_linconsZZZ_set_lincons0(ap_linconsZZZ_t a, ap_lincons0_t b, num_internal_t intern);
ENDMACRO

/* ====================================================================== */
/* III. Access */
/* ====================================================================== */

bool ap_lincons0_get_lincons0(ap_lincons0_t e, ap_lincons0_t c, num_internal_t intern);
  /* Get the underlying expression and assign it to e with possible
     conversion */
ap_constyp_t ap_lincons0_get_constyp(ap_lincons0_t c);
void ap_lincons0_get_mpq(mpq_t mpq, ap_lincons0_t c);

void ap_lincons0_lincons0ref(ap_lincons0_t e, ap_lincons0_t c);
ap_constyp_t* ap_lincons0_constypref(ap_lincons0_t c);
mpq_ptr ap_lincons0_mpqref(ap_lincons0_t c);

bool ap_lincons0_set_lincons0(ap_lincons0_t c, ap_lincons0_t e, num_internal_t intern);
  /* Assign the underlying expression of c to e with possible conversion */
void ap_lincons0_set_constyp(ap_lincons0_t c, ap_constyp_t constyp);
void ap_lincons0_set_mpq(ap_lincons0_t c, mpq_t mpq);

/* ====================================================================== */
/* IV. Change of dimensions and permutations */
/* ====================================================================== */

/* This function add dimensions to the expressions, following the
   semantics of dimchange (see the type definition of dimchange).  */
void ap_lincons0_add_dimensions(ap_lincons0_t a,
				ap_lincons0_t b,
				ap_dimchange_t* dimchange);

/* This function apply the given permutation to the dimensions. If dense
   representation, the size of the permutation should be expr->size. If sparse
   representation, the dimensions present in the expression should just be less
   than the size of the permutation. */
void ap_lincons0_permute_dimensions(ap_lincons0_t a,
				    ap_lincons0_t b,
				    ap_dimperm_t* perm);

/* ====================================================================== */
/* V. Hashing, comparison */
/* ====================================================================== */

/* Induces reduction of the coefficients */

int ap_lincons0_hash(ap_lincons0_t expr);
bool ap_lincons0_equal(ap_lincons0_t expr1,
		       ap_lincons0_t expr2);

/* Lexicographic ordering, terminating by constant coefficients */
int ap_lincons0_compare(ap_lincons0_t expr1,
			ap_lincons0_t expr2);

MACRO_MAINZ
static inline void ap_lincons0_cons_ZZZ(ap_lincons0_t res, ap_linconsZZZ_t e)
{ res->discr = AP_SCALAR_ZZZ; res->lincons.ZZZ = e; };
ENDMACRO

#ifdef __cplusplus
}
#endif

#endif
