/* -*- mode: c -*- */
/* ********************************************************************** */
/* num_conv.c */
/* ********************************************************************** */

#include "num_all.h"
#include "bound_all.h"
#include "itv_all.h"
#include "eitv_all.h"

/* ********************************************************************** */
/* I. numXXX */
/* ********************************************************************** */

/* ====================================================================== */
/* 1. numIyyy_t */
/* ====================================================================== */

MACRO_numIRyyy
inline bool lint_fits_numIyyy(long int a)
{ return true; }
inline bool lfrac_fits_numIyyy(long int i, long int j)
{ return true; }
bool mpq_fits_numIyyy(mpq_t a)
{
  size_t n = mpz_sizeinbase(mpq_numref(a),2);
  size_t d = mpz_sizeinbase(mpq_denref(a),2);
  return ((int)n - (int)d) <= (int)(sizeof(numIyyy_t)*8-3);
}
inline bool double_fits_numIyyy(double a)
{
  return isfinite(a) && a>=(double)(-NUMIyyy_MAX) && a<=(double)NUMIyyy_MAX;
}
inline bool ldouble_fits_numIyyy(long double a)
{
  return isfinite(a) && a>=(long double)(-NUMIyyy_MAX) && a<=(long double)NUMIyyy_MAX;
}
ENDMACRO

inline bool llint_fits_numIl(long long int a)
{ return a>=-NUMIl_MAX && a<=NUMIl_MAX; }
inline bool mpz_fits_numIl(mpz_t a)
{ return mpz_fits_slong_p(a); }
inline bool llfrac_fits_numIl(long long int i, long long int j)
{
  return llint_fits_numIl(i>=0 ? (i+j-1)/j : i/j);
}
inline bool mpfr_fits_numIl(mpfr_t a, num_internal_t intern)
{
  return mpfr_number_p(a) && mpfr_fits_slong_p(a,GMP_RNDU);
}

inline bool llint_fits_numIll(long long int a)
{ return true; }
inline bool mpz_fits_numIll(mpz_t a)
{
  size_t size = mpz_sizeinbase(a,2);
  return (size <= sizeof(numIll_t)*8-1);
}
inline bool llfrac_fits_numIll(long long int i, long long int j)
{ return true; }
inline bool mpfr_fits_numIll(mpfr_t a, num_internal_t intern)
{
  return mpfr_number_p(a) && mpfr_fits_intmax_p(a,GMP_RNDU);
}


inline bool numIl_fits_lint(numIl_t a)
{ return true; }
inline bool numIll_fits_lint(numIll_t a)
{ return llint_fits_numIl(*a); }
MACRO_numIRyyy
inline bool numIyyy_fits_llint(numIyyy_t a)
{ return true; }
inline bool numIyyy_fits_mpz(numIyyy_t a)
{ return true; }
inline bool numIyyy_fits_lfrac(numIyyy_t a)
{ return numIyyy_fits_lint(a); }
inline bool numIyyy_fits_llfrac(numIyyy_t a)
{ return true; }
inline bool numIyyy_fits_mpq(numIyyy_t a)
{ return true; }
inline bool numIyyy_fits_float(numIyyy_t a)
{ return true; }
inline bool numIyyy_fits_double(numIyyy_t a)
{ return true; }
inline bool numIyyy_fits_ldouble(numIyyy_t a)
{ return true; }
inline bool numIyyy_fits_mpfr(numIyyy_t a)
{ return true; }

inline bool numIyyy_set_lint(numIyyy_t a, long int b, num_internal_t intern)
{ *a = b; return true; }
inline bool numIyyy_set_llint(numIyyy_t a, long long int b, num_internal_t intern)
{ *a = b; return true; }
inline bool numIyyy_set_lfrac(numIyyy_t a, long int i, long int j, num_internal_t intern)
{
  assert(j>0);
  if (i>=0) *a = (i+j-1)/j;
  else *a = i/j;
  return (i%j==0);
}
inline bool numIyyy_set_llfrac(numIyyy_t a, long long int i, long long int j, num_internal_t intern)
{
  long long int t;
  assert(j>0);
  t = i>=0 ? (i+j-1)/j : i/j;
  return numIyyy_set_llint(a,t,intern) && i%j==0;
}
ENDMACRO

inline bool numIl_set_mpz(numIl_t a, mpz_t b, num_internal_t intern)
{
  *a = mpz_get_si(b);
  return true;
}
bool numIll_set_mpz(numIll_t a, mpz_t b, num_internal_t intern)
{
  int sgn;
  size_t count;
  unsigned long int tab[2];
  bool res;

  sgn = mpz_sgn(b);
  mpz_export(&tab,&count,1,sizeof(long int),0,0,b);
  if (count==0){
    *a = 0;
    res = true;
  }
  else {
    const int dec =
      (sizeof(long int) == sizeof(long long int)) ?
      0 :
      sizeof(long int)*8;

    *a = tab[0];
    if (count==2){
      assert(dec!=0);
      *a = *a << dec;
      *a = *a + (long long int)(tab[1]);
      assert(*a>=0LL);
      count = mpz_sizeinbase(b,2);
      res = count <= sizeof(numIll_t)*8-1;
    }
    else {
      res = true;
    }
    if (sgn<0) *a = -(*a);
  }
  return res;
}
MACRO_numIRyyy
inline bool numIyyy_set_mpq(numIyyy_t a, mpq_t b, num_internal_t intern)
{
  mpz_cdiv_qr(intern->q, intern->r, mpq_numref(b),mpq_denref(b));
  numIyyy_set_mpz(a,intern->q,intern);
  return mpz_sgn(intern->r)==0;
}
inline bool numIyyy_set_double(numIyyy_t a, double b, num_internal_t intern)
{
  double c = ceil(b);
  if (!isfinite(c)) { DEBUG_SPECIAL; *a = 0; return false; }
  *a = c;
  return b==c;
}
inline bool numIyyy_set_ldouble(numIyyy_t a, long double b, num_internal_t intern)
{
  long double c = ceill(b);
  if (!isfinite(c)) { DEBUG_SPECIAL; *a = 0; return false; }
  *a = c;
  return b==c;
}
ENDMACRO
inline bool numIl_set_mpfr(numIl_t a, mpfr_t b, num_internal_t intern)
{
  if (!mpfr_number_p(b)) { DEBUG_SPECIAL; numIl_set_int(a,0); return false; }
  *a = mpfr_get_si(b,GMP_RNDU);
  return mpfr_integer_p(b);
}
inline bool numIll_set_mpfr(numIll_t a, mpfr_t b, num_internal_t intern)
{
  if (!mpfr_number_p(b)) { DEBUG_SPECIAL; numIll_set_int(a,0); return false; }
  *a = mpfr_get_sj(b,GMP_RNDU);
  return mpfr_integer_p(b);
}

MACRO_numIRyyy
inline bool lint_set_numIyyy(long int* a, numIyyy_t b, num_internal_t intern)
{ *a = *b; return true; }
inline bool llint_set_numIyyy(long long int* a, numIyyy_t b, num_internal_t intern)
{ *a = *b; return true; }
ENDMACRO
inline bool mpz_set_numIl(mpz_t a, numIl_t b, num_internal_t intern)
{ mpz_set_si(a,*b); return true; }
bool mpz_set_numIll(mpz_t a, numIll_t b, num_internal_t intern)
{
  unsigned long long int n;
  unsigned long int rep[2];
  const int dec =
    (sizeof(long int) == sizeof(long long int)) ?
    0 :
    sizeof(long int)*8;

  n = llabs(*b);
  if (dec==0){
    rep[0] = n & ULONG_MAX;
    mpz_import(a,1,1,sizeof(unsigned long int),0,0,rep);
  }
  else {
    rep[1] = n & ULONG_MAX;
    rep[0] = n >> dec;
    mpz_import(a,2,1,sizeof(unsigned long int),0,0,rep);
  }
  if (*b<0)
    mpz_neg(a,a);
  return true;
}
MACRO_numIRyyy
inline bool lfrac_set_numIyyy(long int *a, long int* b, numIyyy_t c, num_internal_t intern)
{
  *a = *c;
  *b = 1L;
  return true;
}
inline bool llfrac_set_numIyyy(long long int *a, long long int* b, numIyyy_t c, num_internal_t intern)
{
  *a = *c;
  *b = 1LL;
  return true;
}
inline bool mpq_set_numIyyy(mpq_t a, numIyyy_t b, num_internal_t intern)
{
  mpz_set_numIyyy(mpq_numref(a),b,intern);
  mpz_set_ui(mpq_denref(a),1);
  return true;
}
inline bool double_set_numIyyy(double* a, numIyyy_t b, num_internal_t intern)
{
  *a = (double)(*b);
  double aa = -((double)(-(*b)));
  return (*a==aa);
}
inline bool ldouble_set_numIyyy(long double* a, numIyyy_t b, num_internal_t intern)
{
  *a = (long double)(*b);
  long double aa = -((long double)(-(*b)));
  return (*a==aa);
}
ENDMACRO
inline bool mpfr_set_numIl(mpfr_t a, numIl_t b, num_internal_t intern)
{
  return !mpfr_set_si(a,*b,GMP_RNDU);
}
inline bool mpfr_set_numIll(mpfr_t a, numIll_t b, num_internal_t intern)
{
  return !mpfr_set_sj(a,*b,GMP_RNDU);
}

/* ====================================================================== */
/* 2. numMPZ_t */
/* ====================================================================== */

inline bool lint_fits_numMPZ(long int a)
{ return true; }
inline bool llint_fits_numMPZ(long long int a)
{ return true; }
inline bool mpz_fits_numMPZ(mpz_t a)
{ return true; }
inline bool lfrac_fits_numMPZ(long int i, long int j)
{ return true; }
inline bool llfrac_fits_numMPZ(long long int i, long long int j)
{ return true; }
inline bool mpq_fits_numMPZ(mpq_t a)
{ return true; }
inline bool double_fits_numMPZ(double a)
{ return isfinite(a); }
inline bool ldouble_fits_numMPZ(long double a)
{ return isfinite(a); }
inline bool mpfr_fits_numMPZ(mpfr_t a, num_internal_t intern)
{ return mpfr_number_p(a); }

inline bool numMPZ_fits_lint(numMPZ_t a)
{ return mpz_fits_slong_p(a); }
inline bool numMPZ_fits_llint(numMPZ_t a)
{ return mpz_fits_numIll(a); }
inline bool numMPZ_fits_mpz(numMPZ_t a)
{ return true; }
inline bool numMPZ_fits_lfrac(numMPZ_t a)
{ return mpz_fits_numIl(a); }
inline bool numMPZ_fits_llfrac(numMPZ_t a)
{ return mpz_fits_numIll(a); }
inline bool numMPZ_fits_mpq(numMPZ_t a)
{ return true; }
inline bool numMPZ_fits_float(numMPZ_t a)
{ return (mpz_sizeinbase(a,2)<FLT_MAX_EXP-1); }
inline bool numMPZ_fits_double(numMPZ_t a)
{ return (mpz_sizeinbase(a,2)<DBL_MAX_EXP-1); }
inline bool numMPZ_fits_ldouble(numMPZ_t a)
{ return (mpz_sizeinbase(a,2)<LDBL_MAX_EXP-1); }
inline bool numMPZ_fits_mpfr(numMPZ_t a)
{ return (mpz_sizeinbase(a,2)+1<(size_t)mpfr_get_emax()); }

inline bool numMPZ_set_lint(numMPZ_t a, long int b, num_internal_t intern)
{ mpz_set_si(a,b); return true; }
inline bool numMPZ_set_llint(numMPZ_t a, long long int b, num_internal_t intern)
{ return mpz_set_numIll(a,&b,intern); }
inline bool numMPZ_set_mpz(numMPZ_t a, mpz_t b, num_internal_t intern)
{ mpz_set(a,b); return true; }
inline bool numMPZ_set_lfrac(numMPZ_t a, long int i, long int j, num_internal_t intern)
{
  long int q = (i>=0) ? (i+j-1)/j : i/j;
  mpz_set_si(a,q);
  return (i%j==0);
}
inline bool numMPZ_set_llfrac(numMPZ_t a, long long int i, long long int j, num_internal_t intern)
{
  long long int q = (i>=0) ? (i+j-1)/j : i/j;
  return numMPZ_set_llint(a,q,intern) && (i%j==0);
}
inline bool numMPZ_set_mpq(numMPZ_t a, mpq_t b, num_internal_t intern)
{
  mpz_cdiv_qr(a, intern->r, mpq_numref(b),mpq_denref(b));
  return mpz_sgn(intern->r)==0;
}
inline bool numMPZ_set_double(numMPZ_t a, double b, num_internal_t intern)
{
  double c = ceil(b);
  if (!isfinite(c)) { DEBUG_SPECIAL; mpz_set_si(a,0); return false; }
  mpz_set_d(a,c);
  return (b==c);
}
/* mpfr is supposed to have exactly the IEEE754 double precision of NUMFLTDL_MANT_DIG bits */
inline bool numMPZ_set_ldouble(numMPZ_t a, long double b, num_internal_t intern)
{
  long double c = ceill(b);
  if (!isfinite(c)) { DEBUG_SPECIAL; mpz_set_si(a,0); return false; }
  int res = mpfr_set_ld(intern->ldbl,b,GMP_RNDU);
  mpfr_get_z(a,intern->ldbl,GMP_RNDU);
  return (res==0) && (b==c);
}
inline bool numMPZ_set_mpfr(numMPZ_t a, mpfr_t b, num_internal_t intern)
{
  if (!mpfr_number_p(b)) { DEBUG_SPECIAL; numMPZ_set_int(a,0); return false; }
  mpfr_get_z(a,b,GMP_RNDU);
  return mpfr_integer_p(b);
}

inline bool lint_set_numMPZ(long int* a, numMPZ_t b, num_internal_t intern)
{ *a = mpz_get_si(b); return true; }
inline bool llint_set_numMPZ(long long int* a, numMPZ_t b, num_internal_t intern)
{ return numIll_set_mpz(a,b,intern); }
inline bool mpz_set_numMPZ(mpz_t a, numMPZ_t b, num_internal_t intern)
{ mpz_set(a,b); return true; }
inline bool lfrac_set_numMPZ(long int* i, long int* j, numMPZ_t b, num_internal_t intern)
{ *j = 1L; return lint_set_numMPZ(i,b,intern); }
inline bool llfrac_set_numMPZ(long long int* i, long long int* j, numMPZ_t b, num_internal_t intern)
{ *j = 1LL; return llint_set_numMPZ(i,b,intern); }
inline bool mpq_set_numMPZ(mpq_t a, numMPZ_t b, num_internal_t intern)
{
  mpz_set(mpq_numref(a),b);
  mpz_set_ui(mpq_denref(a),1);
  return true;
}
/* mpfr is supposed to have exactly the IEEE754 double precision of 53 bits */
inline bool double_set_numMPZ(double* a, numMPZ_t b, num_internal_t intern)
{
  int res = mpfr_set_z(intern->dbl,b,GMP_RNDU);
  *a = mpfr_get_d(intern->dbl,GMP_RNDU);/* Normally, exact conversion here (unless overflow) */
  return (res==0);
}
/* mpfr is supposed to have exactly the IEEE754 double precision of NUMFLTDL_MANT_DIG bits */
inline bool ldouble_set_numMPZ(long double* a, numMPZ_t b, num_internal_t intern)
{
  int res = mpfr_set_z(intern->ldbl,b,GMP_RNDU);
  *a = mpfr_get_ld(intern->ldbl,GMP_RNDU);/* Normally, exact conversion here (unless overflow) */
  return (res==0);
}
inline bool mpfr_set_numMPZ(mpfr_t a, numMPZ_t b, num_internal_t intern)
{ return !mpfr_set_z(a,b,GMP_RNDU); }

/* ====================================================================== */
/* 3. numRyyy and numintIyyy */
/* ====================================================================== */

MACRO_numIRyyy
/* ---------------------------------------------------------------------- */
/* Fits zzz_fits_numRyyy */
/* ---------------------------------------------------------------------- */

inline bool lint_fits_numRyyy(long int a)
{ return lint_fits_numIyyy(a); }
inline bool llint_fits_numRyyy(long long int a)
{ return llint_fits_numIyyy(a); }
inline bool mpz_fits_numRyyy(mpz_t a)
{ return mpz_fits_numIyyy(a); }
inline bool lfrac_fits_numRyyy(long int i, long int j)
{ return lint_fits_numIyyy(i) && lint_fits_numIyyy(j); }
inline bool llfrac_fits_numRyyy(long long int i, long long int j)
{ return llint_fits_numIyyy(i) && llint_fits_numIyyy(j); }
inline bool mpq_fits_numRyyy(mpq_t a)
{ return mpz_fits_numIyyy(mpq_numref(a)) && mpz_fits_numIyyy(mpq_denref(a)); }
bool double_fits_numRyyy(double k)
{
  double mant;
  int e;
  if (!isfinite(k)) return false;
  mant = frexp(k,&e);
  return e < (int)sizeof(numIyyy_t)*8-1;
}
bool ldouble_fits_numRyyy(long double k)
{
  long double mant;
  int e;
  if (!isfinite(k)) return false;
  mant = frexpl(k,&e);
  return e < (int)sizeof(numIyyy_t)*8-1;
}
bool mpfr_fits_numRyyy(mpfr_t a, num_internal_t intern)
{
  mp_exp_t e;
  if (!mpfr_number_p(a)) return false;
  if (mpfr_sgn(a)==0) return true;
  e = mpfr_get_exp(a);
  return e < (mp_exp_t)sizeof(numIyyy_t)*8-1;
}
/* ---------------------------------------------------------------------- */
/* Fits numRyyy_fits_zzz */
/* ---------------------------------------------------------------------- */
inline bool numRyyy_fits_lint(numRyyy_t a)
{
  numIyyy_t b;
  numIyyy_cdiv_q(b,a->n,a->d);
  return *b<=LONG_MAX && *b>=-LONG_MAX;
}
inline bool numRyyy_fits_llint(numRyyy_t a)
{ return true; }
inline bool numRyyy_fits_mpz(numRyyy_t a)
{ return true; }
inline bool numRyyy_fits_lfrac(numRyyy_t a)
{ return numIyyy_fits_lint(numRyyy_numref(a)) && numIyyy_fits_lint(numRyyy_denref(a)); }
inline bool numRyyy_fits_llfrac(numRyyy_t a)
{ return true; }
inline bool numRyyy_fits_mpq(numRyyy_t a)
{ return true; }
inline bool numRyyy_fits_float(numRyyy_t a)
{ return true; }
inline bool numRyyy_fits_double(numRyyy_t a)
{ return true; }
inline bool numRyyy_fits_ldouble(numRyyy_t a)
{ return true; }
inline bool numRyyy_fits_mpfr(numRyyy_t a)
{ return true; }

/* ---------------------------------------------------------------------- */
/* Conversions numRyyy_set_zzz */
/* ---------------------------------------------------------------------- */
inline bool numRyyy_set_lint(numRyyy_t a, long int b, num_internal_t intern)
{
  numIyyy_set_lint(a->n,b,intern);
  numIyyy_set_int(a->d,1L);
  return true;
}
inline bool numRyyy_set_llint(numRyyy_t a, long long int b, num_internal_t intern)
{
  numIyyy_set_llint(a->n,b,intern);
  numIyyy_set_int(a->d,1);
  return true;
}
inline bool numRyyy_set_mpz(numRyyy_t a, mpz_t b, num_internal_t intern)
{
  numIyyy_set_mpz(a->n,b,intern);
  numIyyy_set_int(a->d,1);
  return true;
}
inline bool numRyyy_set_lfrac(numRyyy_t a, long int i, long int j, num_internal_t intern)
{
  assert(j>0);
  numIyyy_set_lint(a->n,i,intern);
  numIyyy_set_lint(a->d,j,intern);
  numRyyy_canonicalize(a);
  return true;
}
inline bool numRyyy_set_llfrac(numRyyy_t a, long long int i, long long int j, num_internal_t intern)
{
  assert(j>0);
  numIyyy_set_llint(a->n,i,intern);
  numIyyy_set_llint(a->d,j,intern);
  numRyyy_canonicalize(a);
  return true;
}
inline bool numRyyy_set_mpq(numRyyy_t a, mpq_t b, num_internal_t intern)
{
  numIyyy_set_mpz(a->n,mpq_numref(b),intern);
  numIyyy_set_mpz(a->d,mpq_denref(b),intern);
  numRyyy_canonicalize(a);
  return true;
}
bool numRyyy_set_double(numRyyy_t a, double k, num_internal_t intern)
{
  const int size = sizeof(numIyyy_t)*8-2;
  int e,l;
  bool res;

  if (!isfinite(k)) { DEBUG_SPECIAL; numRyyy_set_int(a,0); return false; }
  if (k==0.0){
    numRyyy_set_int(a,0);
    return true;
  }
  k = frexp(k,&e);
  if (e < -size){
    if (k>0.0){
      *a->n = NUMIyyy_ONE;
      *a->d = NUMIyyy_MAX;
    }
    else {
      numRyyy_set_int(a,0);
    }
    return false;
  }
  else if (size-e>=0) {
    l = (e>=0) ? size : (size + e);
    k = ldexp(k,l);
    res = numIyyy_set_double(a->n,k,intern);
    *a->d = NUMIyyy_ONE << (l-e);
    numRyyy_canonicalize(a);
    return res;
  }
  else {
    numRyyy_set_int(a,0);
    return false;
  }
}
bool numRyyy_set_ldouble(numRyyy_t a, long double k, num_internal_t intern)
{
  const int size = sizeof(numIyyy_t)*8-2;
  int e,l;
  bool res;

  if (!isfinite(k)) { DEBUG_SPECIAL; numRyyy_set_int(a,0); return false; }
  if (k==0.0){
    numRyyy_set_int(a,0);
    return true;
  }
  k = frexpl(k,&e);
  if (e < -size){
    if (k>0.0){
      *a->n = NUMIyyy_ONE;
      *a->d = NUMIyyy_MAX;
    }
    else {
      numRyyy_set_int(a,0);
    }
    return false;
  }
  else if (size-e>=0) {
    l = (e>=0) ? size : (size + e);
    k = ldexpl(k,l);
    res = numIyyy_set_ldouble(a->n,k,intern);
    *a->d = NUMIyyy_ONE << (l-e);
    numRyyy_canonicalize(a);
    return res;
  }
  else {
    numRyyy_set_int(a,0);
    return false;
  }
}
inline bool numRyyy_set_mpfr(numRyyy_t a, mpfr_t b, num_internal_t intern)
{
  long double k = mpfr_get_ld(b, GMP_RNDU);
  return numRyyy_set_ldouble(a,k,intern) && (mpfr_cmp_ld(b,k)==0);
}
/* ---------------------------------------------------------------------- */
/* Conversions zzz_set_numRyyy */
/* ---------------------------------------------------------------------- */
inline bool lint_set_numRyyy(long int* a, numRyyy_t b, num_internal_t intern)
{
  numIyyy_t q,r;
  numIyyy_cdiv_qr(q,r,numRyyy_numref(b),numRyyy_denref(b));
  return lint_set_numIyyy(a,q,intern) && (numIyyy_sgn(r)==0);
}
inline bool llint_set_numRyyy(long long int* a, numRyyy_t b, num_internal_t intern)
{
  numIyyy_t q,r;
  numIyyy_cdiv_qr(q,r,numRyyy_numref(b),numRyyy_denref(b));
  return llint_set_numIyyy(a,q,intern) && (numIyyy_sgn(r)==0);
}
inline bool mpz_set_numRyyy(mpz_t a, numRyyy_t b, num_internal_t intern)
{
  numIyyy_t q,r;
  numIyyy_cdiv_qr(q,r,numRyyy_numref(b),numRyyy_denref(b));
  mpz_set_numIyyy(a,q,intern);
  return (numIyyy_sgn(r)==0);
}
inline bool lfrac_set_numRyyy(long int* i, long int* j, numRyyy_t b, num_internal_t intern)
{
  lint_set_numIyyy(i,numRyyy_numref(b),intern);
  lint_set_numIyyy(j,numRyyy_denref(b),intern);
  return true;
}
inline bool llfrac_set_numRyyy(long long int* i, long long int* j, numRyyy_t b, num_internal_t intern)
{
  llint_set_numIyyy(i,numRyyy_numref(b),intern);
  llint_set_numIyyy(j,numRyyy_denref(b),intern);
  return true;
}
inline bool mpq_set_numRyyy(mpq_t a, numRyyy_t b, num_internal_t intern)
{
  mpz_set_numIyyy(mpq_numref(a), numRyyy_numref(b),intern);
  mpz_set_numIyyy(mpq_denref(a), numRyyy_denref(b),intern);
  return true;
}
inline bool double_set_numRyyy(double* a, numRyyy_t b, num_internal_t intern)
{
  *a = (double)(*b->n)/(double)(*b->d);
  return (-*a==(double)(-*b->n)/(double)(*b->d));
}
inline bool ldouble_set_numRyyy(long double* a, numRyyy_t b, num_internal_t intern)
{
  *a = (long double)(*b->n)/(long double)(*b->d);
  return (-*a==(long double)(-*b->n)/(long double)(*b->d));
}
inline bool mpfr_set_numRyyy(mpfr_t a, numRyyy_t b, num_internal_t intern)
{
  int r = mpfr_set_si(a,*numRyyy_numref(b),GMP_RNDU);
  return !mpfr_div_si(a,a,*numRyyy_denref(b),GMP_RNDU) && !r;
}

ENDMACRO

/* ====================================================================== */
/* 4. numMPQ_t */
/* ====================================================================== */

inline bool lint_fits_numMPQ(long int a)
{ return true; }
inline bool llint_fits_numMPQ(long long int a)
{ return true; }
inline bool mpz_fits_numMPQ(mpz_t a)
{ return true; }
inline bool lfrac_fits_numMPQ(long int i, long int j)
{ return true; }
inline bool llfrac_fits_numMPQ(long long int i, long long int j)
{ return true; }
inline bool mpq_fits_numMPQ(mpq_t a)
{ return true; }
inline bool double_fits_numMPQ(double k)
{ return isfinite(k); }
inline bool ldouble_fits_numMPQ(long double k)
{ return isfinite(k); }
inline bool mpfr_fits_numMPQ(mpfr_t a, num_internal_t intern)
{ return mpfr_number_p(a); }

inline bool numMPQ_fits_lint(numMPQ_t a)
{ return mpq_fits_numIl(a); }
inline bool numMPQ_fits_llint(numMPQ_t a)
{ return mpq_fits_numIll(a); }
inline bool numMPQ_fits_mpz(numMPQ_t a)
{ return true; }
inline bool numMPQ_fits_lfrac(numMPQ_t a)
{ return mpq_fits_numRl(a); }
inline bool numMPQ_fits_llfrac(numMPQ_t a)
{ return mpq_fits_numRll(a); }
inline bool numMPQ_fits_mpq(numMPQ_t a)
{ return true; }
inline bool numMPQ_fits_float(numMPQ_t a)
{
  return ((int)mpz_sizeinbase(numMPQ_numref(a),2)-
	  (int)mpz_sizeinbase(numMPQ_denref(a),2)<FLT_MAX_EXP-2);
}
inline bool numMPQ_fits_double(numMPQ_t a)
{
  return ((int)mpz_sizeinbase(numMPQ_numref(a),2)-
	  (int)mpz_sizeinbase(numMPQ_denref(a),2)<DBL_MAX_EXP-2);
}
inline bool numMPQ_fits_ldouble(numMPQ_t a)
{
  return ((int)mpz_sizeinbase(numMPQ_numref(a),2)-
	  (int)mpz_sizeinbase(numMPQ_denref(a),2)<LDBL_MAX_EXP-2);
}
inline bool numMPQ_fits_mpfr(numMPQ_t a)
{
  return ((int)mpz_sizeinbase(numMPQ_numref(a),2)-
	  (int)mpz_sizeinbase(numMPQ_denref(a),2)+1<mpfr_get_emax());
}

inline bool numMPQ_set_lint(numMPQ_t a, long int b, num_internal_t intern)
{ return mpq_set_numIl(a,&b,intern); }
inline bool numMPQ_set_llint(numMPQ_t a, long long int b, num_internal_t intern)
{ return mpq_set_numIll(a,&b,intern); }
inline bool numMPQ_set_mpz(numMPQ_t a, mpz_t b, num_internal_t intern)
{ return mpq_set_numMPZ(a,b,intern); }
inline bool numMPQ_set_lfrac(numMPQ_t a, long int i, long int j, num_internal_t intern)
{ mpq_set_si(a,i,j); return true; }
inline bool numMPQ_set_llfrac(numMPQ_t a, long long int i, long long int j, num_internal_t intern)
{
  numMPZ_set_llint(mpq_numref(a),i,intern);
  numMPZ_set_llint(mpq_denref(a),j,intern);
  mpq_canonicalize(a);
  return true;
}
inline bool numMPQ_set_mpq(numMPQ_t a, mpq_t b, num_internal_t intern)
{ mpq_set(a,b); return true; }
inline bool numMPQ_set_double(numMPQ_t a, double k, num_internal_t intern)
{
  if (!isfinite(k)) { DEBUG_SPECIAL; numMPQ_set_int(a,0); return false; }
  mpq_set_d(a,k);
  return true;
}
inline bool numMPQ_set_mpfr(numMPQ_t a, mpfr_t b, num_internal_t intern)
{
  mp_exp_t e;
  if (!mpfr_number_p(b)) { DEBUG_SPECIAL; numMPQ_set_int(a,0); return false; }
  /* XXX might fail if scaled exponent not representable in mp_exp_t */
  e = mpfr_get_z_exp(mpq_numref(a),b);
  mpz_set_si(mpq_denref(a),1);
  if (e>0) mpq_mul_2exp(a,a,e);
  if (e<0) mpq_div_2exp(a,a,-e);
  return true;
}
inline bool numMPQ_set_ldouble(numMPQ_t a, long double b, num_internal_t intern)
{
  mp_exp_t e;
  if (!isfinite(b)) { DEBUG_SPECIAL; mpq_set_si(a,0,1); return false; }
  int res = mpfr_set_ld(intern->ldbl,b,GMP_RNDU);
  numMPQ_set_mpfr(a,intern->ldbl,intern);
  return (res==0);
}
inline bool lint_set_numMPQ(long int* a, numMPQ_t b, num_internal_t intern)
{ return numIl_set_mpq(a,b,intern); }
inline bool llint_set_numMPQ(long long int* a, numMPQ_t b, num_internal_t intern)
{ return numIll_set_mpq(a,b,intern); }
inline bool mpz_set_numMPQ(mpz_t a, numMPQ_t b, num_internal_t intern)
{ return numMPZ_set_mpq(a,b,intern); }
inline bool lfrac_set_numMPQ(long int* i, long int* j, numMPQ_t b, num_internal_t intern)
{
  numIl_set_mpz(i,mpq_numref(b),intern);
  numIl_set_mpz(j,mpq_denref(b),intern);
  return true;
}
inline bool llfrac_set_numMPQ(long long int* i, long long int* j, numMPQ_t b, num_internal_t intern)
{
  numIll_set_mpz(i,mpq_numref(b),intern);
  numIll_set_mpz(j,mpq_denref(b),intern);
  return true;
}
inline bool mpq_set_numMPQ(mpq_t a, numMPQ_t b, num_internal_t intern)
{ mpq_set(a,b); return true; }
/* mpfr should have exactly a precision of 53 bits */
inline bool double_set_numMPQ(double* a, numMPQ_t b, num_internal_t intern)
{
  int res = mpfr_set_q(intern->dbl,b,GMP_RNDU);
  *a = mpfr_get_d(intern->dbl,GMP_RNDU); /* should be exact */
  return (res==0);
}
inline bool ldouble_set_numMPQ(long double* a, numMPQ_t b, num_internal_t intern)
{
  int res = mpfr_set_q(intern->ldbl,b,GMP_RNDU);
  *a = mpfr_get_ld(intern->ldbl,GMP_RNDU); /* should be exact */
  return (res==0);
}
inline bool mpfr_set_numMPQ(mpfr_t a, numMPQ_t b, num_internal_t intern)
{ return !mpfr_set_q(a,b,GMP_RNDU); }

/* ====================================================================== */
/* 5. numDyyy */
/* ====================================================================== */

MACRO_numDyyy
/* ---------------------------------------------------------------------- */
/* Fits zzz_fits_numDyyy */
/* ---------------------------------------------------------------------- */
inline bool lint_fits_numDyyy(long int a)
{ return true; }
inline bool llint_fits_numDyyy(long long int a)
{ return true; }
inline bool mpz_fits_numDyyy(mpz_t a)
{ return numMPZ_fits_yyydouble(a); }
inline bool lfrac_fits_numDyyy(long int i, long int j)
{ return true; }
inline bool llfrac_fits_numDyyy(long long int i, long long int j)
{ return true; }
inline bool mpq_fits_numDyyy(mpq_t a)
{ return numMPQ_fits_yyydouble(a); }
inline bool double_fits_numDyyy(double k)
{ return isfinite(k); }
inline bool ldouble_fits_numDyyy(long double k)
{ return isfinite(k); }
bool mpfr_fits_numDyyy(mpfr_t a, num_internal_t intern)
{
  if (mpfr_number_p(a)){
    if (mpfr_sgn(a)==0) return true;
    else {
      mp_exp_t e = mpfr_get_exp(a);
      return e<NUMDyyy_MAX_EXP-1;
    }
  }
  else
    return false;
}
/* ---------------------------------------------------------------------- */
/* Fits numDyyy_fits_zzz */
/* ---------------------------------------------------------------------- */
inline bool numDyyy_fits_lint(numDyyy_t a)
{ return yyydouble_fits_numIl(*a); }
inline bool numDyyy_fits_llint(numDyyy_t a)
{ return yyydouble_fits_numIll(*a); }
inline bool numDyyy_fits_mpz(numDyyy_t a)
{ return true; }
inline bool numDyyy_fits_lfrac(numDyyy_t a)
{ return yyydouble_fits_numRl(*a); }
inline bool numDyyy_fits_llfrac(numDyyy_t a)
{ return yyydouble_fits_numRll(*a); }
inline bool numDyyy_fits_mpq(numDyyy_t a)
{ return true; }
inline bool numDyyy_fits_float(numDyyy_t a)
{
  int e;
  frexpyyy(*a,&e);
  return (e<FLT_MAX_EXP-1);
}
inline bool numDyyy_fits_ldouble(numDyyy_t a)
{ return true; }
inline bool numDyyy_fits_mpfr(numDyyy_t a)
{
  int e;
  frexpyyy(*a,&e);
  return (e<mpfr_get_emax());
}
/* ---------------------------------------------------------------------- */
/* Conversions numDyyy_set_zzz */
/* ---------------------------------------------------------------------- */
inline bool numDyyy_set_lint(numDyyy_t a, long int i, num_internal_t intern)
{ return yyydouble_set_numIl(a,&i,intern); }
inline bool numDyyy_set_llint(numDyyy_t a, long long int i, num_internal_t intern)
{ return yyydouble_set_numIll(a,&i,intern); }
inline bool numDyyy_set_mpz(numDyyy_t a, mpz_t b, num_internal_t intern)
{ return yyydouble_set_numMPZ(a,b,intern); }
inline bool numDyyy_set_lfrac(numDyyy_t a, long int i, long int j, num_internal_t intern)
{
  assert(j>0);
  *a = (numDyyy_native)i/(numDyyy_native)j;
  return (-*a==(numDyyy_native)(-i)/(numDyyy_native)j);
}
inline bool numDyyy_set_llfrac(numDyyy_t a, long long int i, long long int j, num_internal_t intern)
{
  assert(j>0);
  *a = (numDyyy_native)i/(numDyyy_native)j;
  return (-*a==(numDyyy_native)(-i)/(numDyyy_native)j);
}
inline bool numDyyy_set_mpq(numDyyy_t a, mpq_t b, num_internal_t intern)
{ return yyydouble_set_numMPQ(a,b,intern); }

inline bool numDyyy_set_mpfr(numDyyy_t a, mpfr_t b, num_internal_t intern)
{
  *a = mpfr_get_yyyd(b,GMP_RNDU);
  return !mpfr_cmp_yyyd(b,*a);
}
/* ---------------------------------------------------------------------- */
/* Conversions zzz_set_numDyyy */
/* ---------------------------------------------------------------------- */
inline bool lint_set_numDyyy(long int* a, numDyyy_t b, num_internal_t intern)
{ return numIl_set_yyydouble(a,*b,intern); }
inline bool llint_set_numDyyy(long long int* a, numDyyy_t b, num_internal_t intern)
{ return numIll_set_yyydouble(a,*b,intern); }
inline bool mpz_set_numDyyy(mpz_t a, numDyyy_t b, num_internal_t intern)
{ return numMPZ_set_yyydouble(a,*b,intern); }
inline bool lfrac_set_numDyyy(long int* i, long int* j, numDyyy_t b, num_internal_t intern)
{
  numRl_native s;
  bool res = numRl_set_yyydouble(&s,*b,intern);
  *i = *s.n;
  *j = *s.d;
  return res;
}
inline bool llfrac_set_numDyyy(long long int* i, long long int* j, numDyyy_t b, num_internal_t intern)
{
  numRll_native s;
  bool res = numRll_set_yyydouble(&s,*b,intern);
  *i = *s.n;
  *j = *s.d;
  return res;
}
inline bool mpq_set_numDyyy(mpq_t a, numDyyy_t b, num_internal_t intern)
{ return numMPQ_set_yyydouble(a,*b,intern); }

inline bool mpfr_set_numDyyy(mpfr_t a, numDyyy_t b, num_internal_t intern)
{ return !mpfr_set_yyyd(a,*b,GMP_RNDU); }

ENDMACRO

inline bool numD_fits_double(numD_t a)
{ return true; }
inline bool numDl_fits_double(numDl_t a)
{
  int e;
  frexpl(*a,&e);
  return (e<DBL_MAX_EXP-1);
}
inline bool numD_set_double(numD_t a, double k, num_internal_t intern)
{ *a = k; return true; }
inline bool numDl_set_double(numDl_t a, double k, num_internal_t intern)
{ *a = (long double)k; return true; }
inline bool numD_set_ldouble(numD_t a, long double k, num_internal_t intern)
{ *a = (double)k; return (long double)(*a)==k; }
inline bool numDl_set_ldouble(numDl_t a, long double k, num_internal_t intern)
{ *a = k; return true; }
inline bool double_set_numD(double* a, numD_t b, num_internal_t intern)
{ *a = *b; return true; }
inline bool double_set_numDl(double* a, numDl_t b, num_internal_t intern)
{ *a = (double)*b; return (long double)(*a)==*b; }
inline bool ldouble_set_numD(long double* a, numD_t b, num_internal_t intern)
{ *a = (long double)*b; return true; }
inline bool ldouble_set_numDl(long double* a, numDl_t b, num_internal_t intern)
{ *a = *b; return true; }

/* ====================================================================== */
/* 6. numMPFR */
/* ====================================================================== */

inline bool lint_fits_numMPFR(long int a)
{ return true; }
inline bool llint_fits_numMPFR(long long int a)
{ return true;  }
inline bool mpz_fits_numMPFR(mpz_t a)
{ return numMPZ_fits_mpfr(a); }
inline bool lfrac_fits_numMPFR(long int i, long int j)
{ return true; }
inline bool llfrac_fits_numMPFR(long long int i, long long int j)
{ return true; }
 inline bool mpq_fits_numMPFR(mpq_t a)
{ return numMPQ_fits_mpfr(a); }
inline bool double_fits_numMPFR(double k)
{ return numD_fits_mpfr(&k); }
inline bool ldouble_fits_numMPFR(long double k)
{ return numDl_fits_mpfr(&k); }
inline bool mpfr_fits_numMPFR(mpfr_t a, num_internal_t intern)
{ return true; }

inline bool numMPFR_fits_lint(numMPFR_t a)
{ return mpfr_fits_slong_p(a,GMP_RNDU); }
inline bool numMPFR_fits_llint(numMPFR_t a)
{ return mpfr_fits_intmax_p(a,GMP_RNDU); }
inline bool numMPFR_fits_mpz(numMPFR_t a)
{ return true; }
inline bool numMPFR_fits_lfrac(numMPFR_t a)
{ return mpfr_fits_numRl(a,NULL); }
inline bool numMPFR_fits_llfrac(numMPFR_t a)
{ return mpfr_fits_numRll(a,NULL); }
inline bool numMPFR_fits_mpq(numMPFR_t a)
{ return true; }
inline bool numMPFR_fits_float(numMPFR_t a)
{
  int e;
  e = mpfr_get_exp(a);
  return (e<FLT_MAX_EXP-1);
}
inline bool numMPFR_fits_double(numMPFR_t a)
{ return mpfr_fits_numD(a,NULL); }
inline bool numMPFR_fits_ldouble(numMPFR_t a)
{ return mpfr_fits_numDl(a,NULL); }
inline bool numMPFR_fits_mpfr(numMPFR_t a)
{ return true; }

inline bool numMPFR_set_lint(numMPFR_t a, long int i, num_internal_t intern)
{ return mpfr_set_numIl(a,&i,intern); }
inline bool numMPFR_set_llint(numMPFR_t a, long long int i, num_internal_t intern)
{ return mpfr_set_numIll(a,&i,intern); }
inline bool numMPFR_set_mpz(numMPFR_t a, mpz_t b, num_internal_t intern)
{ return mpfr_set_numMPZ(a,b,intern); }
inline bool numMPFR_set_lfrac(numMPFR_t a, long int i, long int j, num_internal_t intern)
{
  assert(j>0);
  numRl_native s;
  *s.n = i;
  *s.d = j;
  return mpfr_set_numRl(a,&s,intern);
}
inline bool numMPFR_set_llfrac(numMPFR_t a, long long int i, long long int j, num_internal_t intern)
{
  assert(j>0);
  numRll_native s;
  *s.n = i;
  *s.d = j;
  return mpfr_set_numRll(a,&s,intern);
}
inline bool numMPFR_set_mpq(numMPFR_t a, mpq_t b, num_internal_t intern)
{ return mpfr_set_numMPQ(a,b,intern); }
inline bool numMPFR_set_double(numMPFR_t a, double k, num_internal_t intern)
{ return mpfr_set_numD(a,&k,intern); }
inline bool numMPFR_set_ldouble(numMPFR_t a, long double k, num_internal_t intern)
{ return mpfr_set_numDl(a,&k,intern); }
inline bool numMPFR_set_mpfr(numMPFR_t a, mpfr_t b, num_internal_t intern)
{ return !mpfr_set(a,b,GMP_RNDU); }
inline bool lint_set_numMPFR(long int* a, numMPFR_t b, num_internal_t intern)
{ return numIl_set_mpfr(a,b,intern); }
inline bool llint_set_numMPFR(long long int* a, numMPFR_t b, num_internal_t intern)
{ return numIll_set_mpfr(a,b,intern); }
inline bool mpz_set_numMPFR(mpz_t a, numMPFR_t b, num_internal_t intern)
{ return numMPZ_set_mpfr(a,b,intern); }
inline bool lfrac_set_numMPFR(long int* i, long int* j, numMPFR_t b, num_internal_t intern)
{
  numRl_native s;
  bool res = numRl_set_mpfr(&s,b,intern);
  *i = *s.n;
  *j = *s.d;
  return res;
}
inline bool llfrac_set_numMPFR(long long int* i, long long int* j, numMPFR_t b, num_internal_t intern)
{
  numRll_native s;
  bool res = numRll_set_mpfr(&s,b,intern);
  *i = *s.n;
  *j = *s.d;
  return res;
}
inline bool mpq_set_numMPFR(mpq_t a, numMPFR_t b, num_internal_t intern)
{ return numMPQ_set_mpfr(a,b,intern); }
inline bool double_set_numMPFR(double* a, numMPFR_t b, num_internal_t intern)
{ return numD_set_mpfr(a,b,intern); }
inline bool ldouble_set_numMPFR(long double* a, numMPFR_t b, num_internal_t intern)
{ return numDl_set_mpfr(a,b,intern); }
inline bool mpfr_set_numMPFR(mpfr_t a, numMPFR_t b, num_internal_t intern)
{ return !mpfr_set(a,b,GMP_RNDU); }

/* ====================================================================== */
/* 7. Conversions between numZZZ */
/* ====================================================================== */

MACRO_ALLZ
#ifndef MARK_ZZZ_D
#define MARK_ZZZ_D
inline bool numD_fits_numZZZ(numD_t a)
{ return double_fits_numZZZ(*a); }
inline bool numZZZ_set_numD(numZZZ_t a, numD_t b, num_internal_t intern)
{ return numZZZ_set_double(a,*b,intern); }
#endif

#ifndef MARK_ZZZ_MPQ
#define MARK_ZZZ_MPQ
inline bool numMPQ_fits_numZZZ(numMPQ_t a)
{ return mpq_fits_numZZZ(a); }
inline bool numZZZ_set_numMPQ(numZZZ_t a, numMPQ_t b, num_internal_t intern)
{ return numZZZ_set_mpq(a,b,intern); }
#endif

#ifndef MARK_ZZZ_MPFR
#define MARK_ZZZ_MPFR
inline bool numMPFR_fits_numZZZ(numMPFR_t a, num_internal_t intern)
{ return mpfr_fits_numZZZ(a,intern); }
inline bool numZZZ_set_numMPFR(numZZZ_t a, numMPFR_t b, num_internal_t intern)
{ return numZZZ_set_mpfr(a,b,intern); }
#endif

#ifndef MARK_D_ZZZ
#define MARK_D_ZZZ
inline bool numZZZ_fits_numD(numZZZ_t a)
{ return numZZZ_fits_double(a); }
inline bool numD_set_numZZZ(numD_t a, numZZZ_t b, num_internal_t intern)
{ return double_set_numZZZ(a,b,intern); }
#endif

#ifndef MARK_MPQ_ZZZ
#define MARK_MPQ_ZZZ
inline bool numZZZ_fits_numMPQ(numZZZ_t a)
{ return numZZZ_fits_mpq(a); }
inline bool numMPQ_set_numZZZ(numMPQ_t a, numZZZ_t b, num_internal_t intern)
{ return mpq_set_numZZZ(a,b,intern); }
#endif

#ifndef MARK_MPFR_ZZZ
#define MARK_MPFR_ZZZ
inline bool numZZZ_fits_numMPFR(numZZZ_t a)
{ return numZZZ_fits_mpfr(a); }
inline bool numMPFR_set_numZZZ(numMPFR_t a, numZZZ_t b, num_internal_t intern)
{ return mpfr_set_numZZZ(a,b,intern); }
#endif
ENDMACRO

MACRO_ALLZ
#undef MARK_ZZZ_D
#undef MARK_ZZZ_MPQ
#undef MARK_ZZZ_MPFR
#undef MARK_D_ZZZ
#undef MARK_MPQ_ZZZ
#undef MARK_MPFR_ZZZ
ENDMACRO

/* ********************************************************************** */
/* II. boundZZZ */
/* ********************************************************************** */

MACRO_ALLZ
inline void boundZZZ_to_float(boundZZZ_t a, boundZZZ_t b, num_internal_t intern)
{
  if (boundZZZ_infty(b) || !numZZZ_fits_float(boundZZZ_numref(b)))
    boundZZZ_set_infty(a,boundZZZ_sgn(b));
  else {
    double d;
    double_set_numZZZ(&d,boundZZZ_numref(b),intern);
    numZZZ_set_double(boundZZZ_numref(a),(double)((float)d),intern);
    _boundZZZ_inf(a);
  }
}
inline void boundZZZ_to_double(boundZZZ_t a, boundZZZ_t b, num_internal_t intern)
{
  if (boundZZZ_infty(b) || !numZZZ_fits_double(boundZZZ_numref(b)))
    boundZZZ_set_infty(a,boundZZZ_sgn(b));
  else {
    double d;
    double_set_numZZZ(&d,boundZZZ_numref(b),intern);
    numZZZ_set_double(boundZZZ_numref(a),d,intern);
    _boundZZZ_inf(a);
  }
}

inline bool boundZZZ_set_lint(boundZZZ_t a, long int b, num_internal_t intern)
{
  if (lint_fits_numZZZ(b)){
    _boundZZZ_inf(a);
    return numZZZ_set_lint(boundZZZ_numref(a),b,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_llint(boundZZZ_t a, long long int b, num_internal_t intern)
{
  if (llint_fits_numZZZ(b)){
    _boundZZZ_inf(a);
    return numZZZ_set_llint(boundZZZ_numref(a),b,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_mpz(boundZZZ_t a, mpz_t b, num_internal_t intern)
{
  if (mpz_fits_numZZZ(b)){
    _boundZZZ_inf(a);
    return numZZZ_set_mpz(boundZZZ_numref(a),b,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_lfrac(boundZZZ_t a, long int i, long int j, num_internal_t intern)
{
  if (lfrac_fits_numZZZ(i,j)){
    _boundZZZ_inf(a);
    return numZZZ_set_lfrac(boundZZZ_numref(a),i,j,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_llfrac(boundZZZ_t a, long long int i, long long int j, num_internal_t intern)
{
  if (llfrac_fits_numZZZ(i,j)){
    _boundZZZ_inf(a);
    return numZZZ_set_lfrac(boundZZZ_numref(a),i,j,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_mpq(boundZZZ_t a, mpq_t b, num_internal_t intern)
{
  if (mpq_fits_numZZZ(b)){
    _boundZZZ_inf(a);
    return numZZZ_set_mpq(boundZZZ_numref(a),b,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_double(boundZZZ_t a, double b, num_internal_t intern)
{
  if (double_fits_numZZZ(b)){
    _boundZZZ_inf(a);
    return numZZZ_set_double(boundZZZ_numref(a),b,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_ldouble(boundZZZ_t a, long double b, num_internal_t intern)
{
  if (ldouble_fits_numZZZ(b)){
    _boundZZZ_inf(a);
    return numZZZ_set_ldouble(boundZZZ_numref(a),b,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_mpfr(boundZZZ_t a, mpfr_t b, num_internal_t intern)
{
  if (mpfr_fits_numZZZ(b,intern)){
    _boundZZZ_inf(a);
    return numZZZ_set_mpfr(boundZZZ_numref(a),b,intern);
  }
  else {
    boundZZZ_set_infty(a,1);
    return false;
  }
}
inline bool boundZZZ_set_numIl(boundZZZ_t a, numIl_t b, num_internal_t intern)
{ return boundZZZ_set_lint(a,*b,intern); }
inline bool boundZZZ_set_numIll(boundZZZ_t a, numIll_t b, num_internal_t intern)
{ return boundZZZ_set_llint(a,*b,intern); }
inline bool boundZZZ_set_numMPZ(boundZZZ_t a, numMPZ_t b, num_internal_t intern)
{ return boundZZZ_set_mpz(a,b,intern); }
inline bool boundZZZ_set_numRl(boundZZZ_t a, numRl_t b, num_internal_t intern)
{ return boundZZZ_set_lfrac(a,*b->n,*b->d,intern); }
inline bool boundZZZ_set_numRll(boundZZZ_t a, numRll_t b, num_internal_t intern)
{ return boundZZZ_set_llfrac(a,*b->n,*b->d,intern); }
inline bool boundZZZ_set_numMPQ(boundZZZ_t a, numMPQ_t b, num_internal_t intern)
{ return boundZZZ_set_mpq(a,b,intern); }
inline bool boundZZZ_set_numD(boundZZZ_t a, numD_t b, num_internal_t intern)
{ return boundZZZ_set_double(a,*b,intern); }
inline bool boundZZZ_set_numDl(boundZZZ_t a, numDl_t b, num_internal_t intern)
{ return boundZZZ_set_ldouble(a,*b,intern); }
inline bool boundZZZ_set_numMPFR(boundZZZ_t a, numMPFR_t b, num_internal_t intern)
{ return boundZZZ_set_mpfr(a,b,intern); }
ENDMACRO

/* ********************************************************************** */
/* III. itvZZZ */
/* ********************************************************************** */

MACRO_ALLZ
inline void itvZZZ_to_float(itvZZZ_t a, itvZZZ_t b, num_internal_t intern)
{
  boundZZZ_to_float(a->sup,b->sup,intern);
  boundZZZ_to_float(a->neginf,b->neginf,intern);
}

inline void itvZZZ_to_double(itvZZZ_t a, itvZZZ_t b, num_internal_t intern)
{
  boundZZZ_to_double(a->sup,b->sup,intern);
  boundZZZ_to_double(a->neginf,b->neginf,intern);
}

inline bool itvZZZ_set_lint(itvZZZ_t a, long int b, num_internal_t intern)
{ return itvZZZ_set_lint2(a,b,b,intern); }
inline bool itvZZZ_set_lint2(itvZZZ_t a, long int b, long int c, num_internal_t intern)
{
  bool res = boundZZZ_set_lint(a->neginf,-b,intern);
  return boundZZZ_set_lint(a->sup,c,intern) && res;
}
inline bool itvZZZ_set_llint(itvZZZ_t a, long long int b, num_internal_t intern)
{ return itvZZZ_set_llint2(a,b,b,intern); }
inline bool itvZZZ_set_llint2(itvZZZ_t a, long long int b, long long int c, num_internal_t intern)
{
  bool res = boundZZZ_set_llint(a->neginf,-b,intern);
  return boundZZZ_set_llint(a->sup,c,intern) && res;
}
inline bool itvZZZ_set_mpz(itvZZZ_t a, mpz_t b, num_internal_t intern)
{ return itvZZZ_set_mpz2(a,b,b,intern); }
inline bool itvZZZ_set_mpz2(itvZZZ_t a, mpz_t b, mpz_t c, num_internal_t intern)
{
  mpz_neg(b,b);
  bool res = boundZZZ_set_mpz(a->neginf,b,intern);
  mpz_neg(b,b);
  return boundZZZ_set_mpz(a->sup,c,intern) && res;
}
inline bool itvZZZ_set_lfrac(itvZZZ_t a, long int i, long int j, num_internal_t intern)
{ return itvZZZ_set_lfrac2(a,i,j,i,j,intern); }
inline bool itvZZZ_set_lfrac2(itvZZZ_t a, long int i, long int j, long int k, long int l, num_internal_t intern)
{
  bool res = boundZZZ_set_lfrac(a->neginf,-i,j,intern);
  return boundZZZ_set_lfrac(a->sup,k,l,intern) && res;
}
inline bool itvZZZ_set_llfrac(itvZZZ_t a, long long int i, long long int j, num_internal_t intern)
{ return itvZZZ_set_llfrac2(a,i,j,i,j,intern); }
inline bool itvZZZ_set_llfrac2(itvZZZ_t a, long long int i, long long int j, long long int k, long long int l, num_internal_t intern)
{
  bool res = boundZZZ_set_llfrac(a->neginf,-i,j,intern);
  return boundZZZ_set_llfrac(a->sup,k,l,intern) && res;
}
inline bool itvZZZ_set_mpq(itvZZZ_t a, mpq_t b, num_internal_t intern)
{ return itvZZZ_set_mpq2(a,b,b,intern); }
inline bool itvZZZ_set_mpq2(itvZZZ_t a, mpq_t b, mpq_t c, num_internal_t intern)
{
  mpq_neg(b,b);
  bool res = boundZZZ_set_mpq(a->neginf,b,intern);
  mpq_neg(b,b);
  return boundZZZ_set_mpq(a->sup,c,intern) && res;
}
inline bool itvZZZ_set_double(itvZZZ_t a, double b, num_internal_t intern)
{ return itvZZZ_set_double2(a,b,b,intern); }
inline bool itvZZZ_set_double2(itvZZZ_t a, double b, double c, num_internal_t intern)
{
  bool res = boundZZZ_set_double(a->neginf,-b,intern);
  return boundZZZ_set_double(a->sup,c,intern) && res;
}
inline bool itvZZZ_set_ldouble(itvZZZ_t a, long double b, num_internal_t intern)
{ return itvZZZ_set_ldouble2(a,b,b,intern); }
inline bool itvZZZ_set_ldouble2(itvZZZ_t a, long double b, long double c, num_internal_t intern)
{
  bool res = boundZZZ_set_ldouble(a->neginf,-b,intern);
  return boundZZZ_set_ldouble(a->sup,c,intern) && res;
}
inline bool itvZZZ_set_mpfr(itvZZZ_t a, mpfr_t b, num_internal_t intern)
{ return itvZZZ_set_mpfr2(a,b,b,intern); }
inline bool itvZZZ_set_mpfr2(itvZZZ_t a, mpfr_t b, mpfr_t c, num_internal_t intern)
{
  mpfr_neg(b,b,GMP_RNDU);
  bool res = boundZZZ_set_mpfr(a->neginf,b,intern);
  mpfr_neg(b,b,GMP_RNDU);
  return boundZZZ_set_mpfr(a->sup,c,intern) && res;
}
ENDMACRO

MACRO_ALLX_ALLZ
inline bool itvXXX_set_numZZZ2(itvXXX_t a, numZZZ_t b, numZZZ_t c, num_internal_t intern)
{
  numZZZ_neg(b,b);
  bool res = boundXXX_set_numZZZ(a->neginf,b,intern);
  numZZZ_neg(b,b);
  return boundXXX_set_numZZZ(a->sup,c,intern) && res;
}
inline bool itvXXX_set_numZZZ(itvXXX_t a, numZZZ_t b, num_internal_t intern)
{
  return itvXXX_set_numZZZ2(a,b,b,intern);
}
ENDMACRO

MACRO_ALLZ
bool itvZZZ_set_generic(num_internal_t intern,
			itvZZZ_t a, itv_tag_t tag, va_list* va)
{
  bool res;
  switch (tag){
  case ITV_NUM:
    { numZZZ_ptr b = va_arg(*va,numZZZ_ptr);
      itvZZZ_set_num(a,b);
      res = true; }
    break;
  case ITV_NUM2:
    { numZZZ_ptr b = va_arg(*va,numZZZ_ptr);
      numZZZ_ptr c = va_arg(*va,numZZZ_ptr);
      itvZZZ_set_num2(a,b,c);
      res = true; }
    break;
  case ITV_ITV:
    { itvZZZ_ptr b = va_arg(*va,itvZZZ_ptr);
      itvZZZ_set(a,b);
      res = true; }
    break;
  case ITV_ITVD:
    { itvD_ptr b = va_arg(*va,itvD_ptr);
      res = itvZZZ_set_itvD(a,b,intern); }
    break;
  case ITV_ITVMPQ:
    { itvMPQ_ptr b = va_arg(*va,itvMPQ_ptr);
      res = itvZZZ_set_itvMPQ(a,b,intern); }
    break;
  case ITV_ITVMPFR:
    { itvMPFR_ptr b = va_arg(*va,itvMPFR_ptr);
      res = itvZZZ_set_itvMPFR(a,b,intern); }
    break;
  case ITV_NUMD:
    { numD_ptr b = va_arg(*va,numD_ptr);
      res = itvZZZ_set_numD(a,b,intern); }
    break;
  case ITV_NUMMPQ:
    { numMPQ_ptr b = va_arg(*va,numMPQ_ptr);
      res = itvZZZ_set_numMPQ(a,b,intern); }
    break;
  case ITV_NUMMPFR:
    { numMPFR_ptr b = va_arg(*va,numMPFR_ptr);
      res = itvZZZ_set_numMPFR(a,b,intern); }
    break;
  case ITV_NUMD2:
    { numD_ptr b = va_arg(*va,numD_ptr);
      numD_ptr c = va_arg(*va,numD_ptr);
      res = itvZZZ_set_numD2(a,b,c,intern); }
    break;
  case ITV_NUMMPQ2:
    { numMPQ_ptr b = va_arg(*va,numMPQ_ptr);
      numMPQ_ptr c = va_arg(*va,numMPQ_ptr);
      res = itvZZZ_set_numMPQ2(a,b,c,intern); }
    break;
  case ITV_NUMMPFR2:
    { numMPFR_ptr b = va_arg(*va,numMPFR_ptr);
      numMPFR_ptr c = va_arg(*va,numMPFR_ptr);
      res = itvZZZ_set_numMPFR2(a,b,c,intern); }
    break;
  case ITV_LINT:
    { long int b = va_arg(*va,long int);
      res = itvZZZ_set_lint(a,b,intern); }
    break;
  case ITV_LINT2:
    { long int b = va_arg(*va,long int);
      long int c = va_arg(*va,long int);
      res = itvZZZ_set_lint2(a,b,c,intern); }
    break;
  case ITV_LLINT:
    { long long int b = va_arg(*va,long long int);
      res = itvZZZ_set_llint(a,b,intern); }
    break;
  case ITV_LLINT2:
    { long long int b = va_arg(*va,long long int);
      long long int c = va_arg(*va,long long int);
      res = itvZZZ_set_llint2(a,b,c,intern); }
    break;
  case ITV_MPZ:
    { mpz_ptr b = va_arg(*va,mpz_ptr);
      res = itvZZZ_set_mpz(a,b,intern); }
    break;
  case ITV_MPZ2:
    { mpz_ptr b = va_arg(*va,mpz_ptr);
      mpz_ptr c = va_arg(*va,mpz_ptr);
      res = itvZZZ_set_mpz2(a,b,c,intern); }
    break;
  case ITV_LFRAC:
    { long int i = va_arg(*va,long int);
      long int j = va_arg(*va,long int);
      res = itvZZZ_set_lfrac(a,i,j,intern); }
    break;
  case ITV_LFRAC2:
    { long int i = va_arg(*va,long int);
      long int j = va_arg(*va,long int);
      long int k = va_arg(*va,long int);
      long int l = va_arg(*va,long int);
      res = itvZZZ_set_lfrac2(a,i,j,k,l,intern); }
    break;
  case ITV_LLFRAC:
    { long long int i = va_arg(*va,long long int);
      long long int j = va_arg(*va,long long int);
      res = itvZZZ_set_llfrac(a,i,j,intern); }
    break;
  case ITV_LLFRAC2:
    { long long int i = va_arg(*va,long long int);
      long long int j = va_arg(*va,long long int);
      long long int k = va_arg(*va,long long int);
      long long int l = va_arg(*va,long long int);
      res = itvZZZ_set_llfrac2(a,i,j,k,l,intern); }
    break;
  case ITV_MPQ:
    { mpq_ptr b = va_arg(*va,mpq_ptr);
      res = itvZZZ_set_mpq(a,b,intern); }
    break;
  case ITV_MPQ2:
    { mpq_ptr b = va_arg(*va,mpq_ptr);
      mpq_ptr c = va_arg(*va,mpq_ptr);
      res = itvZZZ_set_mpq2(a,b,c,intern); }
    break;
  case ITV_DOUBLE:
    { double b = va_arg(*va,double);
      res = itvZZZ_set_double(a,b,intern); }
    break;
  case ITV_DOUBLE2:
    { double b = va_arg(*va,double);
      double c = va_arg(*va,double);
      res = itvZZZ_set_double2(a,b,c,intern); }
    break;
  case ITV_LDOUBLE:
    { long double b = va_arg(*va,long double);
      res = itvZZZ_set_ldouble(a,b,intern); }
    break;
  case ITV_LDOUBLE2:
    { long double b = va_arg(*va,long double);
      long double c = va_arg(*va,long double);
      res = itvZZZ_set_ldouble2(a,b,c,intern); }
    break;
  case ITV_MPFR:
    { mpfr_ptr b = va_arg(*va,mpfr_ptr);
      res = itvZZZ_set_mpfr(a,b,intern); }
    break;
  case ITV_MPFR2:
    { mpfr_ptr b = va_arg(*va,mpfr_ptr);
      mpfr_ptr c = va_arg(*va,mpfr_ptr);
      res = itvZZZ_set_mpfr2(a,b,c,intern); }
    break;
  default:
    fprintf(stderr,
	    "itvZZZ_set_generic: unknown tag\n");
    abort();
  }
  return res;
}
bool itvZZZ_set_val(num_internal_t intern,
		    itvZZZ_t a, itv_tag_t tag, ...)
{
  va_list va;
  bool res;
  va_start(va,tag);
  res = itvZZZ_set_generic(intern,a,tag,&va);
  va_end(va);
  return res;
}
ENDMACRO

/* ********************************************************************** */
/* IV. eitvZZZ */
/* ********************************************************************** */

MACRO_ALLZ
void eitvZZZ_to_float(eitvZZZ_t a, eitvZZZ_t b, num_internal_t intern)
{
  itvZZZ_to_float(a->itv,b->itv, intern);
  a->eq = itvZZZ_is_point(a->itv);
}
void eitvZZZ_to_double(eitvZZZ_t a, eitvZZZ_t b, num_internal_t intern)
{
  itvZZZ_to_double(a->itv,b->itv, intern);
  a->eq = itvZZZ_is_point(a->itv);
}
bool eitvZZZ_set_lint(eitvZZZ_t a, long int b, num_internal_t intern)
{ a->eq = itvZZZ_set_lint(a->itv,b,intern); return a->eq; }
bool eitvZZZ_set_llint(eitvZZZ_t a, long long int b, num_internal_t intern)
{ a->eq = itvZZZ_set_llint(a->itv,b,intern); return a->eq; }
bool eitvZZZ_set_mpz(eitvZZZ_t a, mpz_t b, num_internal_t intern)
{ a->eq = itvZZZ_set_mpz(a->itv,b,intern); return a->eq; }
bool eitvZZZ_set_lfrac(eitvZZZ_t a, long int i, long int j, num_internal_t intern)
{ a->eq = itvZZZ_set_lfrac(a->itv,i,j,intern); return a->eq; }
bool eitvZZZ_set_llfrac(eitvZZZ_t a, long long int i, long long int j, num_internal_t intern)
{ a->eq = itvZZZ_set_llfrac(a->itv,i,j,intern); return a->eq; }
bool eitvZZZ_set_mpq(eitvZZZ_t a, mpq_t b, num_internal_t intern)
{ a->eq = itvZZZ_set_mpq(a->itv,b,intern); return a->eq; }
bool eitvZZZ_set_double(eitvZZZ_t a, double b, num_internal_t intern)
{ a->eq = itvZZZ_set_double(a->itv,b,intern); return a->eq; }
bool eitvZZZ_set_ldouble(eitvZZZ_t a, long double b, num_internal_t intern)
{ a->eq = itvZZZ_set_ldouble(a->itv,b,intern); return a->eq; }
bool eitvZZZ_set_mpfr(eitvZZZ_t a, mpfr_t b, num_internal_t intern)
{ a->eq = itvZZZ_set_mpfr(a->itv,b,intern); return a->eq; }

bool eitvZZZ_set_lint2(eitvZZZ_t a, long int b, long int c, num_internal_t intern)
{ bool res = itvZZZ_set_lint2(a->itv,b,c,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_llint2(eitvZZZ_t a, long long int b, long long int c, num_internal_t intern)
{ bool res = itvZZZ_set_llint2(a->itv,b,c,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_mpz2(eitvZZZ_t a, mpz_t b, mpz_t c, num_internal_t intern)
{ bool res = itvZZZ_set_mpz2(a->itv,b,c,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_lfrac2(eitvZZZ_t a, long int i, long int j, long int k, long int l, num_internal_t intern)
{ bool res = itvZZZ_set_lfrac2(a->itv,i,j,k,l,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_llfrac2(eitvZZZ_t a, long long int i, long long int j, long long int k, long long int l, num_internal_t intern)
{ bool res = itvZZZ_set_llfrac2(a->itv,i,j,k,l,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_mpq2(eitvZZZ_t a, mpq_t b, mpq_t c, num_internal_t intern)
{ bool res = itvZZZ_set_mpq2(a->itv,b,c,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_double2(eitvZZZ_t a, double b, double c, num_internal_t intern)
{ bool res = itvZZZ_set_double2(a->itv,b,c,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_ldouble2(eitvZZZ_t a, long double b, long double c, num_internal_t intern)
{ bool res = itvZZZ_set_ldouble2(a->itv,b,c,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
bool eitvZZZ_set_mpfr2(eitvZZZ_t a, mpfr_t b, mpfr_t c, num_internal_t intern)
{ bool res = itvZZZ_set_mpfr2(a->itv,b,c,intern); a->eq = res && eitvZZZ_is_point(a); return res; }
ENDMACRO

MACRO_ALLX_ALLZ
bool eitvXXX_set_numZZZ(eitvXXX_t a, numZZZ_t b, num_internal_t intern)
{ a->eq = itvXXX_set_numZZZ(a->itv,b,intern); return a->eq; }
bool eitvXXX_set_numZZZ2(eitvXXX_t a, numZZZ_t b, numZZZ_t c, num_internal_t intern)
{ bool res = itvXXX_set_numZZZ2(a->itv,b,c,intern); a->eq = res && eitvXXX_is_point(a); return res; }
ENDMACRO

MACRO_ALLZ
bool eitvZZZ_set_generic(num_internal_t intern,
			 eitvZZZ_t a, eitv_tag_t tag, va_list* va)
{
  bool res;
  switch (tag){
  case EITV_NUM:
    { numZZZ_ptr b = va_arg(*va,numZZZ_ptr);
      eitvZZZ_set_num(a,b);
      res = true; }
    break;
  case EITV_NUM2:
    { numZZZ_ptr b = va_arg(*va,numZZZ_ptr);
      numZZZ_ptr c = va_arg(*va,numZZZ_ptr);
      eitvZZZ_set_num2(a,b,c);
      res = true; }
    break;
  case EITV_EITV:
    { eitvZZZ_ptr b = va_arg(*va,eitvZZZ_ptr);
      eitvZZZ_set(a,b);
      res = true; }
    break;
  case EITV_EITVD:
    { eitvD_ptr b = va_arg(*va,eitvD_ptr);
      res = eitvZZZ_set_eitvD(a,b,intern); }
    break;
  case EITV_EITVMPQ:
    { eitvMPQ_ptr b = va_arg(*va,eitvMPQ_ptr);
      res = eitvZZZ_set_eitvMPQ(a,b,intern); }
    break;
  case EITV_EITVMPFR:
    { eitvMPFR_ptr b = va_arg(*va,eitvMPFR_ptr);
      res = eitvZZZ_set_eitvMPFR(a,b,intern); }
    break;
  case EITV_NUMD:
    { numD_ptr b = va_arg(*va,numD_ptr);
      res = eitvZZZ_set_numD(a,b,intern); }
    break;
  case EITV_NUMMPQ:
    { numMPQ_ptr b = va_arg(*va,numMPQ_ptr);
      res = eitvZZZ_set_numMPQ(a,b,intern); }
    break;
  case EITV_NUMMPFR:
    { numMPFR_ptr b = va_arg(*va,numMPFR_ptr);
      res = eitvZZZ_set_numMPFR(a,b,intern); }
    break;
  case EITV_NUMD2:
    { numD_ptr b = va_arg(*va,numD_ptr);
      numD_ptr c = va_arg(*va,numD_ptr);
      res = eitvZZZ_set_numD2(a,b,c,intern); }
    break;
  case EITV_NUMMPQ2:
    { numMPQ_ptr b = va_arg(*va,numMPQ_ptr);
      numMPQ_ptr c = va_arg(*va,numMPQ_ptr);
      res = eitvZZZ_set_numMPQ2(a,b,c,intern); }
    break;
  case EITV_NUMMPFR2:
    { numMPFR_ptr b = va_arg(*va,numMPFR_ptr);
      numMPFR_ptr c = va_arg(*va,numMPFR_ptr);
      res = eitvZZZ_set_numMPFR2(a,b,c,intern); }
    break;
  case EITV_LINT:
    { long int b = va_arg(*va,long int);
      res = eitvZZZ_set_lint(a,b,intern); }
    break;
  case EITV_LINT2:
    { long int b = va_arg(*va,long int);
      long int c = va_arg(*va,long int);
      res = eitvZZZ_set_lint2(a,b,c,intern); }
    break;
  case EITV_LLINT:
    { long long int b = va_arg(*va,long long int);
      res = eitvZZZ_set_llint(a,b,intern); }
    break;
  case EITV_LLINT2:
    { long long int b = va_arg(*va,long long int);
      long long int c = va_arg(*va,long long int);
      res = eitvZZZ_set_llint2(a,b,c,intern); }
    break;
  case EITV_MPZ:
    { mpz_ptr b = va_arg(*va,mpz_ptr);
      res = eitvZZZ_set_mpz(a,b,intern); }
    break;
  case EITV_MPZ2:
    { mpz_ptr b = va_arg(*va,mpz_ptr);
      mpz_ptr c = va_arg(*va,mpz_ptr);
      res = eitvZZZ_set_mpz2(a,b,c,intern); }
    break;
  case EITV_LFRAC:
    { long int i = va_arg(*va,long int);
      long int j = va_arg(*va,long int);
      res = eitvZZZ_set_lfrac(a,i,j,intern); }
    break;
  case EITV_LFRAC2:
    { long int i = va_arg(*va,long int);
      long int j = va_arg(*va,long int);
      long int k = va_arg(*va,long int);
      long int l = va_arg(*va,long int);
      res = eitvZZZ_set_lfrac2(a,i,j,k,l,intern); }
    break;
  case EITV_LLFRAC:
    { long long int i = va_arg(*va,long long int);
      long long int j = va_arg(*va,long long int);
      res = eitvZZZ_set_llfrac(a,i,j,intern); }
    break;
  case EITV_LLFRAC2:
    { long long int i = va_arg(*va,long long int);
      long long int j = va_arg(*va,long long int);
      long long int k = va_arg(*va,long long int);
      long long int l = va_arg(*va,long long int);
      res = eitvZZZ_set_llfrac2(a,i,j,k,l,intern); }
    break;
  case EITV_MPQ:
    { mpq_ptr b = va_arg(*va,mpq_ptr);
      res = eitvZZZ_set_mpq(a,b,intern); }
    break;
  case EITV_MPQ2:
    { mpq_ptr b = va_arg(*va,mpq_ptr);
      mpq_ptr c = va_arg(*va,mpq_ptr);
      res = eitvZZZ_set_mpq2(a,b,c,intern); }
    break;
  case EITV_DOUBLE:
    { double b = va_arg(*va,double);
      res = eitvZZZ_set_double(a,b,intern); }
    break;
  case EITV_DOUBLE2:
    { double b = va_arg(*va,double);
      double c = va_arg(*va,double);
      res = eitvZZZ_set_double2(a,b,c,intern); }
    break;
  case EITV_LDOUBLE:
    { long double b = va_arg(*va,long double);
      res = eitvZZZ_set_ldouble(a,b,intern); }
    break;
  case EITV_LDOUBLE2:
    { long double b = va_arg(*va,long double);
      long double c = va_arg(*va,long double);
      res = eitvZZZ_set_ldouble2(a,b,c,intern); }
    break;
  case EITV_MPFR:
    { mpfr_ptr b = va_arg(*va,mpfr_ptr);
      res = eitvZZZ_set_mpfr(a,b,intern); }
    break;
  case EITV_MPFR2:
    { mpfr_ptr b = va_arg(*va,mpfr_ptr);
      mpfr_ptr c = va_arg(*va,mpfr_ptr);
      res = eitvZZZ_set_mpfr2(a,b,c,intern); }
    break;
  default:
    fprintf(stderr,
	    "eitvZZZ_set_generic: unknown tag\n");
    abort();
  }
  return res;
}
bool eitvZZZ_set_val(num_internal_t intern, eitvZZZ_t a, eitv_tag_t tag, ...)
{
  va_list va;
  bool res;
  va_start(va,tag);
  res = eitvZZZ_set_generic(intern,a,tag,&va);
  va_end(va);
  return res;
}
ENDMACRO


/* ********************************************************************** */
/* V. Conversions between numZZZ, boundZZZ, itvZZZ and eitvZZZ */
/* ********************************************************************** */

MACRO_ALLX_MAINZ
#define MARK1_XXX
#define MARK2_ZZZ

#if defined(MARK1_XXX) && defined(MARK2_XXX)
inline bool boundXXX_set_boundZZZ(boundXXX_t a, boundZZZ_t b, num_internal_t intern)
{ boundXXX_set(a,b); return true; }
inline bool itvXXX_set_itvZZZ(itvXXX_t a, itvZZZ_t b, num_internal_t intern)
{ itvXXX_set(a,b); return true; }
inline bool eitvXXX_set_eitvZZZ(eitvXXX_t a, eitvZZZ_t b, num_internal_t intern)
{ eitvXXX_set(a,b); return true; }
#else
#ifndef MARK_XXX_ZZZ
#define MARK_XXX_ZZZ
inline bool boundXXX_set_boundZZZ(boundXXX_t a, boundZZZ_t b, num_internal_t intern)
{
  if (boundZZZ_infty(b)){
    boundXXX_set_infty(a,boundZZZ_sgn(b));
    return true;
  }
  else {
    return boundXXX_set_numZZZ(a,boundZZZ_numref(b),intern);
  }
}
inline bool itvXXX_set_itvZZZ(itvXXX_t a, itvZZZ_t b, num_internal_t intern)
{
  bool exact = boundXXX_set_boundZZZ(a->neginf,b->neginf,intern);
  return boundXXX_set_boundZZZ(a->sup,b->sup,intern) && exact;
}
inline bool eitvXXX_set_eitvZZZ(eitvXXX_t a, eitvZZZ_t b, num_internal_t intern)
{
  bool exact = itvXXX_set_itvZZZ(a->itv,b->itv,intern);
  a->eq = exact && b->eq;
  return exact;
}
#endif
#ifndef MARK_ZZZ_XXX
#define MARK_ZZZ_XXX
inline bool boundZZZ_set_boundXXX(boundZZZ_t a, boundXXX_t b, num_internal_t intern)
{
  if (boundXXX_infty(b)){
    boundZZZ_set_infty(a,boundXXX_sgn(b));
    return true;
  }
  else {
    return boundZZZ_set_numXXX(a,boundXXX_numref(b),intern);
  }
}
inline bool itvZZZ_set_itvXXX(itvZZZ_t a, itvXXX_t b, num_internal_t intern)
{
  bool exact = boundZZZ_set_boundXXX(a->neginf,b->neginf,intern);
  return boundZZZ_set_boundXXX(a->sup,b->sup,intern) && exact;
}
inline bool eitvZZZ_set_eitvXXX(eitvZZZ_t a, eitvXXX_t b, num_internal_t intern)
{
  bool exact = itvZZZ_set_itvXXX(a->itv,b->itv,intern);
  a->eq = exact && b->eq;
  return exact;
}
#endif
#endif
#undef MARK1_XXX
#undef MARK2_ZZZ
ENDMACRO
MACRO_ALLX_MAINZ
#undef MARK_XXX_ZZZ
#undef MARK_ZZZ_XXX
ENDMACRO
