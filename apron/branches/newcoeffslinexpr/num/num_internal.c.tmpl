/* -*- mode: c -*- */
/* ********************************************************************** */
/* num_global.c: workspace and serialization */
/* ********************************************************************** */

#include "num_internal.h"
#include "eitv_all.h"

MACRO_FOREACH ZZZ @AllNum
static void numZZZ_floatconst_init_set(numZZZ_floatconst* cst, int frac_bits, int exp_bits, int exp_bias)
{
  boundZZZ_t b,c;
  boundZZZ_init(b); boundZZZ_init(c);
  itvZZZ_init(cst->ulp); itvZZZ_init(cst->min); itvZZZ_init(cst->min_normal);
  itvZZZ_init(cst->max); itvZZZ_init(cst->max_exact);

  boundZZZ_set_int(b,1);
  boundZZZ_mul_2exp(b,b,-frac_bits);
  itvZZZ_set_unit_bound(cst->ulp,b);

  boundZZZ_set_int(b,1);
  boundZZZ_mul_2exp(b,b,1-exp_bias-frac_bits);
  itvZZZ_set_unit_bound(cst->min,b);

  boundZZZ_set_int(b,1);
  boundZZZ_mul_2exp(b,b,1-exp_bias);
  itvZZZ_set_unit_bound(cst->min_normal,b);

  boundZZZ_set_int(b,2);
  boundZZZ_set_int(c,1);
  boundZZZ_mul_2exp(c,c,-frac_bits);
  boundZZZ_sub(b,b,c);
  boundZZZ_mul_2exp(b,b,(1<<exp_bits)-2-exp_bias);
  itvZZZ_set_unit_bound(cst->max,b);

  boundZZZ_set_int(b,1);
  boundZZZ_mul_2exp(b,b,frac_bits);
  itvZZZ_set_unit_bound(cst->max_exact,b);

  boundZZZ_clear(b); boundZZZ_clear(c);
}
static void numZZZ_floatconst_clear(numZZZ_floatconst* cst)
{
  itvZZZ_clear(cst->ulp);
  itvZZZ_clear(cst->min);
  itvZZZ_clear(cst->min_normal);
  itvZZZ_clear(cst->max);
  itvZZZ_clear(cst->max_exact);
}

void numZZZ_internal_init(numZZZ_internal* intern)
{
  numZZZ_init(intern->canonicalize_num);
  boundZZZ_init(intern->muldiv_bound);
  boundZZZ_init(intern->mul_bound);
  boundZZZ_init(intern->sqrt_bound);
  boundZZZ_init(intern->linear_bound);
  boundZZZ_init(intern->linear_bound2);
  boundZZZ_init(intern->linear_bound3);
  itvZZZ_init(intern->mul_itv);
  itvZZZ_init(intern->mul_itv2);
  itvZZZ_init(intern->eval_itv);
  itvZZZ_init(intern->eval_itv2);
  itvZZZ_init(intern->eval_itv3);
  numZZZ_init(intern->quasi_num);
  eitvZZZ_init(intern->boxize_lincons_eitv);
  eitvZZZ_init(intern->boxize_lincons_eval);
  boundZZZ_init(intern->boxize_lincons_bound);
  mpz_init(intern->reduce_lincons_gcd);
  mpz_init(intern->reduce_lincons_mpz);

  numZZZ_floatconst_init_set(&intern->cst_half,10,5,15);         /* 16-bit */
  numZZZ_floatconst_init_set(&intern->cst_single,23,8,127);      /* 32-bit */
  numZZZ_floatconst_init_set(&intern->cst_double,52,11,1023);    /* 64-bit */
  numZZZ_floatconst_init_set(&intern->cst_extended,63,15,16383); /* 80-bit, no hidden bit */
  numZZZ_floatconst_init_set(&intern->cst_quad,112,15,16383);    /* 128-bit */
  eitvZZZ_init(intern->eitvZZZ_half);
  eitvZZZ_set_int2(intern->eitvZZZ_half,-1,1);
  eitvZZZ_mul_2exp(intern->eitvZZZ_half,intern->eitvZZZ_half,-1);
  eitvZZZ_init(intern->generic_eitv);
  eitvZZZ_init(intern->eval_eitv);
  eitvZZZ_init(intern->eval_eitv2);
  eitvZZZ_init(intern->eval_eitv3);
}
void numZZZ_internal_clear(numZZZ_internal* intern)
{
  numZZZ_clear(intern->canonicalize_num);
  boundZZZ_clear(intern->muldiv_bound);
  boundZZZ_clear(intern->mul_bound);
  boundZZZ_clear(intern->sqrt_bound);
  boundZZZ_clear(intern->linear_bound);
  boundZZZ_clear(intern->linear_bound2);
  boundZZZ_clear(intern->linear_bound3);
  itvZZZ_clear(intern->mul_itv);
  itvZZZ_clear(intern->mul_itv2);
  itvZZZ_clear(intern->eval_itv);
  itvZZZ_clear(intern->eval_itv2);
  itvZZZ_clear(intern->eval_itv3);
  numZZZ_clear(intern->quasi_num);
  eitvZZZ_clear(intern->boxize_lincons_eitv);
  eitvZZZ_clear(intern->boxize_lincons_eval);
  boundZZZ_clear(intern->boxize_lincons_bound);
  mpz_clear(intern->reduce_lincons_gcd);
  mpz_clear(intern->reduce_lincons_mpz);
  numZZZ_floatconst_clear(&intern->cst_half);
  numZZZ_floatconst_clear(&intern->cst_single);
  numZZZ_floatconst_clear(&intern->cst_double);
  numZZZ_floatconst_clear(&intern->cst_extended);
  numZZZ_floatconst_clear(&intern->cst_quad);
  eitvZZZ_clear(intern->eitvZZZ_half);
  eitvZZZ_clear(intern->generic_eitv);
  eitvZZZ_clear(intern->eval_eitv);
  eitvZZZ_clear(intern->eval_eitv2);
  eitvZZZ_clear(intern->eval_eitv3);
}
ENDMACRO

void num_internal_init(num_internal_t intern)
{
  mpz_init(intern->q); mpz_init(intern->r);
  mpq_init(intern->mpq);
  mpfr_init2(intern->dbl,DBL_MANT_DIG);
  mpfr_init2(intern->ldbl,LDBL_MANT_DIG);

  numIl_internal_init	(&intern->Il);
  numIll_internal_init	(&intern->Ill);
  numMPZ_internal_init	(&intern->MPZ);
  numRl_internal_init	(&intern->Rl);
  numRll_internal_init	(&intern->Rll);
  numMPQ_internal_init	(&intern->MPQ);
  numD_internal_init	(&intern->D);
  numDl_internal_init	(&intern->Dl);
  numMPFR_internal_init (&intern->MPFR);
}
void num_internal_clear(num_internal_t intern)
{
  mpz_clear(intern->q); mpz_clear(intern->r);
  mpq_clear(intern->mpq);
  mpfr_clear(intern->dbl);
  mpfr_clear(intern->ldbl);
  numIl_internal_clear	(&intern->Il);
  numIll_internal_clear	(&intern->Ill);
  numMPZ_internal_clear	(&intern->MPZ);
  numRl_internal_clear	(&intern->Rl);
  numRll_internal_clear	(&intern->Rll);
  numMPQ_internal_clear	(&intern->MPQ);
  numD_internal_clear	(&intern->D);
  numDl_internal_clear	(&intern->Dl);
  numMPFR_internal_clear(&intern->MPFR);
}
num_internal_ptr num_internal_alloc(void)
{
  num_internal_ptr intern = malloc(sizeof(num_internal_t));
  num_internal_init(intern);
  return intern;
}
void num_internal_free(num_internal_ptr intern)
{
  num_internal_clear(intern);
  free(intern);
}
