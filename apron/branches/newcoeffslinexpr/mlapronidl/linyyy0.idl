/* -*- mode: c -*- */

/* This file is part of the APRON Library, released under LGPL license.
   Please read the COPYING file packaged in the distribution  */

quote(C, "#include \"apron_caml.h\"")

import "linyyyMPZ.idl";
import "linyyyMPQ.idl";
import "linyyyD.idl";
import "linyyyMPFR.idl";
import "coeff.idl";

typedef [\
    abstract,c2ml(camlidl_linyyy0_ptr_c2ml),\
    ml2c(camlidl_linyyy0_ptr_ml2c),\
    mltype("(LinyyyD.t, LinyyyMPQ.t, LinyyyMPFR.t) Common.t")\
] struct ap_linyyy0_struct ap_linyyy0_t;
typedef [\
    abstract,\
    c2ml(camlidl_linyyy0_array_ptr_c2ml),\
    ml2c(camlidl_linyyy0_array_ptr_ml2c),\
    mltype("(LinyyyD.earray, LinyyyMPQ.earray, LinyyyMPFR.earray) Common.t")\
] struct ap_linyyy0_array_struct ap_linyyy0_array_t;

#define _AP_linyyy0_MARK
#if defined(_AP_linexpr0_MARK_)
quote(MLMLI,"(** (Interval) linear expressions *)\n\n")
#elif defined(_AP_lincons0_MARK_)
quote(MLMLI,"(** (Interval) linear constraints *)\n\n")
#elif defined(_AP_linexpr0_MARK_)
quote(MLMLI,"(** Linear generators *)\n\n")
#endif

quote(MLI,"
(** {2 Linear expressions/constraints/generators} *)

(** {3 Pretty printing} *)
val print : (Dim.t -> string) -> Format.formatter -> t -> unit

(** {3 Initialization} *)
val init : Common.discr -> int -> t
val init_set : t -> t
val init_set_linyyyD : LinyyyD.t -> t
val init_set_linyyyMPQ : LinyyyMPQ.t -> t
val init_set_linyyyMPFR : LinyyyMPFR.t -> t

(** {3 Misc)} *)
val resize : t -> int -> unit
val minimize : t -> unit
")

quote(ML,"
let print assoc fmt (linyyy:t) =
  Common.apply_arg2_discr LinyyyD.print LinyyyMPQ.print LinyyyMPFR.print assoc fmt linyyy

let init (discr:Common.discr) length : t =
  Common.map_discr0_arg LinyyyD.init LinyyyMPQ.init LinyyyMPFR.init discr length
let init_set (linyyy:t) : t =
  Common.map_discr LinyyyD.init_set LinyyyMPQ.init_set LinyyyMPFR.init_set linyyy
let init_set_linyyyD x : t =
  Common.D(LinyyyD.init_set x)
let init_set_linyyyMPQ x : t =
  Common.MPQ(LinyyyMPQ.init_set x)
let init_set_linyyyMPFR x : t =
  Common.MPFR(LinyyyMPFR.init_set x)
let resize (linyyy:t) length =
  Common.apply_discr_arg LinyyyD.resize LinyyyMPQ.resize LinyyyMPFR.resize linyyy length
let minimize (linyyy:t) =
  Common.apply_discr LinyyyD.minimize LinyyyMPQ.minimize LinyyyMPFR.minimize linyyy
")

#if defined (_AP_lincons0_MARK_)
quote(MLI,"val set_bool : t -> bool -> unit")
quote(ML,"
let set_bool (linyyy:t) b =
  Common.apply_discr_arg LinyyyD.set_bool LinyyyMPQ.set_bool LinyyyMPFR.set_bool linyyy b
")
#endif

quote(MLI,"
(** {3 Assignement (with possible conversion)} *)
val set : t -> t -> Common.num_internal -> bool
val set_linyyyD : t -> LinyyyD.t -> Common.num_internal -> bool
val set_linyyyMPQ : t -> LinyyyMPQ.t -> Common.num_internal -> bool
val set_linyyyMPFR : t -> LinyyyMPFR.t -> Common.num_internal -> bool
val get_linyyyD : LinyyyD.t -> t -> Common.num_internal -> bool
val get_linyyyMPQ : LinyyyMPQ.t -> t -> Common.num_internal -> bool
val get_linyyyMPFR : LinyyyMPFR.t -> t -> Common.num_internal -> bool
")
quote(ML,"
let set_linyyyD (linyyy:t) x intern =
  Common.apply_discr_arg2 Conv.linyyyD_set_linyyyD Conv.linyyyMPQ_set_linyyyD Conv.linyyyMPFR_set_linyyyD linyyy x intern
let set_linyyyMPQ (linyyy:t) x intern =
  Common.apply_discr_arg2 Conv.linyyyD_set_linyyyMPQ Conv.linyyyMPQ_set_linyyyMPQ Conv.linyyyMPFR_set_linyyyMPQ linyyy x intern
let set_linyyyMPFR (linyyy:t) x intern =
  Common.apply_discr_arg2 Conv.linyyyD_set_linyyyMPFR Conv.linyyyMPQ_set_linyyyMPFR Conv.linyyyMPFR_set_linyyyMPFR linyyy x intern
let set (linyyy1:t) (linyyy2:t) intern =
  Common.apply_arg_discr_arg set_linyyyD set_linyyyMPQ set_linyyyMPFR linyyy1 linyyy2 intern
let get_linyyyD x (linyyy:t) intern =
  Common.apply_arg_discr_arg Conv.linyyyD_set_linyyyD Conv.linyyyD_set_linyyyMPQ Conv.linyyyD_set_linyyyMPFR x linyyy intern
let get_linyyyMPQ x (linyyy:t) intern =
  Common.apply_arg_discr_arg Conv.linyyyMPQ_set_linyyyD Conv.linyyyMPQ_set_linyyyMPQ Conv.linyyyMPQ_set_linyyyMPFR x linyyy intern
let get_linyyyMPFR x (linyyy:t) intern =
  Common.apply_arg_discr_arg Conv.linyyyMPFR_set_linyyyD Conv.linyyyMPFR_set_linyyyMPQ Conv.linyyyMPFR_set_linyyyMPFR x linyyy intern
")

#if defined (_AP_linexpr0_MARK_) || defined (_AP_lincons0_MARK_)
quote(MLI,"
(** {3 Tests} *)
val is_linear : t -> bool
val is_quasilinear : t -> bool
val typ : t -> Common.exprtyp
val is_integer : t -> int -> bool
val is_real : t -> int -> bool
")
quote(ML,"
let is_linear linyyy =
  Common.apply_discr LinyyyD.is_linear LinyyyMPQ.is_linear LinyyyMPFR.is_linear linyyy
let is_quasilinear linyyy =
  Common.apply_discr LinyyyD.is_quasilinear LinyyyMPQ.is_quasilinear LinyyyMPFR.is_quasilinear linyyy
let typ linyyy =
  Common.apply_discr LinyyyD.typ LinyyyMPQ.typ LinyyyMPFR.typ linyyy
let is_integer linyyy intd =
  Common.apply_discr_arg LinyyyD.is_integer LinyyyMPQ.is_integer LinyyyMPFR.is_integer linyyy intd
let is_real linyyy intd =
  Common.apply_discr_arg LinyyyD.is_real LinyyyMPQ.is_real LinyyyMPFR.is_real linyyy intd
")
#endif

quote(MLMLI,"(** {3 Access} *)")

quote(MLI,"
val iter : (Coeff.t -> Dim.t -> unit) -> t -> unit
")
quote(ML,"
let iter f a =
  match a with
  | Common.D e -> LinyyyD.iter0 (fun eitvD dim -> f (Common.D eitvD) dim) e
  | Common.MPQ e -> LinyyyMPQ.iter0 (fun eitvMPQ dim -> f (Common.MPQ eitvMPQ) dim) e
  | Common.MPFR e -> LinyyyMPFR.iter0 (fun eitvMPFR dim -> f (Common.MPFR eitvMPFR) dim) e
")

boolean ap_linyyy0_get_cst(ap_coeff_tm coeff, ap_linyyy0_t expr, num_internal_ptr intern);
boolean ap_linyyy0_get_coeff(ap_coeff_tm coeff, ap_linyyy0_t expr, ap_dim_t dim, num_internal_ptr intern);
boolean ap_linyyy0_set_cst(ap_linyyy0_t expr, ap_coeff_tg coeff, num_internal_ptr intern);
boolean ap_linyyy0_set_coeff(ap_linyyy0_t expr, ap_dim_t dim, ap_coeff_tg coeff, num_internal_ptr intern);
#if defined (_AP_lincons0_MARK_) || defined (_AP_lingen0_MARK_)
boolean ap_linyyy0_get_linexpr0(ap_linexpr0_t e, ap_linyyy0_t c, num_internal_ptr intern);
ap_yyytyp_t ap_linyyy0_get_yyytyp(ap_linyyy0_t c);
boolean ap_linyyy0_set_linexpr0(ap_linyyy0_t c, ap_linexpr0_t e, num_internal_ptr intern);
void ap_linyyy0_set_yyytyp(ap_linyyy0_t c, ap_yyytyp_t yyytyp);
#endif
#if defined (_AP_lincons0_MARK_)
quote(MLI,"
val get_mpq : Mpq.t -> t -> unit
val se_mpq : t -> 'a Mpq.tt -> unit
")
quote(ML,"
let get_mpq mpq discr = Common.apply_arg_discr LinyyyD.get_mpq LinyyyMPQ.get_mpq LinyyyMPFR.get_mpq mpq discr
let set_mpq discr mpq = Common.apply_discr_arg LinyyyD.set_mpq LinyyyMPQ.set_mpq LinyyyMPFR.set_mpq discr mpq
")
#endif

quote(MLI,"
(** {3 Change of dimensions} *)
val add_dimensions : t -> t -> Dim.change -> unit
val permute_dimensions : t -> t -> Dim.perm -> unit

(** {3 Tests} *)
val equal : t -> t -> bool
val hash : t -> int
")

quote(ML,"
let add_dimensions res expr dimchange =
  Common.mapsame_discr2_arg LinyyyD.add_dimensions LinyyyMPQ.add_dimensions LinyyyMPFR.add_dimensions res expr dimchange
let permute_dimensions res expr dimperm =
  Common.mapsame_discr2_arg LinyyyD.permute_dimensions LinyyyMPQ.permute_dimensions LinyyyMPFR.permute_dimensions res expr dimperm
let extend_environment res ~newenv old ~oldenv =
  match (res,old) with
  | (Common.D res, Common.D old) -> LinyyyD.extend_environment res ~newenv old ~oldenv
  | (Common.MPQ res, Common.MPQ old) -> LinyyyMPQ.extend_environment res ~newenv old ~oldenv
  | (Common.MPFR res, Common.MPFR old) -> LinyyyMPFR.extend_environment res ~newenv old ~oldenv
  | _ -> raise (Invalid_argument \"The two argument sould have the same constructor (D, MPQ, or MPFR)\")
let array_extend_environment res ~newenv old ~oldenv =
  match (res,old) with
  | (Common.D res, Common.D old) -> LinyyyD.array_extend_environment res ~newenv old ~oldenv
  | (Common.MPQ res, Common.MPQ old) -> LinyyyMPQ.array_extend_environment res ~newenv old ~oldenv
  | (Common.MPFR res, Common.MPFR old) -> LinyyyMPFR.array_extend_environment res ~newenv old ~oldenv
  | _ -> raise (Invalid_argument \"The two argument sould have the same constructor (D, MPQ, or MPFR)\")
let equal (linyyy1:t) (linyyy2:t) =
  match (linyyy1,linyyy2) with
  | (Common.D x1, Common.D x2) -> LinyyyD.equal x1 x2
  | (Common.MPQ x1, Common.MPQ x2) -> LinyyyMPQ.equal x1 x2
  | (Common.MPFR x1, Common.MPFR x2) -> LinyyyMPFR.equal x1 x2
  | _ -> false
let hash (linyyy:t) =
  Common.apply_discr LinyyyD.hash LinyyyMPQ.hash LinyyyMPFR.hash linyyy
")

int ap_linyyy0_compare(ap_linyyy0_t a, ap_linyyy0_t b);

quote(MLI,"
(** {2 Arrays} *)
(** {3  Pretty printing} *)

val array_print :
  ?first:(unit, Format.formatter, unit) format ->
  ?sep:(unit, Format.formatter, unit) format ->
  ?last:(unit, Format.formatter, unit) format ->
 (Dim.t -> string) -> Format.formatter -> earray -> unit

(** {3 Initialization and Assignement Functions} *)
val array_init : Common.discr -> int -> earray
val array_init_set : earray -> earray
val array_init_set_linyyyD_array : LinyyyD.earray -> earray
val array_init_set_linyyyMPQ_array : LinyyyMPQ.earray -> earray
val array_init_set_linyyyMPFR_array : LinyyyMPFR.earray -> earray
val array_resize : earray -> int -> unit
val array_minimize : earray -> unit
")
quote(ML,"
let array_print ?first ?sep ?last assoc fmt = function
  | Common.D x -> LinyyyD.array_print ?first ?sep ?last assoc fmt x
  | Common.MPQ x -> LinyyyMPQ.array_print ?first ?sep ?last assoc fmt x
  | Common.MPFR x -> LinyyyMPFR.array_print ?first ?sep ?last assoc fmt x
let array_init discr size = Common.map_discr0_arg LinyyyD.array_init LinyyyMPQ.array_init LinyyyMPFR.array_init discr size
let array_init_set discr = Common.map_discr LinyyyD.array_init_set LinyyyMPQ.array_init_set LinyyyMPFR.array_init_set discr
let array_init_set_linyyyD_array x : earray =
  Common.D(LinyyyD.array_init_set x)
let array_init_set_linyyyMPQ_array x : earray =
  Common.MPQ(LinyyyMPQ.array_init_set x)
let array_init_set_linyyyMPFR_array x : earray =
  Common.MPFR(LinyyyMPFR.array_init_set x)
let array_resize discr size = Common.apply_discr_arg LinyyyD.array_resize LinyyyMPQ.array_resize LinyyyMPFR.array_resize discr size
let array_minimize discr = Common.apply_discr LinyyyD.array_minimize LinyyyMPQ.array_minimize LinyyyMPFR.array_minimize discr
")

quote(MLMLI,"\n(** {3 Assignements with conversions} *)")

boolean ap_linyyy0_array_set(ap_linyyy0_array_t res, ap_linyyy0_array_t e, num_internal_ptr intern);

quote(MLI,"
val array_set_linyyyD_array : earray -> LinyyyD.earray -> Common.num_internal -> bool
val array_set_linyyyMPQ_array : earray -> LinyyyMPQ.earray -> Common.num_internal -> bool
val array_set_linyyyMPFR_array : earray -> LinyyyMPFR.earray -> Common.num_internal -> bool
val array_get_linyyyD_array : LinyyyD.earray -> earray -> Common.num_internal -> bool
val array_get_linyyyMPQ_array : LinyyyMPQ.earray -> earray -> Common.num_internal -> bool
val array_get_linyyyMPFR_array : LinyyyMPFR.earray -> earray -> Common.num_internal -> bool
")
quote(ML,"
let array_set_linyyyD_array (earray:earray) x intern =
  Common.apply_discr_arg2 Conv.linyyyD_array_set_linyyyD_array Conv.linyyyMPQ_array_set_linyyyD_array Conv.linyyyMPFR_array_set_linyyyD_array earray x intern
let array_set_linyyyMPQ_array (earray:earray) x intern =
  Common.apply_discr_arg2 Conv.linyyyD_array_set_linyyyMPQ_array Conv.linyyyMPQ_array_set_linyyyMPQ_array Conv.linyyyMPFR_array_set_linyyyMPQ_array earray x intern
let array_set_linyyyMPFR_array (earray:earray) x intern =
  Common.apply_discr_arg2 Conv.linyyyD_array_set_linyyyMPFR_array Conv.linyyyMPQ_array_set_linyyyMPFR_array Conv.linyyyMPFR_array_set_linyyyMPFR_array earray x intern
let array_get_linyyyD_array x (earray:earray) intern =
  Common.apply_arg_discr_arg Conv.linyyyD_array_set_linyyyD_array Conv.linyyyD_array_set_linyyyMPQ_array Conv.linyyyD_array_set_linyyyMPFR_array x earray intern
let array_get_linyyyMPQ_array x (earray:earray) intern =
  Common.apply_arg_discr_arg Conv.linyyyMPQ_array_set_linyyyD_array Conv.linyyyMPQ_array_set_linyyyMPQ_array Conv.linyyyMPQ_array_set_linyyyMPFR_array x earray intern
let array_get_linyyyMPFR_array x (earray:earray) intern =
  Common.apply_arg_discr_arg Conv.linyyyMPFR_array_set_linyyyD_array Conv.linyyyMPFR_array_set_linyyyMPQ_array Conv.linyyyMPFR_array_set_linyyyMPFR_array x earray intern
")

boolean ap_linyyy0_array_set_index_linyyyD(ap_linyyy0_array_t p, unsigned int i, ap_linyyyD_ptr a, num_internal_ptr intern);
boolean ap_linyyy0_array_set_index_linyyyMPQ(ap_linyyy0_array_t p, unsigned int i, ap_linyyyMPQ_ptr a, num_internal_ptr intern);
boolean ap_linyyy0_array_set_index_linyyyMPFR(ap_linyyy0_array_t p, unsigned int i, ap_linyyyMPFR_ptr a, num_internal_ptr intern);
boolean ap_linyyy0_array_get_index_linyyyD(ap_linyyyD_ptr a, ap_linyyy0_array_t p, unsigned int i, num_internal_ptr intern);
boolean ap_linyyy0_array_get_index_linyyyMPQ(ap_linyyyMPQ_ptr a, ap_linyyy0_array_t p, unsigned int i, num_internal_ptr intern);
boolean ap_linyyy0_array_get_index_linyyyMPFR(ap_linyyyMPFR_ptr a, ap_linyyy0_array_t p, unsigned int i, num_internal_ptr intern);

#if defined (_AP_linexpr0_MARK_) || defined (_AP_lincons0_MARK_)
quote(MLI,"
(** {3 Tests} *)
val array_is_linear : earray -> bool
val array_is_quasilinear : earray -> bool
val array_typ : earray -> Common.exprtyp
")
quote(ML,"
let array_is_linear linyyy =
  Common.apply_discr LinyyyD.array_is_linear LinyyyMPQ.array_is_linear LinyyyMPFR.array_is_linear linyyy
let array_is_quasilinear linyyy =
  Common.apply_discr LinyyyD.array_is_quasilinear LinyyyMPQ.array_is_quasilinear LinyyyMPFR.array_is_quasilinear linyyy
let array_typ linyyy =
  Common.apply_discr LinyyyD.array_typ LinyyyMPQ.array_typ LinyyyMPFR.array_typ linyyy
")
#endif

quote(MLI,"
(** {3 Access} *)
val array_size : earray -> int
")
quote(ML,"
let array_size = Common.apply_discr LinyyyD.array_size LinyyyMPQ.array_size LinyyyMPFR.array_size
")
boolean ap_linyyy0_array_set_index(ap_linyyy0_array_t p, unsigned int i, ap_linyyy0_t a, num_internal_ptr intern);
boolean ap_linyyy0_array_get_index(ap_linyyy0_t a, ap_linyyy0_array_t p, unsigned int i, num_internal_ptr intern);

quote(MLI,"
(** {3 Change of dimensions} *)
val array_add_dimensions : earray -> earray -> Dim.change -> unit
val array_permute_dimensions : earray -> earray -> Dim.perm -> unit
")

quote(ML,"
let array_add_dimensions res expr dimchange =
  Common.mapsame_discr2_arg LinyyyD.array_add_dimensions LinyyyMPQ.array_add_dimensions LinyyyMPFR.array_add_dimensions res expr dimchange
let array_permute_dimensions res expr dimperm =
  Common.mapsame_discr2_arg LinyyyD.array_permute_dimensions LinyyyMPQ.array_permute_dimensions LinyyyMPFR.array_permute_dimensions res expr dimperm
")

quote(MLI,"\n\
(** Internal usage *)\n\
val extend_environment: t -> newenv:Environment.t -> t -> oldenv:Environment.t -> unit\n\
val array_extend_environment: earray -> newenv:Environment.t -> earray -> oldenv:Environment.t -> unit\n\
")
