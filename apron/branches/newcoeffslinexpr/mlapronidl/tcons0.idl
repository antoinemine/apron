/* -*- mode: c -*- */

/* This file is part of the APRON Library, released under LGPL license.
   Please read the COPYING file packaged in the distribution  */

quote(MLI,"(** APRON tree expressions constraints of level 0 *)")

quote(C, "#include \"apron_caml.h\"")

import "common.idl";
import "texpr0.idl";
import "lincons0.idl";

typedef [mltype("{\n  mutable texpr0 : Texpr0.t;\n  mutable typ : Common.constyp;\n  mpq : Mpq.t\n}"),
	 abstract,
	 ml2c(camlidl_apron_tcons0_t_ml2c),
	 c2ml(camlidl_apron_tcons0_t_c2ml)]
struct ap_tcons0_t ap_tcons0_t;
typedef [mltype("t array"),
	 abstract,
	 ml2c(camlidl_apron_tcons0_array_t_ml2c),
	 c2ml(camlidl_apron_tcons0_array_t_c2ml)]
struct ap_tcons0_array_t ap_tcons0_array_t;

quote(MLI,"\n\
(** {2 Printing} *)\n\
val print : (Dim.t -> string) -> Format.formatter -> t -> unit\n\
val array_print :\n\
  ?first:(unit,Format.formatter,unit) format ->\n\
  ?sep:(unit,Format.formatter,unit) format ->\n\
  ?last:(unit,Format.formatter,unit) format ->\n\
  (Dim.t -> string) -> Format.formatter -> t array -> unit\n\
\n\
(** {2 Constraints} *)\n\
\n\
(** {3 Constructors and Destructor} *)\n\
\n\
(** Make a tree expression constraint. Modifying later the tree expression expression\n\
  modifies correspondingly the tree expression constraint and conversely *)\n\
val make : Texpr0.t -> Common.constyp -> 'a Mpq.tt option -> t\n\
\n\
(** Copy a tree expression constraint (deep copy) *)\n\
val copy : t -> t\n\
")

quote(MLI,"(** Create the constraint -1>=0 *)")
[ref]ap_tcons0_t* ap_tcons0_make_unsat(void)
  quote(dealloc,"AP_TCONS0_DEALLOC(_res)");
[ref]ap_tcons0_t* ap_tcons0_of_lincons0(ap_lincons0_t cons)
  quote(call,"_res = ap_tcons0_from_lincons0(cons);")
  quote(dealloc,"AP_TCONS0_DEALLOC(_res)");
quote(MLI,"\n\
(** {3 Operations} *)\n\
val add_dimensions : t -> Dim.change -> t\n\
val permute_dimensions : t -> Dim.perm -> t\n\
val add_dimensions_with : t -> Dim.change -> unit\n\
val permute_dimensions_with : t -> Dim.perm -> unit\n\
\n\
(** {2 Arrays} *)\n\
\n\
(** {3 Constructors and destructors} *)\n\
val array_make : int -> t array\n\
val array_length : t array -> int\n\
");

ap_tcons0_array_t ap_tcons0_array_of_lincons0_array(ap_lincons0_array_t e)
quote(call,"_res = ap_tcons0_array_from_lincons0_array(e);")
quote(dealloc,"AP_TCONS0_ARRAY_DEALLOC(_res)");

quote(MLI,"\n\
(** {3 Operations} *)\n\
val array_add_dimensions : t array -> Dim.change -> t array\n\
val array_permute_dimensions : t array -> Dim.perm -> t array\n\
val array_add_dimensions_with : t array -> Dim.change -> unit\n\
val array_permute_dimensions_with : t array -> Dim.perm -> unit\n\
")


quote(ML,"\n\
let print assoc fmt cons = \n\
  Texpr0.print assoc fmt cons.texpr0;\n\
  Format.fprintf fmt \" %s 0\" (Common.string_of_constyp cons.typ);\n\
  begin match cons.typ with\n\
  | Common.EQMOD -> Format.fprintf fmt \" mod %a\" Mpq.print cons.mpq;\n\
  | _ -> ()\n\
  end;\n\
  ()\n\
let array_print ?first ?sep ?last string_of_dim fmt tab = \n\
  Common.array_print ?first ?sep ?last (print string_of_dim) fmt tab\n\
let make expr typ ompq = {\n\
texpr0 = expr; typ = typ; mpq = match ompq with None -> Mpq.init() | Some mpq -> Mpq.init_set mpq \n\
}\n\
let copy cons = {\n\
texpr0 = Texpr0.copy cons.texpr0; typ = cons.typ; mpq = Mpq.init_set cons.mpq;\n\
}\n\
let add_dimensions x y = { x with texpr0 = Texpr0.add_dimensions x.texpr0 y }\n\
let permute_dimensions x y = { x with texpr0 = Texpr0.permute_dimensions x.texpr0 y}\n\
let add_dimensions_with x y = Texpr0.add_dimensions_with x.texpr0 y\n\
let permute_dimensions_with x y = Texpr0.permute_dimensions_with x.texpr0 y\n\
let array_make length = Array.make length (make (Texpr0.cst (Coeff.init_set_int (Common.D()) 0)) Common.EQ None)\n\
let array_length = Array.length\n\
let array_add_dimensions x y = Array.map (fun x -> add_dimensions x y) x\n\
let array_permute_dimensions x y = Array.map (fun x -> permute_dimensions x y) x\n\
let array_add_dimensions_with x y = Array.iter (fun x -> add_dimensions_with x y) x\n\
let array_permute_dimensions_with x y = Array.iter (fun x -> permute_dimensions_with x y) x\n\
")
