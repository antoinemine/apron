/* -*- mode: c -*- */

/* ********************************************************************** */
/* apron_caml.h */
/* ********************************************************************** */

/* This file is part of the APRON Library, released under LGPL license.
   Please read the COPYING file packaged in the distribution  */

#ifndef _APRON_CAML_H_
#define _APRON_CAML_H_

#include <string.h>
#include "gmp_caml.h"

#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/alloc.h>
#include <caml/fail.h>
#include <caml/callback.h>
#include <caml/custom.h>
#include <caml/bigarray.h>
#include <caml/intext.h>

#include "ap_global0.h"
#include "ap_linconsMPZ.h"
#include "ap_lingenMPZ.h"
#include "ap_var.h"
#include "ap_environment.h"

#ifdef __cplusplus
extern "C" {
#endif

/* ********************************************************************** */
/* Dimensions, variables, environments */
/* ********************************************************************** */

void camlidl_apron_dimchange_ml2c(value v, ap_dimchange_t* dimchange);
value camlidl_apron_dimchange_c2ml(ap_dimchange_t* dimchange);

typedef struct apron_var_t {
  char* name;
  size_t count;
} apron_var_t;
typedef struct apron_var_t* apron_var_ptr;
typedef struct ap_environment_t* ap_environment_ptr;

apron_var_ptr ap_var_of_string(char* name);
int ap_var_compare(ap_var_t pp1, ap_var_t pp2);
char* ap_var_to_string(ap_var_t pp);
int ap_var_hash(ap_var_t pp);
static inline
void camlidl_apron_var_ptr_ml2c(value v, ap_var_t* p){
  *p = *((ap_var_t *) Data_custom_val(v));
}
value camlidl_apron_var_ptr_c2ml(ap_var_t* p);
value camlidl_apron_var_set_operations(value v);
static inline
void camlidl_apron_environment_ptr_ml2c(value v, ap_environment_ptr* p){
  *p = *((ap_environment_ptr *) Data_custom_val(v));
}
value camlidl_apron_environment_ptr_c2ml(ap_environment_ptr* p);

/* ********************************************************************** */
/* Numbers, bounds, intervales, linear expressions/constraints/generators */
/* ********************************************************************** */

MACRO_ALLX
typedef numXXX_ptr numXXX_ptrg;
typedef numXXX_ptr numXXX_ptrm;
typedef boundXXX_ptr boundXXX_ptrg;
typedef boundXXX_ptr boundXXX_ptrm;
typedef eitvXXX_ptr eitvXXX_ptrg;
typedef eitvXXX_ptr eitvXXX_ptrm;
ENDMACRO

MACRO_ALLT_ALLX
value camlidl_TTTXXX_ptr_c2ml(TTTXXX_ptr* a);
static inline void camlidl_TTTXXX_ptr_ml2c(value val, TTTXXX_ptr* a)
{
  *a = *(TTTXXX_ptr*)(Data_custom_val(val));
}
ENDMACRO

/* typedef struct ap_texpr0_t* ap_texpr0_ptr; */
/* typedef struct ap_tcons0_t* ap_tcons0_ptr; */
/* typedef struct ap_manager_t* ap_manager_ptr; */
/* typedef struct ap_manager_t* ap_manager_opt_ptr; */


/* /\* ********************************************************************** *\/ */
/* /\* coefficients *\/ */
/* /\* ********************************************************************** *\/ */

/* void camlidl_ml2c_coeff_struct_ap_coeff_t(value _v1, struct ap_coeff_t * _c2, struct camlidl_ctx_struct* _ctx); */
/* value camlidl_c2ml_coeff_struct_ap_coeff_t(struct ap_coeff_t * _c1, struct camlidl_ctx_struct* _ctx); */

/* /\* ********************************************************************** *\/ */
/* /\* linexpr0 *\/ */
/* /\* ********************************************************************** *\/ */

/* extern struct custom_operations camlidl_apron_custom_linexpr0_ptr; */

/* static inline */
/* void camlidl_apron_linexpr0_ptr_ml2c(value v, ap_linexpr0_ptr* p) */
/* { */
/*   *p = *((ap_linexpr0_ptr *) Data_custom_val(v)); */
/* } */

/* static inline */
/* value camlidl_apron_linexpr0_ptr_c2ml(ap_linexpr0_ptr* p) */
/* { */
/*   value v; */
/*   v = alloc_custom(&camlidl_apron_custom_linexpr0_ptr, sizeof(ap_linexpr0_ptr), 0,1); */
/*   *((ap_linexpr0_ptr *) Data_custom_val(v)) = *p; */
/*   return v; */
/* } */

/* /\* ********************************************************************** *\/ */
/* /\* texpr0 *\/ */
/* /\* ********************************************************************** *\/ */

/* typedef ap_texpr_op_t ap_texpr_unop_t; */
/* typedef ap_texpr_op_t ap_texpr_binop_t; */

/* extern struct custom_operations camlidl_apron_custom_texpr0_ptr; */

/* static inline */
/* void camlidl_apron_texpr0_ptr_ml2c(value v, ap_texpr0_ptr* p) */
/* { */
/*   *p = *((ap_texpr0_ptr *) Data_custom_val(v)); */
/* } */

/* static inline */
/* value camlidl_apron_texpr0_ptr_c2ml(ap_texpr0_ptr* p) */
/* { */
/*   value v; */
/*   v = alloc_custom(&camlidl_apron_custom_texpr0_ptr, sizeof(ap_texpr0_ptr), 0,1); */
/*   *((ap_texpr0_ptr *) Data_custom_val(v)) = *p; */
/*   return v; */
/* } */

/* static inline */
/* void camlidl_apron_texpr_unop_t_ml2c(value v, ap_texpr_op_t* op) */
/* { */
/*   *op = AP_TEXPR_NEG + Int_val(v); assert(*op>=AP_TEXPR_NEG && *op<=AP_TEXPR_SQRT); */
/* } */
/* static inline */
/* value camlidl_apron_texpr_unop_t_c2ml(ap_texpr_op_t* op) */
/* { */
/*   assert(*op>=AP_TEXPR_NEG && *op<=AP_TEXPR_SQRT); return Val_int((*op)-AP_TEXPR_NEG); */
/* } */
/* static inline */
/* void camlidl_apron_texpr_binop_t_ml2c(value v, ap_texpr_op_t* op) */
/* { */
/*   *op = Int_val(v); assert(*op<=AP_TEXPR_MOD); } */
/* static inline */
/* value camlidl_apron_texpr_binop_t_c2ml(ap_texpr_op_t* op) */
/* { */
/*   assert(*op<=AP_TEXPR_MOD); return Val_int((*op)); */
/* } */
/* static inline */
/* void camlidl_apron_texpr_rtype_t_ml2c(value v, ap_texpr_rtype_t* op) */
/* { *op = Int_val(v); assert(*op<=AP_RTYPE_QUAD); } */
/* static inline */
/* value camlidl_apron_texpr_rtype_t_c2ml(ap_texpr_rtype_t* op) */
/* { assert(*op<=AP_RTYPE_QUAD); return Val_int(*op); } */
/* static inline */
/* void camlidl_apron_texpr_rdir_t_ml2c(value v, ap_texpr_rdir_t* op) */
/* { *op = Int_val(v); assert(*op<=AP_RDIR_RND); } */
/* static inline */
/* value camlidl_apron_texpr_rdir_t_c2ml(ap_texpr_rdir_t* op) */
/* { assert(*op<=AP_RDIR_RND); return Val_int(*op); } */

/* /\* ********************************************************************** *\/ */
/* /\* manager *\/ */
/* /\* ********************************************************************** *\/ */

/* extern struct custom_operations camlidl_apron_custom_manager_ptr; */

/* static inline */
/* void camlidl_apron_manager_ptr_ml2c(value v, ap_manager_ptr* p) */
/* { */
/*   *p = *((ap_manager_ptr *) Data_custom_val(v)); */
/* } */

/* static inline */
/* value camlidl_apron_manager_ptr_c2ml(ap_manager_ptr* p) */
/* { */
/*   value v; */
/*   v = alloc_custom(&camlidl_apron_custom_manager_ptr, sizeof(ap_manager_ptr), */
/*		   0,1); */
/*   *((ap_manager_ptr *) Data_custom_val(v)) = *p; */
/*   return v; */
/* } */

/* void ap_manager_set_deserialize(ap_manager_ptr man); */
/* ap_manager_ptr ap_manager_get_deserialize(void); */


/* extern value camlidl_c2ml_manager_struct_ap_exclog_t(struct ap_exclog_t*, struct camlidl_ctx_struct*); */
/* extern void camlidl_apron_manager_check_exception(struct ap_manager_t* man, void* _ctx); */

/* /\* ********************************************************************** *\/ */
/* /\* abstract0 *\/ */
/* /\* ********************************************************************** *\/ */

/* extern struct custom_operations camlidl_apron_custom_abstract0_ptr; */
/* extern mlsize_t camlidl_apron_heap; */

/* static inline */
/* void camlidl_apron_abstract0_ptr_ml2c(value v, ap_abstract0_ptr* p) */
/* { */
/*   *p = *((ap_abstract0_ptr *) Data_custom_val(v)); */
/* } */

/* static inline */
/* value camlidl_apron_abstract0_ptr_c2ml(ap_abstract0_ptr* p) */
/* { */
/*   value v; */
/*   assert((*p)->man!=NULL); */
/*   v = alloc_custom(&camlidl_apron_custom_abstract0_ptr, sizeof(ap_abstract0_ptr), */
/*		   ap_abstract0_size((*p)->man,(*p)), */
/*		   camlidl_apron_heap); */
/*   *((ap_abstract0_ptr *) Data_custom_val(v)) = *p; */
/*   return v; */
/* } */

/* /\* ********************************************************************** *\/ */
/* /\* init *\/ */
/* /\* ********************************************************************** *\/ */
/* value camlidl_apron_init(value dummy); */

#ifdef __cplusplus
}
#endif

#endif
