/* -*- mode: c -*- */

PERLEVAL @AllNumIdl = split(" ",$ENV{MLAPRONIDL_NUMTYPES})

/* ********************************************************************** */
/* apron_caml.h */
/* ********************************************************************** */

/* This file is part of the APRON Library, released under LGPL license.
   Please read the COPYING file packaged in the distribution  */

#ifndef _APRON_CAML_H_
#define _APRON_CAML_H_

#include <string.h>
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/alloc.h>
#include <caml/fail.h>
#include <caml/callback.h>
#include <caml/custom.h>
#include <caml/bigarray.h>
#include <caml/intext.h>

#include "ap_global1.h"
#include "ap_linconsMPZ.h"
#include "ap_lingenMPZ.h"

#include "gmp_caml.h"
struct camlidl_ctx_struct;

#ifdef __cplusplus
extern "C" {
#endif

#if defined(MLGMPIDL_CALLBAK)
#define mlapronidl_ptr_of_value(X,val) (*(X ## _ptr*)(Data_custom_val(val)))
#define mlapronidl_free(p) free(p)
#else
#define mlapronidl_ptr_of_value(X,val) ((X ## _ptr)(Data_custom_val(val)))
#define mlapronidl_free(p)
#endif

#define numMPZ_SIZE_ARCH32 12
#define numD_SIZE_ARCH32 8
#define numMPQ_SIZE_ARCH32 24
#define numMPFR_SIZE_ARCH32 16
#define boundMPZ_SIZE_ARCH32 16
#define boundD_SIZE_ARCH32 8
#define boundMPQ_SIZE_ARCH32 24
#define boundMPFR_SIZE_ARCH32 16
#define eitvMPZ_SIZE_ARCH32 36
#define eitvD_SIZE_ARCH32 20
#define eitvMPQ_SIZE_ARCH32 52
#define eitvMPFR_SIZE_ARCH32 36
#define ap_linexprMPZ_SIZE_ARCH32 48
#define ap_linexprD_SIZE_ARCH32 32
#define ap_linexprMPQ_SIZE_ARCH32 64
#define ap_linexprMPFR_SIZE_ARCH32 48
#define ap_linconsMPZ_SIZE_ARCH32 76
#define ap_linconsD_SIZE_ARCH32 60
#define ap_linconsMPQ_SIZE_ARCH32 92
#define ap_linconsMPFR_SIZE_ARCH32 76
#define ap_lingenMPZ_SIZE_ARCH32 52
#define ap_lingenD_SIZE_ARCH32 36
#define ap_lingenMPQ_SIZE_ARCH32 68
#define ap_lingenMPFR_SIZE_ARCH32 52
#define ap_linexprMPZ_array_SIZE_ARCH32 8
#define ap_linexprD_array_SIZE_ARCH32 8
#define ap_linexprMPQ_array_SIZE_ARCH32 8
#define ap_linexprMPFR_array_SIZE_ARCH32 8
#define ap_linconsMPZ_array_SIZE_ARCH32 8
#define ap_linconsD_array_SIZE_ARCH32 8
#define ap_linconsMPQ_array_SIZE_ARCH32 8
#define ap_linconsMPFR_array_SIZE_ARCH32 8
#define ap_lingenMPZ_array_SIZE_ARCH32 8
#define ap_lingenD_array_SIZE_ARCH32 8
#define ap_lingenMPQ_array_SIZE_ARCH32 8
#define ap_lingenMPFR_array_SIZE_ARCH32 8

#define numMPZ_SIZE_ARCH64 16
#define numD_SIZE_ARCH64 8
#define numMPQ_SIZE_ARCH64 32
#define numMPFR_SIZE_ARCH64 32
#define boundMPZ_SIZE_ARCH64 24
#define boundD_SIZE_ARCH64 8
#define boundMPQ_SIZE_ARCH64 32
#define boundMPFR_SIZE_ARCH64 32
#define eitvMPZ_SIZE_ARCH64 56
#define eitvD_SIZE_ARCH64 24
#define eitvMPQ_SIZE_ARCH64 72
#define eitvMPFR_SIZE_ARCH64 72
#define ap_linexprMPZ_SIZE_ARCH64 72
#define ap_linexprD_SIZE_ARCH64 40
#define ap_linexprMPQ_SIZE_ARCH64 88
#define ap_linexprMPFR_SIZE_ARCH64 88
#define ap_linconsMPZ_SIZE_ARCH64 112
#define ap_linconsD_SIZE_ARCH64 80
#define ap_linconsMPQ_SIZE_ARCH64 128
#define ap_linconsMPFR_SIZE_ARCH64 128
#define ap_lingenMPZ_SIZE_ARCH64 80
#define ap_lingenD_SIZE_ARCH64 48
#define ap_lingenMPQ_SIZE_ARCH64 96
#define ap_lingenMPFR_SIZE_ARCH64 96
#define ap_linexprMPZ_array_SIZE_ARCH64 16
#define ap_linexprD_array_SIZE_ARCH64 16
#define ap_linexprMPQ_array_SIZE_ARCH64 16
#define ap_linexprMPFR_array_SIZE_ARCH64 16
#define ap_linconsMPZ_array_SIZE_ARCH64 16
#define ap_linconsD_array_SIZE_ARCH64 16
#define ap_linconsMPQ_array_SIZE_ARCH64 16
#define ap_linconsMPFR_array_SIZE_ARCH64 16
#define ap_lingenMPZ_array_SIZE_ARCH64 16
#define ap_lingenD_array_SIZE_ARCH64 16
#define ap_lingenMPQ_array_SIZE_ARCH64 16
#define ap_lingenMPFR_array_SIZE_ARCH64 16


/* ********************************************************************** */
/* Dimensions, variables, environments */
/* ********************************************************************** */

void camlidl_apron_dimchange_ml2c(value v, ap_dimchange_t* dimchange, struct camlidl_ctx_struct* _ctx);
value camlidl_apron_dimchange_c2ml(ap_dimchange_t* dimchange);

typedef struct apron_var_t {
  char* name;
  size_t count;
} apron_var_t;
typedef struct apron_var_t* apron_var_ptr;
typedef struct ap_environment_t* ap_environment_ptr;

apron_var_ptr ap_var_of_string(char* name);
int ap_var_compare(ap_var_t pp1, ap_var_t pp2);
char* ap_var_to_string(ap_var_t pp);
int ap_var_hash(ap_var_t pp);
static inline
void camlidl_apron_var_ptr_ml2c(value v, ap_var_t* p){
  *p = *((ap_var_t *) Data_custom_val(v));
}
value camlidl_apron_var_ptr_c2ml(ap_var_t* p);
value camlidl_apron_var_set_operations(value v);
static inline
void camlidl_apron_environment_ptr_ml2c(value v, ap_environment_ptr* p){
  *p = *((ap_environment_ptr *) Data_custom_val(v));
}
value camlidl_apron_environment_ptr_c2ml(ap_environment_ptr* p);

/* ********************************************************************** */
/* Numbers, bounds, intervales, linear expressions/constraints/generators */
/* ********************************************************************** */

MACRO_FOREACH XXX @AllNumIdl
typedef numXXX_ptr numXXX_ptrg;
typedef numXXX_ptr numXXX_ptrm;
typedef boundXXX_ptr boundXXX_ptrg;
typedef boundXXX_ptr boundXXX_ptrm;
typedef eitvXXX_ptr eitvXXX_ptrg;
typedef eitvXXX_ptr eitvXXX_ptrm;
ENDMACRO

MACRO_FOREACH TTT ("num","bound","eitv","ap_linexpr","ap_lincons","ap_lingen")
MACRO_FOREACH XXX @AllNumIdl
value camlidl_TTTXXX_ptr_c2ml(TTTXXX_ptr* a);
static inline void camlidl_TTTXXX_ptr_ml2c(value val, TTTXXX_ptr* a)
{
  *a = mlapronidl_ptr_of_value(TTTXXX,val);
}
ENDMACRO
ENDMACRO

MACRO_FOREACH TTT ("ap_linexpr","ap_lincons","ap_lingen")
MACRO_FOREACH XXX @AllNumIdl
value camlidl_TTTXXX_array_ptr_c2ml(TTTXXX_array_ptr* a);
static inline void camlidl_TTTXXX_array_ptr_ml2c(value val, TTTXXX_array_ptr* a)
{
  *a = mlapronidl_ptr_of_value(TTTXXX_array,val);
}
ENDMACRO
ENDMACRO

/* ********************************************************************** */
/* coefficients, linyyy0 */
/* ********************************************************************** */

typedef ap_coeff_t ap_coeff_tg;
typedef ap_coeff_t ap_coeff_tm;
void camlidl_coeff_ptr_ml2c(value v, ap_coeff_t* pcoeff);
value camlidl_coeff_ptr_c2ml(ap_coeff_t* pcoeff);

MACRO_FOREACH TTT ("expr","cons","gen")
void camlidl_linTTT0_ptr_ml2c(value v, ap_linTTT0_t* plinTTT0);
value camlidl_linTTT0_ptr_c2ml(ap_linTTT0_t* plinTTT0);
void camlidl_linTTT0_array_ptr_ml2c(value v, ap_linTTT0_array_t* plinTTT0);
value camlidl_linTTT0_array_ptr_c2ml(ap_linTTT0_array_t* plinTTT0);
ENDMACRO

/* ********************************************************************** */
/* texpr0 */
/* ********************************************************************** */

typedef ap_texpr_op_t ap_texpr_unop_t;
typedef ap_texpr_op_t ap_texpr_binop_t;

static inline void camlidl_apron_texpr_unop_t_ml2c(value v, ap_texpr_op_t* op)
{
  *op = AP_TEXPR_NEG + Int_val(v); assert(*op>=AP_TEXPR_NEG && *op<=AP_TEXPR_SQRT);
}
static inline value camlidl_apron_texpr_unop_t_c2ml(ap_texpr_op_t* op)
{
  assert(*op>=AP_TEXPR_NEG && *op<=AP_TEXPR_SQRT); return Val_int((*op)-AP_TEXPR_NEG);
}
static inline void camlidl_apron_texpr_binop_t_ml2c(value v, ap_texpr_op_t* op)
{
  *op = Int_val(v); assert(*op<=AP_TEXPR_MOD); }
static inline value camlidl_apron_texpr_binop_t_c2ml(ap_texpr_op_t* op)
{
  assert(*op<=AP_TEXPR_MOD); return Val_int((*op));
}
static inline void camlidl_apron_texpr_rtype_t_ml2c(value v, ap_texpr_rtype_t* op)
{ *op = Int_val(v); assert(*op<=AP_RTYPE_QUAD); }
static inline value camlidl_apron_texpr_rtype_t_c2ml(ap_texpr_rtype_t* op)
{ assert(*op<=AP_RTYPE_QUAD); return Val_int(*op); }
static inline void camlidl_apron_texpr_rdir_t_ml2c(value v, ap_texpr_rdir_t* op)
{ *op = Int_val(v); assert(*op<=AP_RDIR_RND); }
static inline value camlidl_apron_texpr_rdir_t_c2ml(ap_texpr_rdir_t* op)
{ assert(*op<=AP_RDIR_RND); return Val_int(*op); }


typedef ap_texpr0_t* ap_texpr0_ptr;
extern struct custom_operations camlidl_apron_custom_texpr0_ptr;
static inline void camlidl_apron_texpr0_ptr_ml2c(value v, ap_texpr0_ptr* p)
{
  *p = *((ap_texpr0_ptr *) Data_custom_val(v));
}
static inline value camlidl_apron_texpr0_ptr_c2ml(ap_texpr0_ptr* p)
{
  value v;
  v = alloc_custom(&camlidl_apron_custom_texpr0_ptr, sizeof(ap_texpr0_ptr), 0,1);
  *((ap_texpr0_ptr *) Data_custom_val(v)) = *p;
  return v;
}
void camlidl_apron_texpr0_array_t_ml2c(value v_array, struct ap_texpr0_array_t* array, struct camlidl_ctx_struct* ctx);
value camlidl_apron_texpr0_array_t_c2ml(struct ap_texpr0_array_t* array);

/* ********************************************************************** */
/* tcons0 */
/* ********************************************************************** */

extern int camlidl_ml2c_common_enum_constyp(value _v1);
extern value camlidl_c2ml_common_enum_constyp(int _c1);
typedef ap_tcons0_t* ap_tcons0_ptr;

void camlidl_apron_tcons0_t_ml2c(value v, ap_tcons0_t* p);
value camlidl_apron_tcons0_t_c2ml(ap_tcons0_t* p);

void camlidl_apron_tcons0_array_t_ml2c(value v_array, struct ap_tcons0_array_t* array, struct camlidl_ctx_struct* ctx);
value camlidl_apron_tcons0_array_t_c2ml(struct ap_tcons0_array_t* array);

/* ********************************************************************** */
/* manager */
/* ********************************************************************** */

extern struct custom_operations camlidl_apron_custom_manager_ptr;
typedef ap_manager_t* ap_manager_ptr;

static inline
void camlidl_apron_manager_ptr_ml2c(value v, ap_manager_ptr* p)
{
  *p = *((ap_manager_ptr *) Data_custom_val(v));
}

static inline
value camlidl_apron_manager_ptr_c2ml(ap_manager_ptr* p)
{
  value v;
  v = alloc_custom(&camlidl_apron_custom_manager_ptr, sizeof(ap_manager_ptr),
		   0,1);
  *((ap_manager_ptr *) Data_custom_val(v)) = *p;
  return v;
}

void ap_manager_set_deserialize(ap_manager_ptr man);
ap_manager_ptr ap_manager_get_deserialize(void);


extern value camlidl_c2ml_manager_struct_ap_exclog_t(struct ap_exclog_t*, struct camlidl_ctx_struct*);
extern void camlidl_apron_manager_check_exception(struct ap_manager_t* man, void* _ctx);

/* ********************************************************************** */
/* abstract0 and num_internal */
/* ********************************************************************** */

#define I0_CHECK_EXC(man) if (man->result.exn!=AP_EXC_NONE) camlidl_apron_manager_check_exception(man,_ctx);

extern struct custom_operations camlidl_apron_custom_abstract0_ptr;
extern mlsize_t camlidl_apron_heap;
typedef ap_abstract0_t* ap_abstract0_ptr;

static inline
void camlidl_apron_abstract0_ptr_ml2c(value v, ap_abstract0_ptr* p)
{
  *p = *((ap_abstract0_ptr *) Data_custom_val(v));
}

static inline
value camlidl_apron_abstract0_ptr_c2ml(ap_abstract0_ptr* p)
{
  value v;
  assert((*p)->man!=NULL);
  v = alloc_custom(&camlidl_apron_custom_abstract0_ptr, sizeof(ap_abstract0_ptr),
		   ap_abstract0_size((*p)->man,(*p)),
		   camlidl_apron_heap);
  *((ap_abstract0_ptr *) Data_custom_val(v)) = *p;
  return v;
}

extern struct custom_operations camlidl_custom_num_internal;
static inline value camlidl_apron_num_internal_ptr_c2ml_dummy(num_internal_ptr* x)
{
  abort();
}
value camlidl_apron_num_internal_ptr_c2ml(num_internal_ptr num, ap_manager_t* man);
/* We cheat here, look at Manager.get_num_internal */
static inline void camlidl_apron_num_internal_ptr_ml2c(value val, num_internal_ptr* a)
{
  *a = *(num_internal_ptr*)(Data_custom_val(val));
}

/* ********************************************************************** */
/* init */
/* ********************************************************************** */
value camlidl_apron_init(value dummy);

#ifdef __cplusplus
}
#endif

#endif
