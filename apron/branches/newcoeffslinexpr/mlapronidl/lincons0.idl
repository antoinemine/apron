/* GENERATED FROM linyyy0.idl, DO NOT MODIFY */
#line 1 "/Users/bjeannet/dev/newcoeffslinexpr/mlapronidl/linyyy0.idl"
/* -*- mode: c -*- */

/* This file is part of the APRON Library, released under LGPL license.
   Please read the COPYING file packaged in the distribution  */

quote(C, "#include \"apron_caml.h\"")

import "linconsMPZ.idl";
import "linconsMPQ.idl";
import "linconsD.idl";
import "linconsMPFR.idl";
import "coeff.idl";

typedef [\
    abstract,c2ml(camlidl_lincons0_ptr_c2ml),\
    ml2c(camlidl_lincons0_ptr_ml2c),\
    mltype("(LinconsD.t, LinconsMPQ.t, LinconsMPFR.t) Common.t")\
] struct ap_lincons0_struct ap_lincons0_t;
typedef [\
    abstract,\
    c2ml(camlidl_lincons0_array_ptr_c2ml),\
    ml2c(camlidl_lincons0_array_ptr_ml2c),\
    mltype("(LinconsD.earray, LinconsMPQ.earray, LinconsMPFR.earray) Common.t")\
] struct ap_lincons0_array_struct ap_lincons0_array_t;

#define _AP_lincons0_MARK
#if defined(_AP_linexpr0_MARK_)
quote(MLMLI,"(** (Interval) linear expressions *)\n\n")
#elif defined(_AP_lincons0_MARK_)
quote(MLMLI,"(** (Interval) linear constraints *)\n\n")
#elif defined(_AP_linexpr0_MARK_)
quote(MLMLI,"(** Linear generators *)\n\n")
#endif

quote(MLI,"
(** {2 Linear expressions/constraints/generators} *)

(** {3 Pretty printing} *)
val print : (Dim.t -> string) -> Format.formatter -> t -> unit

(** {3 Initialization} *)
val init : Common.discr -> int -> t
val init_set : t -> t
val init_set_linconsD : LinconsD.t -> t
val init_set_linconsMPQ : LinconsMPQ.t -> t
val init_set_linconsMPFR : LinconsMPFR.t -> t

(** {3 Misc)} *)
val resize : t -> int -> unit
val minimize : t -> unit
")

quote(ML,"
let print assoc fmt (lincons:t) =
  Common.apply_arg2_discr LinconsD.print LinconsMPQ.print LinconsMPFR.print assoc fmt lincons

let init (discr:Common.discr) length : t =
  Common.map_discr0_arg LinconsD.init LinconsMPQ.init LinconsMPFR.init discr length
let init_set (lincons:t) : t =
  Common.map_discr LinconsD.init_set LinconsMPQ.init_set LinconsMPFR.init_set lincons
let init_set_linconsD x : t =
  Common.D(LinconsD.init_set x)
let init_set_linconsMPQ x : t =
  Common.MPQ(LinconsMPQ.init_set x)
let init_set_linconsMPFR x : t =
  Common.MPFR(LinconsMPFR.init_set x)
let resize (lincons:t) length =
  Common.apply_discr_arg LinconsD.resize LinconsMPQ.resize LinconsMPFR.resize lincons length
let minimize (lincons:t) =
  Common.apply_discr LinconsD.minimize LinconsMPQ.minimize LinconsMPFR.minimize lincons
")

#if defined (_AP_lincons0_MARK_)
quote(MLI,"val set_bool : t -> bool -> unit")
quote(ML,"
let set_bool (lincons:t) b =
  Common.apply_discr_arg LinconsD.set_bool LinconsMPQ.set_bool LinconsMPFR.set_bool lincons b
")
#endif

quote(MLI,"
(** {3 Assignement (with possible conversion)} *)
val set : t -> t -> Common.num_internal -> bool
val set_linconsD : t -> LinconsD.t -> Common.num_internal -> bool
val set_linconsMPQ : t -> LinconsMPQ.t -> Common.num_internal -> bool
val set_linconsMPFR : t -> LinconsMPFR.t -> Common.num_internal -> bool
val get_linconsD : LinconsD.t -> t -> Common.num_internal -> bool
val get_linconsMPQ : LinconsMPQ.t -> t -> Common.num_internal -> bool
val get_linconsMPFR : LinconsMPFR.t -> t -> Common.num_internal -> bool
")
quote(ML,"
let set_linconsD (lincons:t) x intern =
  Common.apply_discr_arg2 Conv.linconsD_set_linconsD Conv.linconsMPQ_set_linconsD Conv.linconsMPFR_set_linconsD lincons x intern
let set_linconsMPQ (lincons:t) x intern =
  Common.apply_discr_arg2 Conv.linconsD_set_linconsMPQ Conv.linconsMPQ_set_linconsMPQ Conv.linconsMPFR_set_linconsMPQ lincons x intern
let set_linconsMPFR (lincons:t) x intern =
  Common.apply_discr_arg2 Conv.linconsD_set_linconsMPFR Conv.linconsMPQ_set_linconsMPFR Conv.linconsMPFR_set_linconsMPFR lincons x intern
let set (lincons1:t) (lincons2:t) intern =
  Common.apply_arg_discr_arg set_linconsD set_linconsMPQ set_linconsMPFR lincons1 lincons2 intern
let get_linconsD x (lincons:t) intern =
  Common.apply_arg_discr_arg Conv.linconsD_set_linconsD Conv.linconsD_set_linconsMPQ Conv.linconsD_set_linconsMPFR x lincons intern
let get_linconsMPQ x (lincons:t) intern =
  Common.apply_arg_discr_arg Conv.linconsMPQ_set_linconsD Conv.linconsMPQ_set_linconsMPQ Conv.linconsMPQ_set_linconsMPFR x lincons intern
let get_linconsMPFR x (lincons:t) intern =
  Common.apply_arg_discr_arg Conv.linconsMPFR_set_linconsD Conv.linconsMPFR_set_linconsMPQ Conv.linconsMPFR_set_linconsMPFR x lincons intern
")

#if defined (_AP_linexpr0_MARK_) || defined (_AP_lincons0_MARK_)
quote(MLI,"
(** {3 Tests} *)
val is_linear : t -> bool
val is_quasilinear : t -> bool
val typ : t -> Common.exprtyp
val is_integer : t -> int -> bool
val is_real : t -> int -> bool
")
quote(ML,"
let is_linear lincons =
  Common.apply_discr LinconsD.is_linear LinconsMPQ.is_linear LinconsMPFR.is_linear lincons
let is_quasilinear lincons =
  Common.apply_discr LinconsD.is_quasilinear LinconsMPQ.is_quasilinear LinconsMPFR.is_quasilinear lincons
let typ lincons =
  Common.apply_discr LinconsD.typ LinconsMPQ.typ LinconsMPFR.typ lincons
let is_integer lincons intd =
  Common.apply_discr_arg LinconsD.is_integer LinconsMPQ.is_integer LinconsMPFR.is_integer lincons intd
let is_real lincons intd =
  Common.apply_discr_arg LinconsD.is_real LinconsMPQ.is_real LinconsMPFR.is_real lincons intd
")
#endif

quote(MLMLI,"(** {3 Access} *)")

quote(MLI,"
val iter : (Coeff.t -> Dim.t -> unit) -> t -> unit
")
quote(ML,"
let iter f a =
  match a with
  | Common.D e -> LinconsD.iter0 (fun eitvD dim -> f (Common.D eitvD) dim) e
  | Common.MPQ e -> LinconsMPQ.iter0 (fun eitvMPQ dim -> f (Common.MPQ eitvMPQ) dim) e
  | Common.MPFR e -> LinconsMPFR.iter0 (fun eitvMPFR dim -> f (Common.MPFR eitvMPFR) dim) e
")

boolean ap_lincons0_get_cst(ap_coeff_tm coeff, ap_lincons0_t expr, num_internal_ptr intern);
boolean ap_lincons0_get_coeff(ap_coeff_tm coeff, ap_lincons0_t expr, ap_dim_t dim, num_internal_ptr intern);
boolean ap_lincons0_set_cst(ap_lincons0_t expr, ap_coeff_tg coeff, num_internal_ptr intern);
boolean ap_lincons0_set_coeff(ap_lincons0_t expr, ap_dim_t dim, ap_coeff_tg coeff, num_internal_ptr intern);
#if defined (_AP_lincons0_MARK_) || defined (_AP_lingen0_MARK_)
boolean ap_lincons0_get_linexpr0(ap_linexpr0_t e, ap_lincons0_t c, num_internal_ptr intern);
ap_constyp_t ap_lincons0_get_constyp(ap_lincons0_t c);
boolean ap_lincons0_set_linexpr0(ap_lincons0_t c, ap_linexpr0_t e, num_internal_ptr intern);
void ap_lincons0_set_constyp(ap_lincons0_t c, ap_constyp_t constyp);
#endif
#if defined (_AP_lincons0_MARK_)
quote(MLI,"
val get_mpq : Mpq.t -> t -> unit
val se_mpq : t -> 'a Mpq.tt -> unit
")
quote(ML,"
let get_mpq mpq discr = Common.apply_arg_discr LinconsD.get_mpq LinconsMPQ.get_mpq LinconsMPFR.get_mpq mpq discr
let set_mpq discr mpq = Common.apply_discr_arg LinconsD.set_mpq LinconsMPQ.set_mpq LinconsMPFR.set_mpq discr mpq
")
#endif

quote(MLI,"
(** {3 Change of dimensions} *)
val add_dimensions : t -> t -> Dim.change -> unit
val permute_dimensions : t -> t -> Dim.perm -> unit

(** {3 Tests} *)
val equal : t -> t -> bool
val hash : t -> int
")

quote(ML,"
let add_dimensions res expr dimchange =
  Common.mapsame_discr2_arg LinconsD.add_dimensions LinconsMPQ.add_dimensions LinconsMPFR.add_dimensions res expr dimchange
let permute_dimensions res expr dimperm =
  Common.mapsame_discr2_arg LinconsD.permute_dimensions LinconsMPQ.permute_dimensions LinconsMPFR.permute_dimensions res expr dimperm
let extend_environment res ~newenv old ~oldenv =
  match (res,old) with
  | (Common.D res, Common.D old) -> LinconsD.extend_environment res ~newenv old ~oldenv
  | (Common.MPQ res, Common.MPQ old) -> LinconsMPQ.extend_environment res ~newenv old ~oldenv
  | (Common.MPFR res, Common.MPFR old) -> LinconsMPFR.extend_environment res ~newenv old ~oldenv
  | _ -> raise (Invalid_argument \"The two argument sould have the same constructor (D, MPQ, or MPFR)\")
let array_extend_environment res ~newenv old ~oldenv =
  match (res,old) with
  | (Common.D res, Common.D old) -> LinconsD.array_extend_environment res ~newenv old ~oldenv
  | (Common.MPQ res, Common.MPQ old) -> LinconsMPQ.array_extend_environment res ~newenv old ~oldenv
  | (Common.MPFR res, Common.MPFR old) -> LinconsMPFR.array_extend_environment res ~newenv old ~oldenv
  | _ -> raise (Invalid_argument \"The two argument sould have the same constructor (D, MPQ, or MPFR)\")
let equal (lincons1:t) (lincons2:t) =
  match (lincons1,lincons2) with
  | (Common.D x1, Common.D x2) -> LinconsD.equal x1 x2
  | (Common.MPQ x1, Common.MPQ x2) -> LinconsMPQ.equal x1 x2
  | (Common.MPFR x1, Common.MPFR x2) -> LinconsMPFR.equal x1 x2
  | _ -> false
let hash (lincons:t) =
  Common.apply_discr LinconsD.hash LinconsMPQ.hash LinconsMPFR.hash lincons
")

int ap_lincons0_compare(ap_lincons0_t a, ap_lincons0_t b);

quote(MLI,"
(** {2 Arrays} *)
(** {3  Pretty printing} *)

val array_print :
  ?first:(unit, Format.formatter, unit) format ->
  ?sep:(unit, Format.formatter, unit) format ->
  ?last:(unit, Format.formatter, unit) format ->
 (Dim.t -> string) -> Format.formatter -> earray -> unit

(** {3 Initialization and Assignement Functions} *)
val array_init : Common.discr -> int -> earray
val array_init_set : earray -> earray
val array_init_set_linconsD_array : LinconsD.earray -> earray
val array_init_set_linconsMPQ_array : LinconsMPQ.earray -> earray
val array_init_set_linconsMPFR_array : LinconsMPFR.earray -> earray
val array_resize : earray -> int -> unit
val array_minimize : earray -> unit
")
quote(ML,"
let array_print ?first ?sep ?last assoc fmt = function
  | Common.D x -> LinconsD.array_print ?first ?sep ?last assoc fmt x
  | Common.MPQ x -> LinconsMPQ.array_print ?first ?sep ?last assoc fmt x
  | Common.MPFR x -> LinconsMPFR.array_print ?first ?sep ?last assoc fmt x
let array_init discr size = Common.map_discr0_arg LinconsD.array_init LinconsMPQ.array_init LinconsMPFR.array_init discr size
let array_init_set discr = Common.map_discr LinconsD.array_init_set LinconsMPQ.array_init_set LinconsMPFR.array_init_set discr
let array_init_set_linconsD_array x : earray =
  Common.D(LinconsD.array_init_set x)
let array_init_set_linconsMPQ_array x : earray =
  Common.MPQ(LinconsMPQ.array_init_set x)
let array_init_set_linconsMPFR_array x : earray =
  Common.MPFR(LinconsMPFR.array_init_set x)
let array_resize discr size = Common.apply_discr_arg LinconsD.array_resize LinconsMPQ.array_resize LinconsMPFR.array_resize discr size
let array_minimize discr = Common.apply_discr LinconsD.array_minimize LinconsMPQ.array_minimize LinconsMPFR.array_minimize discr
")

quote(MLMLI,"\n(** {3 Assignements with conversions} *)")

boolean ap_lincons0_array_set(ap_lincons0_array_t res, ap_lincons0_array_t e, num_internal_ptr intern);

quote(MLI,"
val array_set_linconsD_array : earray -> LinconsD.earray -> Common.num_internal -> bool
val array_set_linconsMPQ_array : earray -> LinconsMPQ.earray -> Common.num_internal -> bool
val array_set_linconsMPFR_array : earray -> LinconsMPFR.earray -> Common.num_internal -> bool
val array_get_linconsD_array : LinconsD.earray -> earray -> Common.num_internal -> bool
val array_get_linconsMPQ_array : LinconsMPQ.earray -> earray -> Common.num_internal -> bool
val array_get_linconsMPFR_array : LinconsMPFR.earray -> earray -> Common.num_internal -> bool
")
quote(ML,"
let array_set_linconsD_array (earray:earray) x intern =
  Common.apply_discr_arg2 Conv.linconsD_array_set_linconsD_array Conv.linconsMPQ_array_set_linconsD_array Conv.linconsMPFR_array_set_linconsD_array earray x intern
let array_set_linconsMPQ_array (earray:earray) x intern =
  Common.apply_discr_arg2 Conv.linconsD_array_set_linconsMPQ_array Conv.linconsMPQ_array_set_linconsMPQ_array Conv.linconsMPFR_array_set_linconsMPQ_array earray x intern
let array_set_linconsMPFR_array (earray:earray) x intern =
  Common.apply_discr_arg2 Conv.linconsD_array_set_linconsMPFR_array Conv.linconsMPQ_array_set_linconsMPFR_array Conv.linconsMPFR_array_set_linconsMPFR_array earray x intern
let array_get_linconsD_array x (earray:earray) intern =
  Common.apply_arg_discr_arg Conv.linconsD_array_set_linconsD_array Conv.linconsD_array_set_linconsMPQ_array Conv.linconsD_array_set_linconsMPFR_array x earray intern
let array_get_linconsMPQ_array x (earray:earray) intern =
  Common.apply_arg_discr_arg Conv.linconsMPQ_array_set_linconsD_array Conv.linconsMPQ_array_set_linconsMPQ_array Conv.linconsMPQ_array_set_linconsMPFR_array x earray intern
let array_get_linconsMPFR_array x (earray:earray) intern =
  Common.apply_arg_discr_arg Conv.linconsMPFR_array_set_linconsD_array Conv.linconsMPFR_array_set_linconsMPQ_array Conv.linconsMPFR_array_set_linconsMPFR_array x earray intern
")

boolean ap_lincons0_array_set_index_linconsD(ap_lincons0_array_t p, unsigned int i, ap_linconsD_ptr a, num_internal_ptr intern);
boolean ap_lincons0_array_set_index_linconsMPQ(ap_lincons0_array_t p, unsigned int i, ap_linconsMPQ_ptr a, num_internal_ptr intern);
boolean ap_lincons0_array_set_index_linconsMPFR(ap_lincons0_array_t p, unsigned int i, ap_linconsMPFR_ptr a, num_internal_ptr intern);
boolean ap_lincons0_array_get_index_linconsD(ap_linconsD_ptr a, ap_lincons0_array_t p, unsigned int i, num_internal_ptr intern);
boolean ap_lincons0_array_get_index_linconsMPQ(ap_linconsMPQ_ptr a, ap_lincons0_array_t p, unsigned int i, num_internal_ptr intern);
boolean ap_lincons0_array_get_index_linconsMPFR(ap_linconsMPFR_ptr a, ap_lincons0_array_t p, unsigned int i, num_internal_ptr intern);

#if defined (_AP_linexpr0_MARK_) || defined (_AP_lincons0_MARK_)
quote(MLI,"
(** {3 Tests} *)
val array_is_linear : earray -> bool
val array_is_quasilinear : earray -> bool
val array_typ : earray -> Common.exprtyp
")
quote(ML,"
let array_is_linear lincons =
  Common.apply_discr LinconsD.array_is_linear LinconsMPQ.array_is_linear LinconsMPFR.array_is_linear lincons
let array_is_quasilinear lincons =
  Common.apply_discr LinconsD.array_is_quasilinear LinconsMPQ.array_is_quasilinear LinconsMPFR.array_is_quasilinear lincons
let array_typ lincons =
  Common.apply_discr LinconsD.array_typ LinconsMPQ.array_typ LinconsMPFR.array_typ lincons
")
#endif

quote(MLI,"
(** {3 Access} *)
val array_size : earray -> int
")
quote(ML,"
let array_size = Common.apply_discr LinconsD.array_size LinconsMPQ.array_size LinconsMPFR.array_size
")
boolean ap_lincons0_array_set_index(ap_lincons0_array_t p, unsigned int i, ap_lincons0_t a, num_internal_ptr intern);
boolean ap_lincons0_array_get_index(ap_lincons0_t a, ap_lincons0_array_t p, unsigned int i, num_internal_ptr intern);

quote(MLI,"
(** {3 Change of dimensions} *)
val array_add_dimensions : earray -> earray -> Dim.change -> unit
val array_permute_dimensions : earray -> earray -> Dim.perm -> unit
")

quote(ML,"
let array_add_dimensions res expr dimchange =
  Common.mapsame_discr2_arg LinconsD.array_add_dimensions LinconsMPQ.array_add_dimensions LinconsMPFR.array_add_dimensions res expr dimchange
let array_permute_dimensions res expr dimperm =
  Common.mapsame_discr2_arg LinconsD.array_permute_dimensions LinconsMPQ.array_permute_dimensions LinconsMPFR.array_permute_dimensions res expr dimperm
")

quote(MLI,"\n\
(** Internal usage *)\n\
val extend_environment: t -> newenv:Environment.t -> t -> oldenv:Environment.t -> unit\n\
val array_extend_environment: earray -> newenv:Environment.t -> earray -> oldenv:Environment.t -> unit\n\
")
