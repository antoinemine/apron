/* -*- mode: c -*- */

/* ************************************************************************* */
/* ap_coeff.c: coefficients, that are either scalars or intervals */
/* ************************************************************************* */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <assert.h>

#include "ap_coeff.h"
#include "numbounditvD_conv.h"
#include "numbounditvMPQ_conv.h"
#include "numbounditvMPFR_conv.h"
#include "eitvD.h"
#include "eitvMPQ.h"
#include "eitvMPFR.h"

#include "numbounditvIl_conv.h"
#include "numbounditvIll_conv.h"
#include "numbounditvMPZ_conv.h"
#include "numbounditvRl_conv.h"
#include "numbounditvRll_conv.h"
#include "numbounditvDl_conv.h"

/* ====================================================================== */
/* Basics */
/* ====================================================================== */

void ap_coeff_init(ap_coeff_t a, ap_scalar_discr_t discr)
{
  a->discr = discr;
  SWITCH(discr)
    a->eitv.XXX = eitvXXX_alloc();
  ENDSWITCH
}

void ap_coeff_init_set(ap_coeff_t a, ap_coeff_t b)
{
  a->discr = b->discr;
  SWITCH(b->discr)
    a->eitv.XXX = eitvXXX_alloc_set(b->eitv.XXX);
  ENDSWITCH
}
MACRO_MAINZ
void ap_coeff_init_set_eitvZZZ(ap_coeff_t a, eitvZZZ_t eitv)
{
  a->discr = AP_SCALAR_ZZZ;
  eitvZZZ_init_set(a->eitv.ZZZ,eitv);
}
ENDMACRO
void ap_coeff_clear(ap_coeff_t a)
{
  SWITCH(a->discr)
    eitvXXX_clear(a->eitv.XXX);
  ENDSWITCH
}
void ap_coeff_fprint(FILE* stream, ap_coeff_t a)
{
  SWITCH(a->discr)
    eitvXXX_fprint(stream,a->eitv.XXX);
  ENDSWITCH
}
void ap_coeff_set_int(ap_coeff_t a, int b)
{
  SWITCH(a->discr)
    eitvXXX_set_int(a->eitv.XXX,b);
  ENDSWITCH
}
bool ap_coeff_set(ap_coeff_t a, ap_coeff_t b, num_internal_t intern)
{
  bool res;
  if (a->discr==b->discr){
    SWITCH(a->discr)
      eitvXXX_set(a->eitv.XXX,b->eitv.XXX);
    ENDSWITCH
    return true;
  }
  else {
    SWITCH(a->discr)
      res = eitvXXX_set_ap_coeff(a->eitv.XXX,b,intern);
    ENDSWITCH
    return res;
  }
}
void ap_coeff_set_top(ap_coeff_t a)
{
  SWITCH(a->discr)
    eitvXXX_set_top(a->eitv.XXX);
  ENDSWITCH
}
void ap_coeff_set_bottom(ap_coeff_t a)
{
  SWITCH(a->discr)
    eitvXXX_set_bottom(a->eitv.XXX);
  ENDSWITCH
}

/* ====================================================================== */
/* Conversions */
/* ====================================================================== */

MACRO_ALLZ
bool ap_coeff_set_eitvZZZ(ap_coeff_t a, eitvZZZ_t b, num_internal_t intern)
{
  switch (a->discr){
  case AP_SCALAR_D:
    return eitvD_set_eitvZZZ(a->eitv.D,b,intern);
  case AP_SCALAR_MPQ:
    return eitvMPQ_set_eitvZZZ(a->eitv.MPQ,b,intern);
  case AP_SCALAR_MPFR:
    return eitvMPFR_set_eitvZZZ(a->eitv.MPFR,b,intern);
  default:
    abort();
  }
}
bool eitvZZZ_set_ap_coeff(eitvZZZ_t a, ap_coeff_t b, num_internal_t intern)
{
  switch(b->discr){
  case AP_SCALAR_D:
    return eitvZZZ_set_eitvD(a,b->eitv.D,intern);
  case AP_SCALAR_MPQ:
    return eitvZZZ_set_eitvMPQ(a,b->eitv.MPQ,intern);
  case AP_SCALAR_MPFR:
    return eitvZZZ_set_eitvMPFR(a,b->eitv.MPFR,intern);
  default:
    abort();
  }
}
ENDMACRO

/* ====================================================================== */
/* Tests */
/* ====================================================================== */

bool ap_coeff_is_point(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_point(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_zero(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_zero(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_pos(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_pos(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_neg(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_neg(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_top(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_top(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_equal(ap_coeff_t a, ap_coeff_t b)
{
  bool res;
  if (a->discr==b->discr){
    SWITCH(a->discr)
      res = eitvXXX_is_eq(a->eitv.XXX,b->eitv.XXX);
    ENDSWITCH
    return res;
  }
  else {
    return false;
  }
}

/* ====================================================================== */
/* Other operations */
/* ====================================================================== */

/* Hash */
long ap_coeff_hash(ap_coeff_t a)
{
  long res;
  SWITCH(a->discr)
    res = eitvXXX_hash(a->eitv.XXX);
  ENDSWITCH
  return res;
}
