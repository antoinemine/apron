/* -*- mode: c -*- */

/* ************************************************************************* */
/* ap_coeff.c: coefficients, that are either scalars or intervals */
/* ************************************************************************* */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <assert.h>

#include "ap_coeff.h"
#include "eitvIl_conv.h"
#include "eitvIll_conv.h"
#include "eitvMPZ_conv.h"
#include "eitvRl_conv.h"
#include "eitvRll_conv.h"
#include "eitvMPQ_conv.h"
#include "eitvD_conv.h"
#include "eitvDl_conv.h"
#include "eitvMPFR_conv.h"

/* ====================================================================== */
/* Basics */
/* ====================================================================== */

void ap_coeff_init(ap_coeff_t a, ap_scalar_discr_t discr)
{
  a->ref = false;
  a->discr = discr;
  SWITCH(discr)
    a->eitv.XXX = eitvXXX_alloc();
  ENDSWITCH
}

void ap_coeff_init_set(ap_coeff_t a, ap_coeff_t b)
{
  a->ref = false;
  a->discr = b->discr;
  SWITCH(b->discr)
    a->eitv.XXX = eitvXXX_alloc_set(b->eitv.XXX);
  ENDSWITCH
}
MACROX
void ap_coeff_init_set_XXX(ap_coeff_t a, eitvXXX_t eitv)
{
  a->ref = false;
  a->discr = AP_SCALAR_XXX;
  eitvXXX_init_set(a->eitv.XXX,eitv);
}
ENDMACRO
void ap_coeff_clear(ap_coeff_t a)
{
  if (a->ref==false){
    SWITCH(a->discr)
      eitvXXX_clear(a->eitv.XXX);
    ENDSWITCH
  }
}
void ap_coeff_fprint(FILE* stream, ap_coeff_t a)
{
  SWITCH(a->discr)
    eitvXXX_fprint(stream,a->eitv.XXX);
  ENDSWITCH
}
void ap_coeff_set_int(ap_coeff_t a, int b)
{
  SWITCH(a->discr)
    eitvXXX_set_int(a->eitv.XXX,b);
  ENDSWITCH
}
bool ap_coeff_set(ap_coeff_t a, ap_coeff_t b, numinternal_t intern)
{
  bool res;
  if (a->discr==b->discr){
    SWITCH(a->discr)
      eitvXXX_set(a->eitv.XXX,b->eitv.XXX);
    ENDSWITCH
    return true;
  }
  else {
    SWITCH(a->discr)
      res = eitvXXX_set_ap_coeff(a->eitv.XXX,b,intern);
    ENDSWITCH
    return res;
  }
}
void ap_coeff_set_top(ap_coeff_t a)
{
  SWITCH(a->discr)
    eitvXXX_set_top(a->eitv.XXX);
  ENDSWITCH
}
void ap_coeff_set_bottom(ap_coeff_t a)
{
  SWITCH(a->discr)
    eitvXXX_set_bottom(a->eitv.XXX);
  ENDSWITCH
}

/* ====================================================================== */
/* Conversions */
/* ====================================================================== */

MACROY
bool ap_coeff_set_eitvYYY(ap_coeff_t a, eitvYYY_t b, numinternal_t intern)
{
  switch (a->discr){
  case AP_SCALAR_D:
    return eitvD_set_eitvYYY(a->eitv.D,b,intern);
  case AP_SCALAR_MPQ:
    return eitvMPQ_set_eitvYYY(a->eitv.MPQ,b,intern);
  case AP_SCALAR_MPFR:
    return eitvMPFR_set_eitvYYY(a->eitv.MPFR,b,intern);
  default:
    abort();
  }
}
ENDMACRO

bool ap_coeff_set_eitvD(ap_coeff_t a, eitvD_t b, numinternal_t intern)
{
  switch (a->discr){
  case AP_SCALAR_D:
    eitvD_set(a->eitv.D,b);
    return true;
  case AP_SCALAR_MPQ:
    return eitvMPQ_set_eitvD(a->eitv.MPQ,b,intern);
  case AP_SCALAR_MPFR:
    return eitvMPFR_set_eitvD(a->eitv.MPFR,b,intern);
  default:
    abort();
  }
}
bool ap_coeff_set_eitvMPQ(ap_coeff_t a, eitvMPQ_t b, numinternal_t intern)
{
  switch (a->discr){
  case AP_SCALAR_D:
    return eitvD_set_eitvMPQ(a->eitv.D,b,intern);
  case AP_SCALAR_MPQ:
    eitvMPQ_set(a->eitv.MPQ,b);
    return true;
  case AP_SCALAR_MPFR:
    return eitvMPFR_set_eitvMPQ(a->eitv.MPFR,b,intern);
  default:
    abort();
  }
}
bool ap_coeff_set_eitvMPFR(ap_coeff_t a, eitvMPFR_t b, numinternal_t intern)
{
  switch (a->discr){
  case AP_SCALAR_D:
    return eitvD_set_eitvMPFR(a->eitv.D,b,intern);
  case AP_SCALAR_MPQ:
    return eitvMPQ_set_eitvMPFR(a->eitv.MPQ,b,intern);
  case AP_SCALAR_MPFR:
    eitvMPFR_set(a->eitv.MPFR,b);
    return true;
  default:
    abort();
  }
}

MACROY
bool eitvYYY_set_ap_coeff(eitvYYY_t a, ap_coeff_t b, numinternal_t intern)
{
  switch(b->discr){
  case AP_SCALAR_D:
    return eitvYYY_set_eitvD(a,b->eitv.D,intern);
  case AP_SCALAR_MPQ:
    return eitvYYY_set_eitvMPQ(a,b->eitv.MPQ,intern);
  case AP_SCALAR_MPFR:
    return eitvYYY_set_eitvMPFR(a,b->eitv.MPFR,intern);
  default:
    abort();
  }
}
ENDMACRO

bool eitvMPQ_set_ap_coeff(eitvMPQ_t a, ap_coeff_t b, numinternal_t intern)
{
  switch(b->discr){
  case AP_SCALAR_D:
    return eitvMPQ_set_eitvD(a,b->eitv.D,intern);
  case AP_SCALAR_MPQ:
    eitvMPQ_set(a,b->eitv.MPQ);
    return true;
  case AP_SCALAR_MPFR:
    return eitvMPQ_set_eitvMPFR(a,b->eitv.MPFR,intern);
  default:
    abort();
  }
}
bool eitvD_set_ap_coeff(eitvD_t a, ap_coeff_t b, numinternal_t intern)
{
  switch(b->discr){
  case AP_SCALAR_D:
    eitvD_set(a,b->eitv.D);
    return true;
  case AP_SCALAR_MPQ:
    return eitvD_set_eitvMPQ(a,b->eitv.MPQ,intern);
  case AP_SCALAR_MPFR:
    return eitvD_set_eitvMPFR(a,b->eitv.MPFR,intern);
  default:
    abort();
  }
}
bool eitvMPFR_set_ap_coeff(eitvMPFR_t a, ap_coeff_t b, numinternal_t intern)
{
  switch(b->discr){
  case AP_SCALAR_D:
    return eitvMPFR_set_eitvD(a,b->eitv.D,intern);
  case AP_SCALAR_MPQ:
    return eitvMPFR_set_eitvMPQ(a,b->eitv.MPQ,intern);
  case AP_SCALAR_MPFR:
    eitvMPFR_set(a,b->eitv.MPFR);
    return true;
  default:
    abort();
  }
}

/* ====================================================================== */
/* Tests */
/* ====================================================================== */

bool ap_coeff_is_point(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_point(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_zero(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_zero(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_pos(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_pos(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_neg(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_neg(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_is_top(ap_coeff_t a)
{
  bool res;
  SWITCH(a->discr)
    res = eitvXXX_is_top(a->eitv.XXX);
  ENDSWITCH
  return res;
}
bool ap_coeff_equal(ap_coeff_t a, ap_coeff_t b)
{
  bool res;
  if (a->discr==b->discr){
    SWITCH(a->discr)
      res = eitvXXX_is_eq(a->eitv.XXX,b->eitv.XXX);
    ENDSWITCH
    return res;
  }
  else {
    return false;
  }
}

/* ====================================================================== */
/* Other operations */
/* ====================================================================== */

/* Hash */
long ap_coeff_hash(ap_coeff_t a)
{
  long res;
  SWITCH(a->discr)
    res = eitvXXX_hash(a->eitv.XXX);
  ENDSWITCH
  return res;
}
