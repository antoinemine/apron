/* -*- mode: c -*- */

/* ************************************************************************* */
/* ap_linexpr0.c: linear expressions */
/* ************************************************************************* */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

#include "ap_linexpr0.h"
#include "ap_linexprconsD.h"
#include "ap_linexprconsMPQ.h"
#include "ap_linexprconsMPFR.h"
#include <stdarg.h>

/* ====================================================================== */
/* I. Memory management and printing */
/* ====================================================================== */

void ap_linexpr0_init(ap_linexpr0_t res, ap_scalar_discr_t discr, size_t size)
{
  res->ref = false;
  res->discr = discr;
  SWITCH(discr)
    res->linexpr.XXX = ap_linexprXXX_alloc(size);
  ENDSWITCH
}
void ap_linexpr0_init_set(ap_linexpr0_t res,ap_linexpr0_t e)
{
  res->ref = false;
  res->discr = e->discr;
  SWITCH(e->discr)
    res->linexpr.XXX = ap_linexprXXX_alloc_set(e->linexpr.XXX);
  ENDSWITCH
}
MACRO_MAINZ
void ap_linexpr0_init_set_ZZZ(ap_linexpr0_t res, ap_linexprZZZ_t e)
{
  ap_linexpr0_init(res,AP_SCALAR_ZZZ,e->size);
  ap_linexprZZZ_set(res->linexpr.ZZZ,e);
}
ENDMACRO
void ap_linexpr0_clear(ap_linexpr0_t e)
{
  if (e->ref==false){
    SWITCH(e->discr)
      ap_linexprXXX_clear(e->linexpr.XXX);
    ENDSWITCH
  }
}
void ap_linexpr0_fprint(FILE* stream, ap_linexpr0_t e, char** name_of_dim)
{
  SWITCH(e->discr){
    ap_linexprXXX_fprint(stream,e->linexpr.XXX,name_of_dim);
  ENDSWITCH
}
void ap_linexpr0_minimize(ap_linexpr0_t e)
{
  SWITCH(e->discr){
    ap_linexprXXX_minimize(e->linexpr.XXX);
  ENDSWITCH
}

/* ====================================================================== */
/* Conversions */
/* ====================================================================== */

MACRO_MAINZ
bool ap_linexpr0_set_ap_linexprZZZ(ap_linexpr0_t a, ap_linexprZZZ_t b, numinternal_t intern)
{
  switch (a->discr){
  case AP_SCALAR_D:
    return itvD_linexpr_set_ap_linexprZZZ(a->linexpr.D,b,intern);
  case AP_SCALAR_MPQ:
    return itvMPQ_linexpr_set_ap_linexprZZZ(a->linexpr.MPQ,b,intern);
  case AP_SCALAR_MPFR:
    return itvMPFR_linexpr_set_ap_linexprZZZ(a->linexpr.MPFR,b,intern);
  default:
    abort();
  }
}
bool ap_linexprZZZ_set_ap_linexpr0(ap_linexprZZZ_t a, ap_linexpr0_t b, numinternal_t intern)
{
  switch(b->discr){
  case AP_SCALAR_D:
    return ap_linexprZZZ_set_itvD_linexpr(a,b->linexpr.D,intern);
  case AP_SCALAR_MPQ:
    return ap_linexprZZZ_set_itvMPQ_linexpr(a,b->linexpr.MPQ,intern);
  case AP_SCALAR_MPFR:
    return ap_linexprZZZ_set_itvMPFR_linexpr(a,b->linexpr.MPFR,intern);
  default:
    abort();
  }
}
ENDMACRO

/* ====================================================================== */
/* III. Access */
/* ====================================================================== */

/* Get the constant and assign it to coeff with possible conversion */
bool ap_linexpr0_get_cst(ap_coeff_t coeff, ap_linexpr0_t expr, numinternal_t intern)
{
  SWITCH (expr->discr)
    return ap_coeff_set_eitvXXX(coeff,expr->linexpr.XXX->cst,intern);
  ENDSWITCH
}
bool ap_linexpr0_get_coeff(ap_coeff_t coeff, ap_linexpr0_t expr, ap_dim_t dim, numinternal_t intern)
{
  SWITCH (expr->discr)
    eitvXXX_ptr eitv = ap_linexprXXX_eitvref(expr->linexpr.XXX,dim,false);
    if (eitv==NULL) break; else return ap_coeff_set_eitvXXX(coeff,eitv,intern);
  ENDSWITCH
  ap_coeff_set_int(coeff,0);
  return true;
}
void ap_linexpr0_cstref(ap_coeff_t res, ap_linexpr0_t expr)
{
  SWITCH (expr->discr)
    ap_coeff_ref_XXX(res,expr->linexpr.XXX->cst);
  ENDSWITCH
}
void ap_linexpr0_coeffref(ap_coeff_t res, ap_linexpr0_t expr, ap_dim_t dim)
{
  SWITCH (expr->discr)
    eitvXXX_ptr eitv = ap_linexprXXX_eitvref(expr->linexpr.XXX,dim,true);
    ap_coeff_ref_XXX(res,eitv);
  ENDSWITCH
}

bool ap_linexpr0_set_list(numinternal_t intern,
			  ap_linexpr0_t expr, ...)
{
  bool res;
  va_list va;
  va_start(va,expr);
  SWITCH (expr->discr)
    res = ap_linexprXXX_set_list_generic(ap_linexprXXX_set_list_get_eitvXXX_of_dim,
					  NULL,
					  intern,expr->linexpr.XXX,&va);
  ENDSWITCH
  va_end(va);
  return res;
}

/* ====================================================================== */
/* IV. Change of dimensions and permutations */
/* ====================================================================== */

void ap_linexpr0_add_dimensions(ap_linexpr0_t res,
				ap_linexpr0_t expr,
				ap_dimchange_t* dimchange)
{
  if (res->discr!=expr->discr || (res==expr && expr->ref))
    abort();
  SWITCH (expr->discr)
    ap_linexprXXX_add_dimensions(res->linexpr.XXX,expr->linexpr.XXX,dimchange);
  ENDSWITCH
}
void ap_linexpr0_permute_dimensions(ap_linexpr0_t res,
				    ap_linexpr0_t expr,
				    ap_dimperm_t* perm)
{
  if (res->discr!=expr->discr || (res==expr && expr->ref))
    abort();
  SWITCH (expr->discr)
    ap_linexprXXX_permute_dimensions(res->linexpr.XXX,expr->linexpr.XXX,perm);
  ENDSWITCH
}

/* ====================================================================== */
/* V. Hashing, comparison */
/* ====================================================================== */

/* Induces reduction of the coefficients */

int ap_linexpr0_hash(ap_linexpr0_t expr)
{
  int res;
  SWITCH(expr->discr)
    res = ap_linexprXXX_hash(expr->linexpr.XXX);
  ENDSWITCH
  return res;
}
bool ap_linexpr0_equal(ap_linexpr0_t expr1,
		       ap_linexpr0_t expr2)
{
  bool res;
  if (expr1->discr != expr2->discr)
    res = false;
  else {
    SWITCH(expr1->discr)
      res = ap_linexprXXX_equal(expr1->linexpr.XXX,expr2->linexpr.XXX);
    ENDSWITCH
  }
  return res;
}
/* Lexicographic ordering, terminating by constant coefficients */
int ap_linexpr0_compare(ap_linexpr0_t expr1,
			ap_linexpr0_t expr2)
{
  int res;
  if (expr1->discr != expr2->discr){
    res = (expr1->discr - expr2->discr);
    res = res>0 ? 3 : -3;
  }
  else {
    SWITCH(expr1->discr)
      res = ap_linexprXXX_compare(expr1->linexpr.XXX,expr2->linexpr.XXX);
    ENDSWITCH
  }
  return res;
}
